From 73120fd644b5bf9a8801180a9e23668f113643e4 Mon Sep 17 00:00:00 2001
From: gigasquid <cmeier@gigasquidsoftware.com>
Date: Thu, 15 Dec 2011 21:14:39 -0500
Subject: [PATCH] checking for nth errors [clj-5]

---
 src/clj/clojure/core.clj          |   16 ++++++++++++
 src/script/run_tests.clj          |    1 +
 test/clojure/test_clojure/let.clj |   50 +++++++++++++++++++++++++++++++++++++
 3 files changed, 67 insertions(+), 0 deletions(-)
 create mode 100644 test/clojure/test_clojure/let.clj

diff --git a/src/clj/clojure/core.clj b/src/clj/clojure/core.clj
index b0a25fc..0cd3375 100644
--- a/src/clj/clojure/core.clj
+++ b/src/clj/clojure/core.clj
@@ -3893,6 +3893,21 @@
   ([] (. clojure.lang.PersistentArrayMap EMPTY))
   ([& keyvals] (clojure.lang.PersistentArrayMap/createWithCheck (to-array keyvals))))
 
+(defn ^{:private true}
+  check-nth-errors [val]
+  (cond
+    (nil? val) :good
+    (symbol? val) :good
+    (instance? CharSequence val) :good
+    (-> val .getClass .isArray) :good
+    (instance? java.util.RandomAccess val) :good
+    (instance? java.util.regex.Matcher val) :good
+    (instance? java.util.Map$Entry val) :good
+    (instance? clojure.lang.Sequential val) :good
+    :else ( if (instance? clojure.lang.IPersistentCollection  val)
+            (throw (new Exception (str "let cannot destructure " (.getClass val) ". Try converting it to a seq.")))
+            (throw (new Exception (str "let cannot destructure " (.getClass val)))))))
+
 ;redefine let and loop  with destructuring
 (defn destructure [bindings]
   (let [bents (partition 2 bindings)
@@ -3904,6 +3919,7 @@
                                 n 0
                                 bs b
                                 seen-rest? false]
+                           (check-nth-errors val)
                            (if (seq bs)
                              (let [firstb (first bs)]
                                (cond
diff --git a/src/script/run_tests.clj b/src/script/run_tests.clj
index 6720abd..d1dd954 100644
--- a/src/script/run_tests.clj
+++ b/src/script/run_tests.clj
@@ -23,6 +23,7 @@ clojure.test-clojure.java.javadoc
 clojure.test-clojure.java.shell
 clojure.test-clojure.java-interop
 clojure.test-clojure.keywords
+clojure.test-clojure.let
 clojure.test-clojure.load
 clojure.test-clojure.logic
 clojure.test-clojure.macros
diff --git a/test/clojure/test_clojure/let.clj b/test/clojure/test_clojure/let.clj
new file mode 100644
index 0000000..6ae0aaa
--- /dev/null
+++ b/test/clojure/test_clojure/let.clj
@@ -0,0 +1,50 @@
+;   Copyright (c) Rich Hickey. All rights reserved.
+;   The use and distribution terms for this software are covered by the
+;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
+;   which can be found in the file epl-v10.html at the root of this distribution.
+;   By using this software in any fashion, you are agreeing to be bound by
+;   the terms of this license.
+;   You must not remove this notice, or any other, from this software.
+
+; Author: Carin Meier
+
+(ns clojure.test-clojure.let
+  (:use clojure.test))
+
+(deftest let-basic-uses
+  (testing "simple binding"
+    (is (= 1
+          (eval '(let [x 1 y x] x)))))
+
+  (testing "let vector bindings"
+    (is (= [1 2 3 '(4 5 6 7) [1 2 3 4 5 6 7]]
+          (eval '(let [[a b c & d :as e] [1 2 3 4 5 6 7]]
+                   [a b c d e])) )))
+
+  (testing "let nested vector bindings"
+    (is (= [1 2 3 4]
+          (eval '(let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]
+                   [x1 y1 x2 y2])))))
+  
+  (testing "let string to vector binding"
+    (is (= [\a \s '(\d \j \h \h \f \d \a \s) "asdjhhfdas"]
+          (eval '(let [[a b & c :as str] "asdjhhfdas"]
+                   [a b c str])))))
+
+  (testing "let map bindings"
+    (is (= [5 3 6 {:c 6, :a 5}]
+          (eval '(let [{a :a, b :b, c :c, :as m :or {a 2 b 3}} {:a 5 :c 6}]
+                   [a b c m])))))
+  
+  (testing "let nested map bindings"
+    (is (= [12 15 16 22 23 '(24 25) [22 23 24 25]]
+          (eval '(let [{j :j, k :k, i :i, [r s & t :as v] :ivec, :or {i 12 j 13}}
+                        {:j 15 :k 16 :ivec [22 23 24 25]}]
+                   [i j k r s t v]))))))
+
+
+(deftest let-error-checking
+ (testing "destructuring map to vector error"
+    (is (fails-with-cause? java.lang.Exception
+          #"let cannot destructure class clojure.lang.PersistentArrayMap. Try converting it to a seq."
+          (eval '(let [[x y] {}] x))))))
-- 
1.7.5.4

