<!--
RSS generated by JIRA (4.4#649-r158309) at Wed Apr 11 16:40:19 CDT 2012

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://dev.clojure.org/jira/sr/jira.issueviews:searchrequest-xml/10308/SearchRequest-10308.xml?tempMax=1000&field=key&field=summary
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="http://dev.clojure.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>Needs a Patch (all) (Clojure JIRA)</title>
        <link>http://dev.clojure.org/jira/secure/IssueNavigator.jspa?requestId=10308</link>
        <description>Patch is empty, or at least neither "Code" nor "Code and Test", and it isn't Resolved or Closed.  Either (a) it should be declined as not a bug, or not worth implementing, or (b) some contributor should attach a patch that fixes the problem, preferably with one or more tests that fail with the existing code.  In either case, mark it ready for screening by changing the Patch attribute to "Code" or "Code and Test".</description>
                <language>en-us</language>
                        <issue start="0" end="137" total="137"/>
                <build-info>
            <version>4.4</version>
            <build-number>649</build-number>
            <build-date>25-07-2011</build-date>
        </build-info>
<item>
            <title>[CLJ-971] Jar within a jar throws a runtime error</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-971</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I've created two jar files in my multi-project Maven setup.  The first jar is the "engine", and it includes the clojure jar in it.  The other jar is the "application".  It includes the engine and then packages itself into a one-jar jar file.  This means we have a jar within a jar: The "onejar" contains the engine jar, which in turn contains that clojure jar.&lt;/p&gt;

&lt;p&gt;I then get an error in the runtime:&lt;/p&gt;

&lt;p&gt;Exception in thread "main" java.lang.reflect.InvocationTargetException&lt;br/&gt;
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
    at java.lang.reflect.Method.invoke(Method.java:616)&lt;br/&gt;
    at com.simontuffs.onejar.Boot.run(Boot.java:340)&lt;br/&gt;
    at com.simontuffs.onejar.Boot.main(Boot.java:166)&lt;br/&gt;
Caused by: java.lang.ExceptionInInitializerError&lt;br/&gt;
    at com.ziroby.clojure.App.main(App.java:14)&lt;br/&gt;
    ... 6 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
    at clojure.lang.RT.lastModified(RT.java:374)&lt;br/&gt;
    at clojure.lang.RT.load(RT.java:408)&lt;br/&gt;
    at clojure.lang.RT.load(RT.java:398)&lt;br/&gt;
    at clojure.lang.RT.doInit(RT.java:434)&lt;br/&gt;
    at clojure.lang.RT.&amp;lt;clinit&amp;gt;(RT.java:316)&lt;br/&gt;
... 7 more&lt;/p&gt;

&lt;p&gt;See also my Stack Overflow question on this at &lt;a href="http://stackoverflow.com/questions/7763480/making-an-executable-jar-that-evals-clojure-strings"&gt;http://stackoverflow.com/questions/7763480/making-an-executable-jar-that-evals-clojure-strings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In researching it, I've found the problem lies in RT.lastModified, where it tries to determine last modified time by looking at the modified time on the jar file for Clojure.  But there's not actually a jar file, since it's embedded in another.&lt;/p&gt;

&lt;p&gt;I've found that adding a null check solves the problem.  My lastModified looks like this now:&lt;/p&gt;

&lt;p&gt;static public long lastModified(URL url, String libfile) throws Exception{&lt;br/&gt;
	if(url.getProtocol().equals("jar")) {
		ZipEntry entry = ((JarURLConnection) url.openConnection()).getJarFile().getEntry(libfile);
		if (entry != null)
			return entry.getTime();
	}&lt;/p&gt;

&lt;p&gt;	return url.openConnection().getLastModified();&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;This runs successfully.&lt;/p&gt;

&lt;p&gt;If you'd prefer, I can submit a patch, or commit directly.    &lt;/p&gt;
</description>
                <environment>Maven using the one-jar plugin</environment>
            <key id="15326">CLJ-971</key>
            <summary>Jar within a jar throws a runtime error</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ziroby">Ron Romero</reporter>
                        <labels>
                        <label>bug</label>
                    </labels>
                <created>Tue, 10 Apr 2012 20:39:36 -0700</created>
                <updated>Tue, 10 Apr 2012 20:39:36 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-969] Symbol/keyword implements IFn for lookup but a non-collection argument produces non-intuitive results</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-969</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;('+ 1 2) ;; return 2 because it is treated as (get 1 '+ 2)&lt;/p&gt;

&lt;p&gt;Whilst this is "consistent" once you know the lookup behavior, it's confusing for Clojure newbies and it seems to be a non-useful behavior.&lt;/p&gt;

&lt;p&gt;Proposal: modify Keyword.invoke() and Symbol.invoke() to restrict first Object argument to instanceof ILookup, Map or IPersistentSet (or null) so that the "not found" behavior doesn't produce non-intuitive behavior.&lt;/p&gt;</description>
                <environment/>
            <key id="15323">CLJ-969</key>
            <summary>Symbol/keyword implements IFn for lookup but a non-collection argument produces non-intuitive results</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="seancorfield">Sean Corfield</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Apr 2012 15:29:03 -0700</created>
                <updated>Mon, 9 Apr 2012 15:29:03 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-968] ns emitting gen-class before imports results in imported annotations being discarded.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-968</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The following discards the imported annotations:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(ns com.example.BaseXModuleTest
  (:&lt;span class="code-keyword"&gt;import&lt;/span&gt; (org.basex.query QueryModule QueryModule$Deterministic))
  (:gen-class
     :&lt;span class="code-keyword"&gt;extends&lt;/span&gt; org.basex.query.QueryModule
     :methods [
       [^{QueryModule$Deterministic {}}
        addOne [&lt;span class="code-object"&gt;int&lt;/span&gt;] &lt;span class="code-object"&gt;int&lt;/span&gt;]]))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when moving the &lt;tt&gt;gen-class&lt;/tt&gt; call out of the &lt;tt&gt;ns&lt;/tt&gt; declaration, the annotation is correctly applied:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(ns com.example.BaseXModuleTest
  (:&lt;span class="code-keyword"&gt;import&lt;/span&gt; (org.basex.query QueryModule QueryModule$Deterministic)))

(gen-class
  :&lt;span class="code-keyword"&gt;extends&lt;/span&gt; org.basex.query.QueryModule
  :name com.example.BaseXModuleTest
  :methods [
    [^{QueryModule$Deterministic {}}
     addOne [&lt;span class="code-object"&gt;int&lt;/span&gt;] &lt;span class="code-object"&gt;int&lt;/span&gt;]])&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears that imported names are not yet in-scope when gen-class is run from a &lt;tt&gt;ns&lt;/tt&gt; declaration.&lt;/p&gt;</description>
                <environment/>
            <key id="15321">CLJ-968</key>
            <summary>ns emitting gen-class before imports results in imported annotations being discarded.</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="charles-dyfis-net">Charles Duffy</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Apr 2012 13:38:07 -0700</created>
                <updated>Mon, 9 Apr 2012 13:38:07 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-961] with-redefs loses a Var's root binding if the Var is thread-bound</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-961</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When a Var has an in-thread binding and I use with-redefs to temporarily alter its root binding, the value restored to the root binding after with-redefs is finished will not be the original root value, but the thread-local one. The problem is using deref instead of something like clojure.lang.Var's .getRawRoot to backup the original root values in with-derefs-fn.&lt;/p&gt;

&lt;p&gt;I have never used with-redefs and it is very unlikely that one would use it while the Vars in question are thread-bound. However, when reading the function's definition in Joy of Clojure and later in core.clj, I did not believe this behaviour was intended.&lt;/p&gt;</description>
                <environment/>
            <key id="15303">CLJ-961</key>
            <summary>with-redefs loses a Var's root binding if the Var is thread-bound</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jirkamarsik">Jiří Maršík</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Mar 2012 09:05:29 -0700</created>
                <updated>Wed, 28 Mar 2012 09:05:29 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                    <attachment id="11020" name="with_redefs_bug.clj" size="100" author="jirkamarsik" created="Wed, 28 Mar 2012 09:05:29 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-959] after call to clojure.java.shell/sh, jvm won't exit</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-959</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Create the following four-line file, shell_example.clj:&lt;/p&gt;

&lt;p&gt;;; simple example of call to sh that causes jvm to hang after print&lt;br/&gt;
(require '&lt;span class="error"&gt;&amp;#91;clojure.java.shell :as shell&amp;#93;&lt;/span&gt;)&lt;br/&gt;
(shell/sh "ls")&lt;br/&gt;
(println "jvm should exit after this, but it doesn't")&lt;/p&gt;

&lt;p&gt;Run:&lt;br/&gt;
java -jar clojure-1.3.0.jar shell_example.clj&lt;/p&gt;

&lt;p&gt;After the message is printed, the jvm doesn't quit. It just sits there. I have to hit Ctrl-C to force the jvm to quit.&lt;/p&gt;

&lt;p&gt;This happens on 1.3 and the most recent code in github as of 3/26/2012. I imagine the jvm is waiting for a thread that hasn't terminated, but the code in the sh function doesn't look like it's doing anything obviously wrong. I'm too much of a newcomer to Clojure to dig any deeper.&lt;/p&gt;

&lt;p&gt;My workaround right now is to do (System/exit 0) to force the jvm to quit.&lt;/p&gt;

&lt;p&gt;Thank you for your work on Clojure, it's simply an amazing language.&lt;/p&gt;</description>
                <environment>Reproduced on Ubuntu using Sun Java 1.6, OpenJDK 1.6, and Sun Java 1.7
&lt;br/&gt;
</environment>
            <key id="15295">CLJ-959</key>
            <summary>after call to clojure.java.shell/sh, jvm won't exit</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="codeforkjeff">Jeff Chiu</reporter>
                        <labels>
                        <label>shell</label>
                    </labels>
                <created>Mon, 26 Mar 2012 19:55:26 -0700</created>
                <updated>Mon, 26 Mar 2012 22:19:03 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28023" author="jafingerhut" created="Mon, 26 Mar 2012 22:19:03 -0700">&lt;p&gt;Jeff, this occurs in any Clojure program where certain threading mechanisms are invoked.  In your case, clojure.java.shell/sh uses future, which causes threads to be created that then sit around for about 60 seconds after everything else quits, and the main Java process does not exit until that happens.  Another way to get the program to exit quickly is to call (shutdown-agents), but that isn't any more convenient than (System/exit 0), nor is there any obvious way you can tell as a newcomer that you should be doing this.&lt;/p&gt;

&lt;p&gt;The ticket &lt;a href="http://dev.clojure.org/jira/browse/CLJ-124" title="GC  Issue 120: Determine mechanism for controlling automatic shutdown of Agents, with a default policy and mechanism for changing that policy as needed"&gt;CLJ-124&lt;/a&gt; is marked with status "Approved" at this time, which leads me to believe that perhaps soon there will be a change made to Clojure such that this situation will change.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-956] [java.lang.ClassFormatError: Duplicate method name&amp;signature] when using gen-class</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-956</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;When extending a class that defines a method with the signature "public void load();", I get the following load time error:&lt;/p&gt;

&lt;p&gt;java.lang.ClassFormatError: Duplicate method name&amp;amp;signature&lt;/p&gt;

&lt;p&gt;Looking into javap, I see that in fact gen-class is generating two entries for the load method. Prefix does not help in this case, as the defined load method is generated anyway.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Daniel&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>$ java -version
&lt;br/&gt;
java version &amp;quot;1.6.0_29&amp;quot;
&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)
&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)
&lt;br/&gt;

&lt;br/&gt;
</environment>
            <key id="15286">CLJ-956</key>
            <summary>[java.lang.ClassFormatError: Duplicate method name&amp;signature] when using gen-class</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="danielribeiro">Daniel Ribeiro</reporter>
                        <labels>
                        <label>AOT</label>
                    </labels>
                <created>Tue, 20 Mar 2012 02:06:40 -0700</created>
                <updated>Sat, 24 Mar 2012 17:34:50 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27976" author="danielribeiro" created="Thu, 22 Mar 2012 03:10:59 -0700">&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I've create this small sample project to exemplify the bug ocurring: &lt;a href="https://github.com/danielribeiro/ClojureBugReport"&gt;https://github.com/danielribeiro/ClojureBugReport&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Daniel&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="28005" author="danielribeiro" created="Sat, 24 Mar 2012 16:57:59 -0700">&lt;p&gt;Note that the name load is not special: it works with any abstract method, no matter the name.&lt;/p&gt;</comment>
                    <comment id="28006" author="danielribeiro" created="Sat, 24 Mar 2012 17:34:50 -0700">&lt;p&gt;Not a bug: I was declaring the method load, which was already defined on the abstract class. The docs do mention this:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://clojuredocs.org/clojure_core/clojure.core/gen-class"&gt;http://clojuredocs.org/clojure_core/clojure.core/gen-class&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-955] java object reader constructor doesn't work</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-955</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Here is a transcript:&lt;/p&gt;

&lt;p&gt;;user=&amp;gt; &lt;b&gt;clojure-version&lt;/b&gt;&lt;br/&gt;
{:major 1, :minor 4, :incremental 0, :qualifier "beta5"}&lt;br/&gt;
;user=&amp;gt; (.getProtocol #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
java.lang.RuntimeException: Can't embed object in code, maybe print-dup not defined: &lt;a href="file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"&gt;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&lt;/a&gt;, compiling:(null:2)&lt;br/&gt;
;user=&amp;gt; (.getProtocol (java.net.URL. "file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"))&lt;br/&gt;
"file"&lt;/p&gt;

&lt;p&gt;Another transcript from google groups &lt;a href="https://groups.google.com/forum/?fromgroups&amp;amp;hl=en#!topic/clojure/vlsFgVaKcSQ"&gt;https://groups.google.com/forum/?fromgroups&amp;amp;hl=en#!topic/clojure/vlsFgVaKcSQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (def x #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
#'user/x&lt;br/&gt;
user=&amp;gt; x&lt;br/&gt;
#&amp;lt;URL &lt;a href="file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"&gt;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&lt;/a&gt;&amp;gt;&lt;br/&gt;
user=&amp;gt; (.getProtocol x)&lt;br/&gt;
"file"&lt;/p&gt;


&lt;p&gt;user=&amp;gt; (.getProtocol #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
CompilerException java.lang.RuntimeException: Can't embed object in code, maybe print-dup not defined: &lt;a href="file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"&gt;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&lt;/a&gt;, compiling:(NO_SOURCE_PATH:5) &lt;br/&gt;
user=&amp;gt; (defmethod print-dup java.net.URL &lt;span class="error"&gt;&amp;#91;o, ^java.io.Writer w&amp;#93;&lt;/span&gt; (.write w (str o)))&lt;br/&gt;
#&amp;lt;MultiFn clojure.lang.MultiFn@2e694f12&amp;gt;&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (.getProtocol #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
ClassCastException clojure.lang.Symbol cannot be cast to java.net.URL  user/eval11 (NO_SOURCE_FILE:7)&lt;br/&gt;
user=&amp;gt;&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (def x #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;)&lt;br/&gt;
#'user/x&lt;br/&gt;
user=&amp;gt; (printf "(class x)=%s x='%s'\n" (class x) x)&lt;br/&gt;
(class x)=class java.net.URL x='file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs'&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (let [x #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;]&lt;br/&gt;
(printf "(class x)=%s x='%s'\n" (class x) x))&lt;br/&gt;
CompilerException java.lang.RuntimeException: Can't embed object in code, maybe print-dup not defined: &lt;a href="file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"&gt;file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&lt;/a&gt;, compiling:(NO_SOURCE_PATH:4) &lt;/p&gt;

&lt;p&gt;user=&amp;gt; (defmethod print-dup java.net.URL &lt;span class="error"&gt;&amp;#91;o, ^java.io.Writer w&amp;#93;&lt;/span&gt; (.write w (str o)))&lt;br/&gt;
#&amp;lt;MultiFn clojure.lang.MultiFn@3362a63&amp;gt;&lt;br/&gt;
user=&amp;gt; (let [x #java.net.URL&lt;span class="error"&gt;&amp;#91;&amp;quot;file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;quot;&amp;#93;&lt;/span&gt;]&lt;br/&gt;
(printf "(class x)=%s x='%s'\n" (class x) x))&lt;br/&gt;
(class x)=class clojure.lang.Symbol x='file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs'&lt;br/&gt;
nil&lt;/p&gt;</description>
                <environment/>
            <key id="15285">CLJ-955</key>
            <summary>java object reader constructor doesn't work</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bmillare">Brent Millare</reporter>
                        <labels>
                    </labels>
                <created>Sun, 18 Mar 2012 17:37:26 -0700</created>
                <updated>Mon, 19 Mar 2012 08:26:00 -0700</updated>
                                    <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27963" author="jafingerhut" created="Mon, 19 Mar 2012 00:58:18 -0700">&lt;p&gt;I've confirmed this behavior with 1.4.0 beta5.  I've only tracked it down as far as finding the "Can't embed object in code" message, which is easy to find in Compiler.java in method emitValue.  That exception is thrown because printString in RT.java throws an exception.&lt;/p&gt;

&lt;p&gt;It isn't clear to me what should be done instead, though.&lt;/p&gt;</comment>
                    <comment id="27964" author="fogus" created="Mon, 19 Mar 2012 07:03:08 -0700">&lt;p&gt;What would it mean to construct an arbitrary Java object for the purpose of embedding it in code in a generic way? You could say that it's just a matter of calling its constructor with the right args but very often in Java that is &lt;b&gt;not&lt;/b&gt; enough to make an object considered "initialize".  Sometimes there are init methods or putters or whatever that are required for object construction.  So right there I hope it's clear that even though #some.Klass&lt;span class="error"&gt;&amp;#91;&amp;quot;foo&amp;quot;&amp;#93;&lt;/span&gt; provides a way to call an arbitrary constructor, it's in no way a guarantee that an instance is properly constructed.  The reason that (for example) defrecords are embeddable anywhere is because we know for certain that the constructor creates a fully initialized instance. If you need to embed specific instances in your own code then you have two options:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Implement a print-dup for the class that guarantees a fully initialized object is built.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Use Clojure 1.4's tagged literal feature to do the same.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Quick point of note:&lt;/p&gt;

&lt;p&gt;Your code &lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defmethod print-dup java.net.URL [o, ^java.io.Writer w] (.write w (str o)))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Doesn't do what you think it does.  It spits out exactly &lt;tt&gt;&lt;a href="file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"&gt;file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&lt;/a&gt;&lt;/tt&gt; that Clojure reads in as a symbol.  Something like the following might be more appropriate:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defmethod print-dup java.net.URL [o, ^java.io.Writer w] (.write w "#java.net.URL") (.write w (str [ (str o) ])))

(let [x #java.net.URL["file:///home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs"]]                             
  (printf "(class x)=%s x='%s'\n" (class x) x) x)                                                                          

; (class x)=class java.net.URL x='file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs'

;=&amp;gt; #&amp;lt;URL file:/home/hara/dj/usr/src/clojurescript/src/cljs/cljs/core.cljs&amp;gt;

(.getProtocol *1)                        
;=&amp;gt; "file"
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="27965" author="bmillare" created="Mon, 19 Mar 2012 08:09:10 -0700">&lt;p&gt;Fogus, can you please elaborate on using clojure 1.4's tagged literal features. While I understand that you can define data-reader functions, for example&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(binding [*data-readers* {'user/f (fn [x] (java.io.File. (first x)))}] (read-string "#user/f [\"hello\"]")) ;=&amp;gt; #&amp;lt;File hello&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;however, I feel this is only half a fix, compared with the first mentioned solution (involving print-dup), since clojure's tagged literals only are important for reading, not for printing. Does using tagged literals, so that (read-string (pr-str (read-string ...) works, imply that you must also define print methods per class? If this is true, it seems problematic since if different code wants to define different print methods, this will conflict since defining print-dup methods is global. Is there a good solution for printing objects depending on the context? As an alternative solution, I propose making the default print-method of all objects that didn't already have a printed representation to be a tagged literal, this way, users can customize what it means to read it. (See &lt;a href="https://groups.google.com/forum/?fromgroups&amp;amp;hl=en#!topic/clojure/GdT5cO6JoSQ"&gt;https://groups.google.com/forum/?fromgroups&amp;amp;hl=en#!topic/clojure/GdT5cO6JoSQ&lt;/a&gt; )&lt;/p&gt;</comment>
                    <comment id="27966" author="fogus" created="Mon, 19 Mar 2012 08:18:29 -0700">&lt;p&gt;"Fogus, can you please elaborate on using clojure 1.4's tagged literal features."&lt;/p&gt;

&lt;p&gt;I can, but it falls outside of the scope of this particular ticket.  It might be better to take the broader conversation to the design page at &lt;a href="http://dev.clojure.org/display/design/Tagged+Literals"&gt;http://dev.clojure.org/display/design/Tagged+Literals&lt;/a&gt; and the clojure-dev list.&lt;/p&gt;

&lt;p&gt;Has the original motivation for this ticket been addressed?&lt;/p&gt;</comment>
                    <comment id="27967" author="bmillare" created="Mon, 19 Mar 2012 08:26:00 -0700">&lt;p&gt;I think you've explained the underlying problem, so yes. One possible caveat might be that it may be a concern that the current error message is not telling that the underlying problem lies in an improperly initialized object. (or maybe it is, and that's the error message I should expect).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-954] TAP Support in clojure.test.tap Needs Updating</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-954</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The &lt;tt&gt;testing-vars-str&lt;/tt&gt; function requires one argument, but in the &lt;tt&gt;clojure.test.tap&lt;/tt&gt; namespace it is currently called with zero arguments. This results in a &lt;tt&gt;clojure.lang.ArityException&lt;/tt&gt; when attempting to generate TAP output with &lt;tt&gt;with-tap-out&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Here are links to the occurrences of this in the latest commit to &lt;tt&gt;clojure.test.tap&lt;/tt&gt;:&lt;/p&gt;

&lt;p&gt; 1. &lt;a href="https://github.com/clojure/clojure/blob/36642c984cbf52456e45a8af0a96e4b7e7417041/src/clj/clojure/test/tap.clj#L81"&gt;https://github.com/clojure/clojure/blob/36642c984cbf52456e45a8af0a96e4b7e7417041/src/clj/clojure/test/tap.clj#L81&lt;/a&gt;&lt;br/&gt;
 2. &lt;a href="https://github.com/clojure/clojure/blob/36642c984cbf52456e45a8af0a96e4b7e7417041/src/clj/clojure/test/tap.clj#L92"&gt;https://github.com/clojure/clojure/blob/36642c984cbf52456e45a8af0a96e4b7e7417041/src/clj/clojure/test/tap.clj#L92&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After fixing this particular issue in my local copy of 1.4.0-SNAPSHOT, there appear to be other problems with this code as well (e.g., not producing correct output for failing tests). Since this code appears to be unmaintained and untested, perhaps it should live outside the main Clojure repo?&lt;/p&gt;</description>
                <environment/>
            <key id="15283">CLJ-954</key>
            <summary>TAP Support in clojure.test.tap Needs Updating</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="semperos">Daniel Gregoire</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Mar 2012 20:39:54 -0700</created>
                <updated>Thu, 15 Mar 2012 20:39:54 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-951] Clojure 1.3+ can't intern a dynamic var</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-951</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;In Clojure 1.3+, interned vars don't set the dynamic field in clojure.lang.Var and can't be used in a binding:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (intern &lt;b&gt;ns&lt;/b&gt; (with-meta 'dyna-var {:dynamic true}) 100)&lt;br/&gt;
user=&amp;gt; (binding &lt;span class="error"&gt;&amp;#91;dyna-var &amp;quot;one hundred&amp;quot;&amp;#93;&lt;/span&gt; dyna-var) &lt;br/&gt;
;=&amp;gt; IllegalStateException Can't dynamically bind non-dynamic var: user/dyna-var  clojure.lang.Var.pushThreadBindings (Var.java:339)&lt;/p&gt;

&lt;p&gt;The var has the right metadata&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (meta #'dyna-var)                                      &lt;br/&gt;
;=&amp;gt; {:ns #&amp;lt;Namespace user&amp;gt;, :name dyna-var, :dynamic true}&lt;/p&gt;

&lt;p&gt;But doesn't set the dynamic flag on the var:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (.isDynamic #'dyna-var)                                &lt;br/&gt;
;=&amp;gt; false&lt;/p&gt;

&lt;p&gt;The push-thread-bindings function looks for the .dynamic flag.  Vars created via def have it:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (def ^:dynamic def-dyna-var 100)&lt;br/&gt;
user=&amp;gt; (.isDynamic #'def-dyna-var)&lt;br/&gt;
;=&amp;gt; true&lt;/p&gt;

&lt;p&gt;Along with the metadata&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (meta #'def-dyna-var)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name def-dyna-var, :dynamic true, :line 6, :file "NO_SOURCE_PATH"}&lt;/p&gt;


</description>
                <environment/>
            <key id="15271">CLJ-951</key>
            <summary>Clojure 1.3+ can't intern a dynamic var</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ryansenior">Ryan Senior</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Mar 2012 14:19:53 -0800</created>
                <updated>Fri, 9 Mar 2012 14:19:53 -0800</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-946] eval reader fail to recognize  function object </title>
                <link>http://dev.clojure.org/jira/browse/CLJ-946</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;(defmacro stubbing &lt;span class="error"&gt;&amp;#91;stub-forms &amp;amp; body&amp;#93;&lt;/span&gt;&lt;br/&gt;
  (let [stub-pairs (partition 2 stub-forms)&lt;br/&gt;
        returns (map last stub-pairs)&lt;br/&gt;
        stub-fns (map constantly returns)  ;;(map #(list 'constantly %) returns)&lt;br/&gt;
        real-fns (map first stub-pairs)]&lt;br/&gt;
    `(binding &lt;span class="error"&gt;&amp;#91;~@(interleave real-fns stub-fns)&amp;#93;&lt;/span&gt;&lt;br/&gt;
       ~@body)))&lt;/p&gt;

&lt;p&gt;This macro is from  Clojure In Action , whith the commented line rewrited (I know that original is better)&lt;br/&gt;
I assumed that this macro would work as supposed , if the stub forms use compile time literal, for e.g&lt;/p&gt;

&lt;p&gt;(def ^:dynamic $ (fn &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt; (* x 10))&lt;/p&gt;


&lt;p&gt;(stubbing &lt;span class="error"&gt;&amp;#91;$ 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
        ($ 1 1))&lt;br/&gt;
;; =&amp;gt;&lt;br/&gt;
IllegalArgumentException No matching ctor found for class clojure.core$constantly$fn__3656&lt;br/&gt;
	clojure.lang.Reflector.invokeConstructor (Reflector.java:166)&lt;br/&gt;
	clojure.lang.LispReader$EvalReader.invoke (LispReader.java:1031)&lt;br/&gt;
	clojure.lang.LispReader$DispatchReader.invoke (LispReader.java:618)&lt;/p&gt;

&lt;p&gt;;;macro can expanded  &lt;br/&gt;
(macroexpand-all '(stubbing &lt;span class="error"&gt;&amp;#91;$ 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
                ($ 1 1)))&lt;br/&gt;
;; =&amp;gt;&lt;br/&gt;
(let* [] (clojure.core/push-thread-bindings (clojure.core/hash-map (var $) #&amp;lt;core$constantly$fn_&lt;em&gt;3656 clojure.core$constantly$fn&lt;/em&gt;_3656@161f888&amp;gt;)) (try ($ 1 1) (finally (clojure.core/pop-thread-bindings))))&lt;/p&gt;

&lt;p&gt;I thought there is something wrong with eval reader, but i can't figure it out&lt;/p&gt;

&lt;p&gt;btw the above code can run on clojure-clr&lt;/p&gt;
</description>
                <environment/>
            <key id="15263">CLJ-946</key>
            <summary>eval reader fail to recognize  function object </summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="xiaonaitong">Naitong Xiao</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Mar 2012 00:54:06 -0800</created>
                <updated>Tue, 6 Mar 2012 23:24:47 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27905" author="michaelklishin" created="Tue, 6 Mar 2012 21:24:35 -0800">&lt;p&gt;As far as I know, Clojure in Action examples are written for Clojure 1.2. What version are you using?&lt;/p&gt;</comment>
                    <comment id="27907" author="xiaonaitong" created="Tue, 6 Mar 2012 23:24:47 -0800">&lt;p&gt;I use clojure 1.3&lt;/p&gt;

&lt;p&gt;The example in Clojure In Action is Ok on clojure 1.3&lt;br/&gt;
I just found this peculiar thing when trying to answer a question from another one in a mail list.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-944] (.containsKey {:one 1} :one) throws Exception</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-944</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Hi guys, I am getting the following exception:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(.containsKey {:one 1} :one)
;=&amp;gt; ClassCastException clojure.lang.PersistentArrayMap cannot be &lt;span class="code-keyword"&gt;cast&lt;/span&gt; to clojure.lang.PersistentHashMap&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The map is a clojure.lang.PersistentArrayMap, which obviously has a containsKey method (&lt;a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentArrayMap.java#L95"&gt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentArrayMap.java#L95&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Casting it works fine though:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(.containsKey ^clojure.lang.PersistentArrayMap {:one 1} :one)
;=&amp;gt; &lt;span class="code-keyword"&gt;true&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The mailing list suggest that the compiler injects an incorrect cast to clojure.lang.PersistentHashMap. In this case it should probably be cast to a clojure.lang.Associative, the highest common interface having the .containsKey method.&lt;/p&gt;

&lt;p&gt;The problem is not present in Clojure 1.2.1.&lt;/p&gt;</description>
                <environment>Clojure 1.3 om Mac OS 10.7</environment>
            <key id="15259">CLJ-944</key>
            <summary>(.containsKey {:one 1} :one) throws Exception</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stoyle">Alf Kristian Støyle</reporter>
                        <labels>
                    </labels>
                <created>Sun, 4 Mar 2012 00:45:09 -0800</created>
                <updated>Sun, 4 Mar 2012 00:45:09 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-941] NullPointerException possible with seq-zip</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-941</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;Clojure 1.3.0&lt;br/&gt;
user=&amp;gt; (require '&lt;span class="error"&gt;&amp;#91;clojure.zip :as z&amp;#93;&lt;/span&gt;)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (-&amp;gt; (z/seq-zip (list 1)) z/down z/remove)&lt;br/&gt;
NullPointerException   clojure.core/with-meta (core.clj:211)&lt;/p&gt;

&lt;p&gt;Possibly the make-node function for seq-zip should be:&lt;/p&gt;

&lt;p&gt;(fn &lt;span class="error"&gt;&amp;#91;node children&amp;#93;&lt;/span&gt; (with-meta (or children ()) (meta node)))&lt;/p&gt;</description>
                <environment/>
            <key id="15249">CLJ-941</key>
            <summary>NullPointerException possible with seq-zip</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="glchapman">Greg Chapman</reporter>
                        <labels>
                    </labels>
                <created>Sun, 26 Feb 2012 15:19:20 -0800</created>
                <updated>Sun, 26 Feb 2012 15:54:13 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27878" author="glchapman" created="Sun, 26 Feb 2012 15:54:13 -0800">&lt;p&gt;Also the docstring for zipper should probably be updated to indicate that the children parameter can be nil.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-938] Output of clojure.reflect is not suitable for type hints</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-938</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I'm trying to write a macro which generate reify forms using some reflection.&lt;/p&gt;

&lt;p&gt;clojure.reflect produces type symbols similar to 'java.util.Iterator&amp;lt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the compiler doesn't accept the &amp;lt;&amp;gt; syntax in type hints:&lt;/p&gt;

&lt;p&gt;(reify Iterable (^{:tag java.util.Iterator} iterator &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; nil)) ; works&lt;/p&gt;

&lt;p&gt;(reify Iterable (^{:tag java.util.Iterator&amp;lt;&amp;gt;} iterator &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; nil)) ;; fails&lt;br/&gt;
CompilerException java.lang.RuntimeException: java.lang.ClassNotFoundException: java.util.Iterator&amp;lt;&amp;gt;, compiling:(NO_SOURCE_PATH:1325)&lt;/p&gt;

&lt;p&gt;It seems like the compiler should understand the &amp;lt;&amp;gt; just enough to strip it, rather than reject it. This would make it much easier to write correct macros involving type hinting and reflection.&lt;/p&gt;

&lt;p&gt;The workaround I have been using is:&lt;/p&gt;

&lt;p&gt;(defn hint&lt;br/&gt;
  "clojure.reflect demarks generics with angle brackets, but&lt;br/&gt;
   the compiler does not support generics in type hints"&lt;br/&gt;
  &lt;span class="error"&gt;&amp;#91;obj tag&amp;#93;&lt;/span&gt;&lt;br/&gt;
  (let &lt;span class="error"&gt;&amp;#91;tag (-&amp;gt; tag .toString (.replace &amp;quot;&amp;lt;&amp;gt;&amp;quot; &amp;quot;&amp;quot;) symbol)&amp;#93;&lt;/span&gt;&lt;br/&gt;
    (with-meta obj {:tag tag}))&lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/wink.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="15244">CLJ-938</key>
            <summary>Output of clojure.reflect is not suitable for type hints</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bbloom">Brandon Bloom</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Feb 2012 21:31:12 -0800</created>
                <updated>Thu, 23 Feb 2012 23:37:33 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27832" author="bbloom" created="Thu, 23 Feb 2012 23:37:33 -0800">&lt;p&gt;I'm sorry, I got this wrong earlier. The problem is real, but it's &lt;em&gt;arrays&lt;/em&gt;, not &lt;em&gt;generics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My workaround is useless... :-/&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-936] Improve docs about argument destructuring at clojure.org</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-936</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;What:&lt;br/&gt;
Make the description of argument destructuring more visible at &lt;a href="http://clojure.org/special_forms"&gt;http://clojure.org/special_forms&lt;/a&gt;, namely:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;add a heading such as "&amp;lt;h4&amp;gt;Binding Forms (Argument Destructuring)&amp;lt;/h4&amp;gt;" to the section describing it&lt;/li&gt;
	&lt;li&gt;make all occurences of "binding-form" a link to that heading, especially under the let and fn headings&lt;/li&gt;
	&lt;li&gt;for (fn ..) add a new second paragraph like "Regarding binding forms, also known as argument destructuring, &amp;lt;a href=#thea-new-heading&amp;gt;read more in the binding forms section&amp;lt;/a&amp;gt; under the let special form."&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Why:&lt;br/&gt;
It was always surprisingly difficult for me to google out the explanation of destructuring in Clojure and only today have I discovered that it is described pretty well under the let special form. Thus it should be made more visible to the readers (and preferably also search engines). (Even though Google has returned the page as one of the first matches, I had problems seeing it there - partly due to usually mistyping destructuring e.g. as deconstruction).&lt;/p&gt;

&lt;p&gt;Thanks a lot!&lt;/p&gt;

&lt;p&gt;PS: I haven't found a better way to report this, such as a commenting capability on the page itself.&lt;/p&gt;</description>
                <environment/>
            <key id="15238">CLJ-936</key>
            <summary>Improve docs about argument destructuring at clojure.org</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jakubholynet">Jakub Holy</reporter>
                        <labels>
                        <label>documentation</label>
                        <label>web</label>
                    </labels>
                <created>Tue, 21 Feb 2012 13:13:26 -0800</created>
                <updated>Mon, 12 Mar 2012 16:03:25 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27936" author="jafingerhut" created="Mon, 12 Mar 2012 16:03:25 -0700">&lt;p&gt;Jakub, I don't think I have authorization to edit those web pages in the way you suggest.  I did want to comment that the most recent version of the Clojure cheatsheet at &lt;a href="http://clojure.org/cheatsheet"&gt;http://clojure.org/cheatsheet&lt;/a&gt; now has a link called "examples" in the "Special Forms" section that links to the 'let' section of the special forms documentation page.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-929] Accessing Java property starting with _ has issues in 1.4</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-929</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When attempting to use interop syntax with symbols which aren't legal Java names (such as deleted?), the names are mangled a bit. That's necessary, of course, and the method of munging can be internal to the compiler. However, the behavior when munging changed a little between 1.3 and 1.4 beta1. Obviously the specifics of munging are something I should avoid relying on, but the way it changed looks like an accident or a bug even so.&lt;/p&gt;

&lt;p&gt;The use-case I ran into is that defrecords contain a field named __meta for tracking their metadata. In both 1.3 and 1.4 you can get at that field with (. record __meta), which avoids munging. But on 1.3 (. record --meta) also accesses it (translating each - to a _), while on 1.4 (. record -meta) works and (. record --meta) doesn't.&lt;/p&gt;

&lt;p&gt;Actually, looking at line 883 of Compiler.java, it looks like this may be related to the (. foo -property) syntax ported from CLJS, and indeed (. record ---meta) works, I guess by reducing to an "old style" (. record --meta). So that clears up why --meta fails: it's looking for __meta. I'm still not clear on why (. record -meta) works, though.&lt;/p&gt;

&lt;p&gt;So it looks like the - prefix for properties is not 100% backwards-compatible like it seemed to be. Is this an issue we need to fix, or is the recommendation simply to never have fields that start with - or _?&lt;/p&gt;</description>
                <environment/>
            <key id="15208">CLJ-929</key>
            <summary>Accessing Java property starting with _ has issues in 1.4</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="amalloy">Alan Malloy</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Feb 2012 15:50:05 -0800</created>
                <updated>Thu, 9 Feb 2012 13:01:53 -0800</updated>
                                    <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27701" author="fogus" created="Thu, 9 Feb 2012 12:33:39 -0800">&lt;p&gt;Is this a general problem with fields starting with _ or just fields named __meta as in (defrecord &lt;span class="error"&gt;&amp;#91;__meta&amp;#93;&lt;/span&gt; ...)&lt;/p&gt;
</comment>
                    <comment id="27702" author="amalloy" created="Thu, 9 Feb 2012 13:01:53 -0800">&lt;p&gt;It's a general issue. (defrecord &lt;span class="error"&gt;&amp;#91;__meta&amp;#93;&lt;/span&gt;) actually breaks immediately, because the record mechanism itself generates a field named __meta, but any field named with a - or _ prefix has this issue.&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (defrecord Foo &lt;span class="error"&gt;&amp;#91;-blah&amp;#93;&lt;/span&gt;)&lt;br/&gt;
user.Foo&lt;br/&gt;
user=&amp;gt; (.-blah (Foo. 1))&lt;br/&gt;
IllegalArgumentException No matching field found: blah for class user.Foo  clojure.lang.Reflector.getInstanceField (Reflector.java:289)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-927] Consider using the identity function as default tagged literal reader</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-927</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;With data reader support, it's impossible to write a program to read an arbitrary stream of Clojure forms.  For example, the following code will fail with the current 1.4.0-beta1 tagged literal support:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;#point [0 2]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might be enough to require that the read side define a reader for &lt;tt&gt;point&lt;/tt&gt;, but what if we do not wish to require that both sides of the conversation know about the &lt;tt&gt;#point&lt;/tt&gt; tag beforehand?  Using the &lt;tt&gt;identity&lt;/tt&gt; function as a default allows the reader to handle the literal form as is even when it doesn't recognize a tag (or even care to translate it).&lt;/p&gt;

&lt;p&gt;The change from the current behavior is that missing tagged literal parsers are no longer error conditions.&lt;/p&gt;

</description>
                <environment/>
            <key id="15206">CLJ-927</key>
            <summary>Consider using the identity function as default tagged literal reader</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="fogus">Fogus</reporter>
                        <labels>
                        <label>clojure</label>
                        <label>reader</label>
                    </labels>
                <created>Mon, 6 Feb 2012 13:45:06 -0800</created>
                <updated>Sun, 12 Feb 2012 08:31:25 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27708" author="steveminer@gmail.com" created="Sun, 12 Feb 2012 08:30:52 -0800">&lt;p&gt;I'd like to preserve the unknown literal tag as well as the value.  That would allow a program to recreate the printed representation.  A map would work as the value. You'd get something like: {:unknown-literal 'point value: &lt;span class="error"&gt;&amp;#91;0 2&amp;#93;&lt;/span&gt;}.  If you needed to pass that on to some other process, you could easily write it in the original literal form.  Perhaps the key for literal tag should be namespace qualified to avoid possible confusion with user data.  Another benefit of returning a map for an unknown literal tag is that equality tests still seem reasonable:  (not= #foo "abc" #bar "abc").&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-919] cannot create anonymous primitive functions</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-919</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Primitive functions only work (e.g. return primitive types) when defined with `defn`.  An equivalent function created with `fn` does not behave the same way as when created with `defn`.  For example:&lt;/p&gt;

&lt;p&gt;(definterface IPrimitiveTester&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;^int x&amp;#93;&lt;/span&gt;)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;^long x&amp;#93;&lt;/span&gt;)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;^float x&amp;#93;&lt;/span&gt;)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;^double x&amp;#93;&lt;/span&gt;)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;^Object x&amp;#93;&lt;/span&gt;))&lt;/p&gt;

&lt;p&gt;(deftype PrimitiveTester []&lt;br/&gt;
   IPrimitiveTester&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;this ^int x&amp;#93;&lt;/span&gt; :int)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;this ^long x&amp;#93;&lt;/span&gt; :long)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;this ^float x&amp;#93;&lt;/span&gt; :float)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;this ^double x&amp;#93;&lt;/span&gt; :double)&lt;br/&gt;
   (getType &lt;span class="error"&gt;&amp;#91;this ^Object x&amp;#93;&lt;/span&gt; :object))&lt;/p&gt;

&lt;p&gt;(defmacro pt &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt;&lt;br/&gt;
   `(.getType (PrimitiveTester.) ~x))&lt;/p&gt;

&lt;p&gt;(defn with-defn ^double &lt;span class="error"&gt;&amp;#91;^double x&amp;#93;&lt;/span&gt;&lt;br/&gt;
   (+ x 0.5))&lt;/p&gt;

&lt;p&gt;(pt (with-defn 1.0)) ; =&amp;gt; :double&lt;/p&gt;

&lt;p&gt;(let [a (fn ^double &lt;span class="error"&gt;&amp;#91;^double x&amp;#93;&lt;/span&gt; (+ x 0.5))] &lt;br/&gt;
  (pt (a 0.1))) ; =&amp;gt; :object &lt;/p&gt;


&lt;p&gt;Please see the discussion on the mailing list for more details and thoughts on what is happening:&lt;br/&gt;
&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/d83c8643a7c7d595?hl=en"&gt;http://groups.google.com/group/clojure/browse_thread/thread/d83c8643a7c7d595?hl=en&lt;/a&gt;&lt;/p&gt;
</description>
                <environment/>
            <key id="15149">CLJ-919</key>
            <summary>cannot create anonymous primitive functions</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bmabey">Ben Mabey</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 Jan 2012 14:48:42 -0800</created>
                <updated>Fri, 27 Jan 2012 14:48:42 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-918] Vars with {:macro true} meta data do not work when loaded from AOT compiled file</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-918</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When defining a var with &lt;tt&gt;^{:macro true&lt;/tt&gt;} the call of the binded macro does emit a warning when the definition has been AOT compiled.&lt;/p&gt;

&lt;p&gt;See example outputs with demo code here: &lt;a href="https://refheap.com/paste/389"&gt;https://refheap.com/paste/389&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bronsa on #clojure created a patch: &lt;a href="http://sprunge.us/bWcc"&gt;http://sprunge.us/bWcc&lt;/a&gt;&lt;/p&gt;</description>
                <environment>Tested with 1.3.0 and 1.4.0</environment>
            <key id="15145">CLJ-918</key>
            <summary>Vars with {:macro true} meta data do not work when loaded from AOT compiled file</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jannschu">Jannik Schorg</reporter>
                        <labels>
                        <label>Compiler</label>
                        <label>enhancement</label>
                        <label>metadata</label>
                    </labels>
                <created>Mon, 23 Jan 2012 14:06:06 -0800</created>
                <updated>Mon, 23 Jan 2012 14:06:06 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10010">New</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-911] 'proxy' prevents overriding Object.finalize (and doesn't document it)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-911</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;It appears to be impossible to override Object.finalize() using proxy.  If the method is defined using proxy, then it cannot be called straightforwardly (see below), and it is not called as a finalizer during normal program execution (not demonstrated below).&lt;/p&gt;

&lt;p&gt;See extensive discussion at: &lt;a href="https://groups.google.com/group/clojure/browse_thread/thread/a1e2fca45af6c1af"&gt;https://groups.google.com/group/clojure/browse_thread/thread/a1e2fca45af6c1af&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;user=&amp;gt; (def m (proxy &lt;span class="error"&gt;&amp;#91;java.util.HashMap&amp;#93;&lt;/span&gt; []&lt;br/&gt;
        (finalize []&lt;br/&gt;
          ;(proxy-super finalize)&lt;br/&gt;
          (prn "finalizing..."))&lt;br/&gt;
        (hashCode []&lt;br/&gt;
          99)))&lt;br/&gt;
#'user/m&lt;br/&gt;
user=&amp;gt; (.hashCode m)&lt;br/&gt;
99&lt;br/&gt;
user=&amp;gt; (.finalize m)&lt;br/&gt;
IllegalArgumentException No matching field found: finalize for class user.proxy$java.util.HashMap$0 clojure.lang.Reflector.getInstanceField (Reflector.java:289)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is at least one of two bugs here (thanks to Cedric Greevey for summarising this way):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;If the inability to override finalize() is unintentional, that's a bug.&lt;/li&gt;
	&lt;li&gt;If it's intentional for some reason, then (a) that's not documented, and (b) the failure is silent, in the sense that an explicit call produces an apparently completely unrelated error (above), and the failure to call the method during object finalization is completely silent.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>OS X, Java 1.6.0?</environment>
            <key id="15118">CLJ-911</key>
            <summary>'proxy' prevents overriding Object.finalize (and doesn't document it)</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="nxg">Norman Gray</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Jan 2012 06:36:27 -0800</created>
                <updated>Mon, 16 Jan 2012 06:36:27 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-907] records do not enforce type hints</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-907</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Specify a record with a field as say ^String, but the constructor won't throw if you pass in a non-String.&lt;/p&gt;</description>
                <environment/>
            <key id="15102">CLJ-907</key>
            <summary>records do not enforce type hints</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chip">Chip Salzenberg</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Jan 2012 23:25:39 -0800</created>
                <updated>Tue, 10 Jan 2012 15:08:54 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27523" author="amalloy" created="Tue, 10 Jan 2012 14:59:53 -0800">&lt;p&gt;I doubt there's any desire to change this. Records only support typehints to enable performant storage of primitive types like ints, not to provide static typing in general. An Object is stored the same way as a String, so there's no need to pay attention to that typehint.&lt;/p&gt;

&lt;p&gt;Functions behave the same way: ((fn &lt;span class="error"&gt;&amp;#91;^String x&amp;#93;&lt;/span&gt; x) :test) works just fine. Only if you use a member method of the hinted type (such as .substring in this example) is an exception thrown then the compiler casts to String in order to call the method.&lt;/p&gt;</comment>
                    <comment id="27524" author="chip" created="Tue, 10 Jan 2012 15:08:54 -0800">&lt;p&gt;I don't understand how you get from "this is how it is" to "this is how it is meant to be."  The compiler can do a better job if the underlying field is properly typed: Type errors can be caught sooner, and cast operations can be omitted on use.  This is a worthy enhancement.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-906] defrecord with protocol implementation fails when field and method names collide</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-906</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The following produces a NullPointerException:&lt;/p&gt;

&lt;p&gt;(defprotocol Foo (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt;))&lt;br/&gt;
(defrecord Fred []&lt;br/&gt;
  Foo&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (println "done.")))&lt;br/&gt;
(defrecord Bar &lt;span class="error"&gt;&amp;#91;act&amp;#93;&lt;/span&gt; ;; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;======= Field name is the same as method name.&lt;br/&gt;
  Foo&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (act (Fred.)))) ;; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;====== Behaves as (nil (Fred.))&lt;br/&gt;
(act (Bar. nil))&lt;/p&gt;

&lt;p&gt;Produces:&lt;br/&gt;
Exception in thread "main" java.lang.NullPointerException&lt;br/&gt;
 at protocol.Bar.act(protocol.clj:8)&lt;br/&gt;
 at protocol$eval66.invoke(protocol.clj:9)&lt;br/&gt;
 at clojure.lang.Compiler.eval(Compiler.java:6465)&lt;br/&gt;
 at clojure.lang.Compiler.load(Compiler.java:6902)&lt;br/&gt;
 at clojure.lang.Compiler.loadFile(Compiler.java:6863)&lt;br/&gt;
 at clojure.main$load_script.invoke(main.clj:282)&lt;br/&gt;
 at clojure.main$script_opt.invoke(main.clj:342)&lt;br/&gt;
 at clojure.main$main.doInvoke(main.clj:426)&lt;br/&gt;
 at clojure.lang.RestFn.invoke(RestFn.java:408)&lt;br/&gt;
 at clojure.lang.Var.invoke(Var.java:401)&lt;br/&gt;
 at clojure.lang.AFn.applyToHelper(AFn.java:161)&lt;br/&gt;
 at clojure.lang.Var.applyTo(Var.java:518)&lt;br/&gt;
 at clojure.main.main(main.java:37)&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;The following works as expected:&lt;/p&gt;

&lt;p&gt;(defprotocol Foo (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt;))&lt;br/&gt;
(defrecord Fred []&lt;br/&gt;
  Foo&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (println "done.")))&lt;br/&gt;
(defrecord Bar &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt; ; &amp;lt;&amp;lt;== Field name is the DIFFERENT than method name&lt;br/&gt;
  Foo&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (act (Fred.))))&lt;br/&gt;
(act (Bar. &lt;span class="error"&gt;&amp;#91;1 2 3&amp;#93;&lt;/span&gt;))&lt;/p&gt;

&lt;p&gt;Produces:&lt;br/&gt;
"done."&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;The following also works:&lt;/p&gt;

&lt;p&gt;(defprotocol Foo (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt;))&lt;br/&gt;
(defrecord Fred [])&lt;br/&gt;
(defrecord Bar &lt;span class="error"&gt;&amp;#91;act&amp;#93;&lt;/span&gt;) ; &amp;lt;&amp;lt;== Field name is the same as method name&lt;br/&gt;
(extend-protocol Foo&lt;br/&gt;
  Fred&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (println "done."))&lt;br/&gt;
  Bar&lt;br/&gt;
  (act &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; (act (Fred.))))&lt;br/&gt;
(act (Bar. &lt;span class="error"&gt;&amp;#91;1 2 3&amp;#93;&lt;/span&gt;))&lt;/p&gt;</description>
                <environment/>
            <key id="15093">CLJ-906</key>
            <summary>defrecord with protocol implementation fails when field and method names collide</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bstiles">Brian Stiles</reporter>
                        <labels>
                    </labels>
                <created>Sun, 1 Jan 2012 17:30:39 -0800</created>
                <updated>Sun, 1 Jan 2012 17:30:39 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-904] Document *read-eval* in read, read-string</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-904</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Even though the #=() reader syntax is "unofficial", &amp;#42;read-eval&amp;#42; should be documented in the appropriate API functions &amp;#8211; this is a serious security problem for anyone accepting serialized Clojure data structures. E.g., a system service reading a config file, a server accepting an API request.&lt;/p&gt;</description>
                <environment/>
            <key id="15091">CLJ-904</key>
            <summary>Document *read-eval* in read, read-string</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="timmc">Tim McCormack</reporter>
                        <labels>
                    </labels>
                <created>Sat, 31 Dec 2011 07:39:50 -0800</created>
                <updated>Sat, 21 Jan 2012 17:10:59 -0800</updated>
                                    <version>Release 1.1</version>
                <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>3</votes>
                        <watches>4</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-903] extend-protocol does not allow classnames as a String</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-903</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;In various places Clojure accepts classnames as &lt;tt&gt;String&lt;/tt&gt;, eg. in &lt;tt&gt;gen-class&lt;/tt&gt; or type hints. However it does not in &lt;tt&gt;extend-protocol&lt;/tt&gt;. This does not allow simple specification of array types.&lt;/p&gt;

&lt;p&gt;See also here: &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/722a0c09d02bb0ac"&gt;http://groups.google.com/group/clojure/browse_thread/thread/722a0c09d02bb0ac&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="15090">CLJ-903</key>
            <summary>extend-protocol does not allow classnames as a String</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mbrandmeyer">Meikel Brandmeyer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Dec 2011 15:17:12 -0800</created>
                <updated>Fri, 30 Dec 2011 15:17:12 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-899] Allow colon as whitespace in map literals</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-899</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description/>
                <environment/>
            <key id="15079">CLJ-899</key>
            <summary>Allow colon as whitespace in map literals</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stu">Stuart Halloway</reporter>
                        <labels>
                    </labels>
                <created>Sun, 18 Dec 2011 06:10:10 -0800</created>
                <updated>Mon, 27 Feb 2012 13:16:42 -0800</updated>
                                                    <fixVersion>Release 1.4</fixVersion>
                                        <due/>
                    <votes>3</votes>
                        <watches>6</watches>
                        <comments>
                    <comment id="27488" author="tsdh" created="Fri, 23 Dec 2011 01:22:05 -0800">&lt;p&gt;Discussed here: &lt;a href="https://groups.google.com/d/msg/clojure/XvJUzaY1jec/l8xEwlFl8EUJ"&gt;https://groups.google.com/d/msg/clojure/XvJUzaY1jec/l8xEwlFl8EUJ&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27536" author="hiredman" created="Wed, 11 Jan 2012 12:23:12 -0800">&lt;p&gt;please no&lt;/p&gt;</comment>
                    <comment id="27576" author="tavisrudd" created="Mon, 16 Jan 2012 10:17:31 -0800">&lt;p&gt;Alan Malloy raises a good point in the google group discussion (&lt;a href="https://groups.google.com/d/msg/clojure/XvJUzaY1jec/aVpWBicwGhsJ"&gt;https://groups.google.com/d/msg/clojure/XvJUzaY1jec/aVpWBicwGhsJ&lt;/a&gt;) about accidental confusion between trailing (or floating) and leading colons:&lt;br/&gt;
"It isn't even as simple as "letting them&lt;br/&gt;
be whitespace", because presumably you want (read-string "{a: b}") to&lt;br/&gt;
result in (hash-map 'a 'b), but (read-string "{a :b}") to result in&lt;br/&gt;
(hash-map 'a :b)."&lt;/p&gt;

&lt;p&gt;This issue could be avoided by only treating a colon as whitespace when followed by a comma. As easy cut-paste of json seems the be the key motivation here, the commas are going to be there anyway: valid {"v":, 1234} vs syntax error {a-key: should-be-a-keyword}.&lt;/p&gt;</comment>
                    <comment id="27578" author="alexbaranosky" created="Mon, 16 Jan 2012 15:23:41 -0800">&lt;p&gt;This would be visually confusing imo. &lt;/p&gt;</comment>
                    <comment id="27581" author="laurentpetit" created="Tue, 17 Jan 2012 15:01:00 -0800">&lt;p&gt;Please, oh please, no.&lt;/p&gt;</comment>
                    <comment id="27587" author="tavisrudd" created="Wed, 18 Jan 2012 12:40:46 -0800">&lt;p&gt;Er, brain fart. I was typing faster than I was thinking and put the comma in the wrong place.  In my head I meant the form following the colon would have to have a comma after it. Thus, {"a-json-key": 1234, ...} would be valid while {"a-json-key": was-supposed-to-be-a-keyword "another-json-key" foo} would complain about the colon being an Invalid Token.  I don't see the need for it, however.&lt;/p&gt;
</comment>
                    <comment id="27879" author="solussd" created="Mon, 27 Feb 2012 08:55:26 -0800">&lt;p&gt;Clojure already has reader syntax for a map. If we support JSON, do we also support ruby map literals? Seems like this addition would only add confusion, imo, given colons are used in keywords and keywords are frequently used in maps - e.g., when de-serializing from XML, or even JSON. &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</comment>
                    <comment id="27880" author="dnolen" created="Mon, 27 Feb 2012 09:19:53 -0800">&lt;p&gt;Clojure is no longer a language hosted only on the JVM. Clojure is also hosted on the CLR, and JavaScript. In particular ClojureScript can't currently easily deal with JSON literals - an extremely common (though problematic) data format. By allowing colon whitespace in map literals - Clojure data structures can effectively become an extensible JSON superset - giving the succinctness of JSON and the expressiveness of XML.&lt;/p&gt;

&lt;p&gt;+1 from me.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-889] Specifically allow '.' inside keywords</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-889</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The documentation for keywords (on page &lt;a href="http://clojure.org/reader"&gt;http://clojure.org/reader&lt;/a&gt;) specifically states that '.' is not allowed as part of a keyword name; however '.' is specifically useful.  For example, several web frameworks for Clojure use keywords to represent HTML elements, using CSS selector syntax (i.e., :div.important is equivalent to &amp;lt;div class='important'&amp;gt;).&lt;/p&gt;

&lt;p&gt;In any case, the use of '.' is not checked by the reader and it is generally useful.&lt;/p&gt;

&lt;p&gt;I would like to see '.' officially allowed (in the documentation).  Further, I'd like to see additional details about which punctuation characters are allowed (my own web framework uses '&amp;amp;', '?' and '&amp;gt;' inside keywords for various purposes ... again, current reader implementation does not forbid this, but if a future reader will reject it, I'd like to know now).&lt;/p&gt;</description>
                <environment/>
            <key id="15043">CLJ-889</key>
            <summary>Specifically allow '.' inside keywords</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hlewisship">Howard Lewis Ship</reporter>
                        <labels>
                        <label>keywords</label>
                        <label>reader</label>
                    </labels>
                <created>Thu, 1 Dec 2011 09:09:04 -0800</created>
                <updated>Fri, 9 Dec 2011 08:02:46 -0800</updated>
                                                    <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27427" author="hlewisship" created="Thu, 8 Dec 2011 13:37:26 -0800">&lt;p&gt;To clarify, Hiccup and Cascade both use keywords containing '#' and '.'  Cascade goes further, using '&amp;amp;' (to represent HTML entities), '&amp;gt;', and (possibly in the future) '?'.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-888] defprotocol should throw error when signatures include variable number of parameters</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-888</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I tried to use &amp;amp; in the signature for a method in defprotocol. Apparently (see below), this is compiled so that &amp;amp; becomes a simple parameter name, and there is no special handling for variable number of parameters. I think the use of &amp;amp; in a protocol signature ought to be detected and immediately cause an exception (I also think this restriction on the signatures ought to be documented; I couldn't find it specified in the current documentation, though of course it is implied (as I later realized) by the fact that defprotocol creates a Java interface).&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (defprotocol Applier (app &lt;span class="error"&gt;&amp;#91;this f &amp;amp; args&amp;#93;&lt;/span&gt;))&lt;br/&gt;
Applier&lt;br/&gt;
user=&amp;gt; (deftype A [] Applier (app &lt;span class="error"&gt;&amp;#91;_ f &amp;amp; args&amp;#93;&lt;/span&gt; (prn f &amp;amp; args) (apply f args)))&lt;br/&gt;
user.A&lt;br/&gt;
user=&amp;gt; (app (A.) + 1 2)&lt;br/&gt;
#&amp;lt;core$&lt;em&gt;PLUS&lt;/em&gt; clojure.core$&lt;em&gt;PLUS&lt;/em&gt;@5d9d0d20&amp;gt; 1 2&lt;br/&gt;
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  &lt;br/&gt;
clojure.lang.RT.seqFrom (RT.java:487)&lt;/p&gt;
</description>
                <environment/>
            <key id="15039">CLJ-888</key>
            <summary>defprotocol should throw error when signatures include variable number of parameters</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="glchapman">Greg Chapman</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Nov 2011 14:38:02 -0800</created>
                <updated>Tue, 29 Nov 2011 14:38:02 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-887] Error when calling primitive functions with destructuring in the arg vector</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-887</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If one defines a primitive-taking function with destructuring, calling that function will result in a ClassCastException, IFF the primitive return-type hint is present.&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;Clojure 1.4.0-master-SNAPSHOT
user=&amp;gt; (defn foo [[a b] ^long x ^long y] 0)
#'user/foo
user=&amp;gt; (foo [1 2] 3 4)
0
user=&amp;gt; (defn foo ^long [[a b] ^long x ^long y] 0)
#'user/foo
user=&amp;gt; (foo [1 2] 3 4)
ClassCastException user$foo cannot be cast to clojure.lang.IFn$OLLL  user/eval9 (NO_SOURCE_FILE:4)
user=&amp;gt; (pst)
ClassCastException user$foo cannot be cast to clojure.lang.IFn$OLLL
	user/eval9 (NO_SOURCE_FILE:4)
	clojure.lang.Compiler.eval (Compiler.java:6493)
	clojure.lang.Compiler.eval (Compiler.java:6459)
	clojure.core/eval (core.clj:2796)
	clojure.main/repl/read-eval-print--5967 (main.clj:244)
	clojure.main/repl/fn--5972 (main.clj:265)
	clojure.main/repl (main.clj:265)
	clojure.main/repl-opt (main.clj:331)
	clojure.main/main (main.clj:427)
	clojure.lang.Var.invoke (Var.java:397)
	clojure.lang.Var.applyTo (Var.java:518)
	clojure.main.main (main.java:37)
nil
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="15038">CLJ-887</key>
            <summary>Error when calling primitive functions with destructuring in the arg vector</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Nov 2011 13:46:47 -0800</created>
                <updated>Tue, 29 Nov 2011 13:48:19 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-883] Clojure head holding bug 				</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-883</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I've a head holding problem that I believe is a bug in clojure 1.3.  I&lt;br/&gt;
wrote the following function to split a a lazy seq of strings across&lt;br/&gt;
files of x size:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn split-file
 ([path strs size]
    (trampoline split-file path (seq strs) size 0))
 ([path strs size part]
    (with-open [f (clojure.java.io/writer (str path "." part))]
      (loop [written 0, ss strs]
        (when ss
          (if (&amp;gt;= written size)
            #(split-file path ss size (inc part))
            (let [s (first ss)]
              (.write f s)
              (recur (+ written (.length s)) (next ss)))))))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I call the 3 arg version of the function:&lt;br/&gt;
(split-file "foo" (repeat 100000000 "blah blah blah") 100000000)&lt;/p&gt;

&lt;p&gt;I see memory usage increases as I'm writing each file with the usual&lt;br/&gt;
gc slow down, then memory usage goes back down again as I get to a new&lt;br/&gt;
split file.&lt;/p&gt;

&lt;p&gt;Memory usage is fine if I call the 4 arg version (which only writes&lt;br/&gt;
one part of the split file):&lt;br/&gt;
(split-file "foo" (repeat 100000000 "blah blah blah") 100000000 0)&lt;/p&gt;

&lt;p&gt;I can also avoid the head holding problem by removing trampoline and&lt;br/&gt;
recursively calling split-file directly, but then those recursive&lt;br/&gt;
calls use up stack and don't close files until all calls complete&lt;/p&gt;</description>
                <environment>java 6 jdk on linux, jre 6 on windows 7</environment>
            <key id="15030">CLJ-883</key>
            <summary>Clojure head holding bug 				</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="gerrard.mcnulty@gmail.com">Gerrard McNulty</reporter>
                        <labels>
                    </labels>
                <created>Sun, 27 Nov 2011 03:53:11 -0800</created>
                <updated>Mon, 16 Jan 2012 02:15:37 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27575" author="a_strange_guy" created="Mon, 16 Jan 2012 02:15:37 -0800">&lt;p&gt;There is actually no problem with head retention in your code.&lt;br/&gt;
It's zust the garbage collector that doesn't collect the seq right away. If there were problems, then you would get a OutOfMemoryError pretty fast.&lt;/p&gt;

&lt;p&gt;compare&lt;br/&gt;
(split-file "foo" (repeat 100000000 "blah blah blah") 100000000 0)&lt;br/&gt;
with&lt;br/&gt;
(doall (repeat 100000000 "blah blah blah"))&lt;br/&gt;
to see the difference&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-880] syntax-quote should be a macro instead of implemented inside the reader</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-880</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;syntax-quote is currently a somewhat gnarly bit of java code in LispReader.java, would be great to replace it with a (hopefully less gnarly) clojure macro.&lt;/p&gt;

&lt;p&gt;LispReader.java would be required to do something similar to 'x =&amp;gt; (quote x). `x =&amp;gt; (syntax-quote x) , ~x =&amp;gt; (unquote x), ~@x =&amp;gt; (unquote-splicing x)&lt;/p&gt;</description>
                <environment/>
            <key id="15017">CLJ-880</key>
            <summary>syntax-quote should be a macro instead of implemented inside the reader</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hiredman">Kevin Downey</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Nov 2011 15:02:48 -0800</created>
                <updated>Thu, 17 Nov 2011 15:02:48 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-878] DispatchReader always calls CtorReader when no dispatch macro found</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-878</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;At the REPL, I accidentally typed:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; # "\w+"&lt;br/&gt;
RuntimeException Unsupported escape character: \w  clojure.lang.Util.runtimeExce&lt;br/&gt;
ption (Util.java:156)&lt;br/&gt;
#&amp;lt;core$&lt;em&gt;PLUS&lt;/em&gt; clojure.core$&lt;em&gt;PLUS&lt;/em&gt;@6b7dc78&amp;gt;&lt;/p&gt;

&lt;p&gt;You can see the confusing result (the REPL is also left in an unclosed string). After looking at LispReader.java, it seems to me DispatchReader ought to at least check for whitespace before calling CtorReader (perhaps better would be to check for a valid symbol character). Another example:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (defrecord X &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt;)&lt;br/&gt;
user.X&lt;br/&gt;
user=&amp;gt; # "user.X"&lt;span class="error"&gt;&amp;#91;5&amp;#93;&lt;/span&gt;&lt;br/&gt;
#user.X{:x 5}&lt;/p&gt;

&lt;p&gt;I'm assuming the fact that the above successfully creates an X is accidental.&lt;/p&gt;</description>
                <environment>Windows 7, Java 1.7</environment>
            <key id="15010">CLJ-878</key>
            <summary>DispatchReader always calls CtorReader when no dispatch macro found</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="glchapman">Greg Chapman</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Nov 2011 15:28:46 -0800</created>
                <updated>Tue, 15 Nov 2011 15:28:46 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-866] Provide a clojure.test function to run a single test case with fixtures</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-866</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;At present, clojure.test test cases are functions and can be invoked directly.  However, in the case that the test relies on fixtures, this does not work.  Please provide a function that can run a single test case with all fixtures applied.&lt;/p&gt;</description>
                <environment/>
            <key id="14902">CLJ-866</key>
            <summary>Provide a clojure.test function to run a single test case with fixtures</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Oct 2011 06:57:55 -0700</created>
                <updated>Thu, 27 Oct 2011 06:57:55 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-864] defrecord positional arity factory fn should have an inline version that calls the record constructor</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-864</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;defrecord positional arity factory fn should have an inline version that calls the record constructor&lt;/p&gt;</description>
                <environment/>
            <key id="14900">CLJ-864</key>
            <summary>defrecord positional arity factory fn should have an inline version that calls the record constructor</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hiredman">Kevin Downey</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 Oct 2011 01:17:55 -0700</created>
                <updated>Wed, 26 Oct 2011 01:17:55 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-862] pmap level of parallelism inconsistent for chunked vs non-chunked input</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-862</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The code of pmap creates futures for the set of map operations it needs to perform with (map #(future %) coll), then acts on that sequence in a fashion obviously intended to keep only #CPUs+2 unfinished futures realized at any given time.  It works exactly this way for non-chunked input seqs, but when pmap is passed a chunked seq, the seq of futures also becomes chunked.  This causes an arbitrary number of futures to be realized as the #CPUs+2 window and chunk-size window interact.&lt;/p&gt;

&lt;p&gt;The doc-string for pmap doesn't promise any particular level of parallelism, but I think the inconsistent parallelism for chunked vs non-chunked input comprises a bug.&lt;/p&gt;</description>
                <environment/>
            <key id="14805">CLJ-862</key>
            <summary>pmap level of parallelism inconsistent for chunked vs non-chunked input</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="llasram">Marshall T. Vandegrift</reporter>
                        <labels>
                    </labels>
                <created>Sun, 23 Oct 2011 07:50:38 -0700</created>
                <updated>Fri, 9 Dec 2011 07:41:24 -0800</updated>
                                    <version>Release 1.1</version>
                <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27093" author="stu" created="Tue, 25 Oct 2011 16:51:55 -0700">&lt;p&gt;Next person to take a deep look at pmap should probably also think through fork/join.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-859] Built in dynamic vars don't have :dynamic metadata</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-859</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I'm sure 'built in' is probably not the right term here, but I'm not sure what these are called.&lt;/p&gt;

&lt;p&gt;I ran into this issue earlier today while fixing a bug in clojail. Built in vars, particularly ones listed here without a source link: &lt;a href="http://clojure.github.com/clojure/clojure.core-api.html"&gt;http://clojure.github.com/clojure/clojure.core-api.html&lt;/a&gt;, do not have :dynamic metadata despite being dynamic. This includes &amp;#42;in&amp;#42;, &amp;#42;out&amp;#42;, and &amp;#42;err&amp;#42; among others. Here are some examples:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (meta #'*err*)
{:ns #&amp;lt;Namespace clojure.core&amp;gt;, :name *err*, :added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;, :doc &lt;span class="code-quote"&gt;"A java.io.Writer object representing standard error &lt;span class="code-keyword"&gt;for&lt;/span&gt; print operations.\n\n  Defaults to &lt;span class="code-object"&gt;System&lt;/span&gt;/err, wrapped in a PrintWriter"&lt;/span&gt;}
user=&amp;gt; (meta #'*in*)
{:ns #&amp;lt;Namespace clojure.core&amp;gt;, :name *in*, :added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;, :doc &lt;span class="code-quote"&gt;"A java.io.Reader object representing standard input &lt;span class="code-keyword"&gt;for&lt;/span&gt; read operations.\n\n  Defaults to &lt;span class="code-object"&gt;System&lt;/span&gt;/in, wrapped in a LineNumberingPushbackReader"&lt;/span&gt;}
user=&amp;gt; (meta #'*out*)
{:ns #&amp;lt;Namespace clojure.core&amp;gt;, :name *out*, :added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;, :doc &lt;span class="code-quote"&gt;"A java.io.Writer object representing standard output &lt;span class="code-keyword"&gt;for&lt;/span&gt; print operations.\n\n  Defaults to &lt;span class="code-object"&gt;System&lt;/span&gt;/out, wrapped in an OutputStreamWriter"&lt;/span&gt;, :tag java.io.Writer}
user=&amp;gt; (meta #'*ns*)
{:ns #&amp;lt;Namespace clojure.core&amp;gt;, :name *ns*, :added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;, :doc &lt;span class="code-quote"&gt;"A clojure.lang.Namespace object representing the current namespace."&lt;/span&gt;, :tag clojure.lang.Namespace}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="14710">CLJ-859</key>
            <summary>Built in dynamic vars don't have :dynamic metadata</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="anthonysimpson">Anthony Simpson</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Oct 2011 02:39:09 -0700</created>
                <updated>Fri, 24 Feb 2012 10:41:31 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27072" author="bsmith.occs@gmail.com" created="Wed, 19 Oct 2011 10:03:11 -0700">&lt;p&gt;This recent discussion on the users list seems relevant: &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/d5efd00c699f73a7"&gt;Should intern obey :dynamic?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems to boil down to this the information that a Var is dynamic (or not) is duplicated. Once as metadata with the key &lt;tt&gt;:dynamic&lt;/tt&gt;, and once as a boolean field on the Var class which implements Clojure's variables. This boolean can be obtained by calling the method &lt;tt&gt;isDynamic()&lt;/tt&gt; on the Var.&lt;/p&gt;

&lt;p&gt;The confusion arises because apparently &lt;tt&gt;:dynamic&lt;/tt&gt; and &lt;tt&gt;.isDynamic&lt;/tt&gt; can get out of sync with each other. &lt;tt&gt;.isDynamic&lt;/tt&gt; is the source of truth in this case.&lt;/p&gt;</comment>
                    <comment id="27073" author="bsmith.occs@gmail.com" created="Wed, 19 Oct 2011 10:18:22 -0700">&lt;p&gt;&lt;tt&gt;Compiler$Parser.parse(...)&lt;/tt&gt; finds the &lt;tt&gt;:dynamic&lt;/tt&gt; entry left in the metadata of the symbol by &lt;tt&gt;LispReader&lt;/tt&gt; and passes this on when creating a new &lt;tt&gt;DefExpr&lt;/tt&gt;, which in turn, generates the code that will call &lt;tt&gt;setDynamic(...)&lt;/tt&gt; on the var when it is created at runtime.&lt;/p&gt;

&lt;p&gt;As far as I can tell, the &lt;tt&gt;:dynamic&lt;/tt&gt; entry is irrelevant once that has occurred. It seems to be implemented only as a way to communicate (by way of the reader) with the compiler. Once the compiler's gotten the message, it isn't needed anymore. Keeping it around seems to just cause confusion.&lt;/p&gt;

&lt;p&gt;Dynamic vars created by the Java layer of Clojure core don't use the &lt;tt&gt;:dynamic&lt;/tt&gt; mechanism, they just &lt;tt&gt;setDynamic()&lt;/tt&gt; directly. That's why they don't have &lt;tt&gt;:dynamic&lt;/tt&gt; in their meta-data map. &lt;/p&gt;

&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Perhaps the compiler should elide &lt;tt&gt;:dynamic&lt;/tt&gt; from the metadata map available at runtime, since it has served its purpose.&lt;/li&gt;
	&lt;li&gt;Perhaps Clojure should supply the function &lt;tt&gt;dynamic?&lt;/tt&gt;.
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn dynamic? [^clojure.lang.Var v] (.isDynamic v))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Or, perhaps one might consider, for 1.4, replacing &lt;tt&gt;:dynamic&lt;/tt&gt; altogether and just enforcing the established naming convention: &lt;tt&gt;&amp;#42;earmuffs&amp;#42;&lt;/tt&gt; are dynamic, &lt;tt&gt;everything-else&lt;/tt&gt; isn't. (The compile warns about violations of this convention in 1.3.)&lt;/p&gt;</comment>
                    <comment id="27839" author="jafingerhut" created="Fri, 24 Feb 2012 09:39:08 -0800">&lt;p&gt;I recently noticed several lines like this one in core.clj.  Depending upon how many symbols are like this, perhaps this method could be used to add :dynamic metadata to symbols in core, along with a unit test to verify that all symbols in core have :dynamic if and only if .isDynamic returns true?&lt;/p&gt;</comment>
                    <comment id="27841" author="jafingerhut" created="Fri, 24 Feb 2012 10:41:31 -0800">&lt;p&gt;Ugh.  In my previous comment, by "several lines like this one" I meant to paste the following as an example:&lt;/p&gt;

&lt;p&gt;(alter-meta! #'&lt;b&gt;agent&lt;/b&gt; assoc :added "1.0")&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-851] Type-hinting a var with primitive array pseudo-class results in IllegalArgumentException when the var is used as an arg</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-851</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Example:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;user=&amp;gt; (def ^longs la (long-array 0))
#'user/la
user=&amp;gt; (defn foo [] (alength la))
CompilerException java.lang.IllegalArgumentException: Unable to resolve classname: clojure.core$longs@32dfcb47, compiling:(NO_SOURCE_PATH:9) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Workaround: use the class string, e.g., &lt;tt&gt;^"[J"&lt;/tt&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14679">CLJ-851</key>
            <summary>Type-hinting a var with primitive array pseudo-class results in IllegalArgumentException when the var is used as an arg</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Sun, 9 Oct 2011 22:26:46 -0700</created>
                <updated>Sun, 16 Oct 2011 00:39:12 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26988" author="bsmith.occs@gmail.com" created="Sat, 15 Oct 2011 09:40:05 -0700">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-851" title="Type-hinting a var with primitive array pseudo-class results in IllegalArgumentException when the var is used as an arg"&gt;CLJ-851&lt;/a&gt;-test.patch&lt;/p&gt;

&lt;p&gt;Provides a test to reproduce this issue, as well as a test that shows that the workaround of using ^"[J" as type hint works correctly.&lt;/p&gt;</comment>
                    <comment id="26995" author="bsmith.occs@gmail.com" created="Sun, 16 Oct 2011 00:23:54 -0700">&lt;p&gt;OK, I see the problem here: &lt;tt&gt;longs&lt;/tt&gt; plays two roles in Clojure:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;As an unqualified symbol, it's taken to mean &lt;tt&gt;long[].class&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;clojure.core/longs&lt;/tt&gt; is a definline function which calls &lt;tt&gt;clojure.lang.Numbers.longs(...)&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The example in the issue description is expecting the first interpretation, but what we're actually getting is the second interpretation, i.e. the :tag is not a symbol &lt;tt&gt;longs&lt;/tt&gt;, but rather a function (an instance of the class &lt;tt&gt;clojure.core$longs&lt;/tt&gt;, to be precise).&lt;/p&gt;

&lt;p&gt;So, it's as if we'd written this:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(def ^{:tag clojure.core/longs} la (long-array 0))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When really, we meant this:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(def ^{:tag 'longs} la (long-array 0))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the behavior described by this issue is confusing, it looks to me like it's &lt;em&gt;not a bug&lt;/em&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10399" name="CLJ-851-test.patch" size="2225" author="bsmith.occs@gmail.com" created="Sat, 15 Oct 2011 09:40:05 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-849] Add a pseudo-variable containing the current line number</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-849</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Add a pseudo-variable (similar to &lt;b&gt;file&lt;/b&gt;), containing the current line number. This should be available during AOT compilation. The name "&lt;b&gt;line-number&lt;/b&gt;" might be good.&lt;/p&gt;

&lt;p&gt;It will be useful for diagnostic log messages. Using exception stack traces has poor runtime performance and the line number should be available to the compiler at minimal cost.&lt;/p&gt;</description>
                <environment>Any</environment>
            <key id="14672">CLJ-849</key>
            <summary>Add a pseudo-variable containing the current line number</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="grkuntzmd">G. Ralph Kuntz, MD</reporter>
                        <labels>
                    </labels>
                <created>Fri, 7 Oct 2011 05:59:03 -0700</created>
                <updated>Fri, 7 Oct 2011 05:59:03 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-844] NPE calling keyword on map from bean</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-844</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Calling a keyword on a map returned from clojure.core/bean causes a null pointer exception if the keyword is not a key in the map:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (:a (bean {}))&lt;br/&gt;
java.lang.NullPointerException (NO_SOURCE_FILE:0)&lt;br/&gt;
user=&amp;gt; (.printStackTrace *e)&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at clojure.core$bean$v__4765.invoke(core_proxy.clj:385)&lt;br/&gt;
	at clojure.core$bean$fn__4786.invoke(core_proxy.clj:394)&lt;br/&gt;
	at clojure.core.proxy$clojure.lang.APersistentMap$0.valAt(Unknown Source)&lt;br/&gt;
	at clojure.lang.KeywordLookupSite.fault(KeywordLookupSite.java:33)&lt;br/&gt;
	at user$eval1062.invoke(NO_SOURCE_FILE:7)&lt;br/&gt;
	at clojure.lang.Compiler.eval(Compiler.java:5424)&lt;br/&gt;
	... 9 more&lt;/p&gt;

&lt;p&gt;The object returned by bean claims to be an APersistentMap FWIW:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (class (bean {}))&lt;br/&gt;
clojure.core.proxy$clojure.lang.APersistentMap$0&lt;/p&gt;</description>
                <environment/>
            <key id="14648">CLJ-844</key>
            <summary>NPE calling keyword on map from bean</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="technomancy">Phil Hagelberg</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Sep 2011 17:00:37 -0700</created>
                <updated>Fri, 9 Dec 2011 07:41:52 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>4</watches>
                        <comments>
                    <comment id="26909" author="stu" created="Fri, 7 Oct 2011 07:41:57 -0700">&lt;p&gt;Bean needs a full overhaul. In my ideal world it would be deprecated out of core into some other namespace.&lt;/p&gt;</comment>
                    <comment id="26914" author="lprefontaine" created="Fri, 7 Oct 2011 21:59:14 -0700">&lt;p&gt;If you can sketch a bit what you have in mind, I might give it a try.&lt;br/&gt;
I have some time available and went through the pending issues, this one seems within&lt;br/&gt;
my reach.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-841] Unable to download clojure using wget. Wget seems to be blocked...</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-841</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;wget &lt;a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.3.0/clojure-1.3.0.zip"&gt;http://repo1.maven.org/maven2/org/clojure/clojure/1.3.0/clojure-1.3.0.zip&lt;/a&gt;&lt;br/&gt;
Gives me a 403, same with other people.&lt;/p&gt;

&lt;p&gt;When I add -U YUBLOCKWGET to the command, it downloads the file successfully.&lt;/p&gt;

&lt;p&gt;This "feature" needs to be removed.&lt;/p&gt;

&lt;p&gt;Also, I encountered this while trying to package clojure 1.3. So no, I can't just use a browser &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/tongue.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14642">CLJ-841</key>
            <summary>Unable to download clojure using wget. Wget seems to be blocked...</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="td123">Thomas Dziedzic</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Sep 2011 21:35:31 -0700</created>
                <updated>Fri, 23 Sep 2011 21:35:31 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-840] Add a way to access the current test var in :each fixtures for clojure.test</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-840</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When looking at (log) output from tests written with clojure.test, I would like to be able to identify the output associated with each test. A mechanism to expose the current test var within an :each fixture would enable this.&lt;/p&gt;

&lt;p&gt;One mechanism might be to bind a &lt;b&gt;test-var&lt;/b&gt; var with the current test var before calling the each-fixture-fn in clojure.test/test-all-vars.&lt;/p&gt;</description>
                <environment/>
            <key id="14636">CLJ-840</key>
            <summary>Add a way to access the current test var in :each fixtures for clojure.test</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="stuart.sierra">Stuart Sierra</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Sep 2011 09:20:56 -0700</created>
                <updated>Fri, 28 Oct 2011 09:31:05 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26912" author="stuart.sierra" created="Fri, 7 Oct 2011 14:33:31 -0700">&lt;p&gt;Or just pass the Var directly into the fixture. Vars are invokable.&lt;/p&gt;</comment>
                    <comment id="26913" author="hugoduncan" created="Fri, 7 Oct 2011 14:45:05 -0700">&lt;p&gt;I don't think that works, since the the function passed to the fixture is not the test var, but a function calling &lt;tt&gt;test-var&lt;/tt&gt; on the test var.&lt;/p&gt;</comment>
                    <comment id="27082" author="hugoduncan" created="Fri, 21 Oct 2011 20:34:24 -0700">&lt;p&gt;Patch to add &lt;b&gt;test-var&lt;/b&gt;&lt;/p&gt;</comment>
                    <comment id="27090" author="stuart.sierra" created="Tue, 25 Oct 2011 16:04:52 -0700">&lt;p&gt;&lt;tt&gt;&amp;#42;testing-vars&amp;#42;&lt;/tt&gt; already has this information, but it's not visible to the fixture functions because it gets bound inside &lt;tt&gt;test-var&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps the &lt;tt&gt;:each&lt;/tt&gt; fixture functions should be called in &lt;tt&gt;test-var&lt;/tt&gt; rather than in test-all-vars. (The namespace of a Var is available in its metadata.) But then we have to call &lt;tt&gt;join-fixtures&lt;/tt&gt; inside &lt;tt&gt;test-var&lt;/tt&gt; every time.&lt;/p&gt;</comment>
                    <comment id="27092" author="stuart.sierra" created="Tue, 25 Oct 2011 16:26:51 -0700">&lt;p&gt;Try this patch: clj840-2.diff.&lt;/p&gt;

&lt;p&gt;This makes &lt;tt&gt;&amp;#42;testing-vars&amp;#42;&lt;/tt&gt; visible to &lt;tt&gt;:each&lt;/tt&gt; fixture functions, which seems intuitively more correct.&lt;/p&gt;

&lt;p&gt;BUT it slightly changes the behavior of &lt;tt&gt;test-var&lt;/tt&gt;, which I'm less happy about.&lt;/p&gt;</comment>
                    <comment id="27094" author="hugoduncan" created="Tue, 25 Oct 2011 18:07:27 -0700">&lt;p&gt;Might it make sense to provide a function on top of &lt;tt&gt;&lt;b&gt;testing-vars&lt;/b&gt;&lt;/tt&gt; to return the current test-var?&lt;/p&gt;</comment>
                    <comment id="27177" author="stuart.sierra" created="Fri, 28 Oct 2011 07:14:58 -0700">&lt;p&gt;No, that function is &lt;tt&gt;first&lt;/tt&gt;&lt;/p&gt;</comment>
                    <comment id="27178" author="hugoduncan" created="Fri, 28 Oct 2011 09:31:05 -0700">&lt;p&gt;I agree with having the dynamic vars as part of the extension interface, but would have thought that having a function for use when writing tests would have been cleaner. Just my 2c.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10495" name="add-test-var.diff" size="2970" author="hugoduncan" created="Fri, 21 Oct 2011 20:34:24 -0700"/>
                    <attachment id="10497" name="clj840-2.diff" size="2366" author="stuart.sierra" created="Tue, 25 Oct 2011 16:26:51 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-835] defmulti doc string doesn't mention needing to be passed a var for the value of :hierarchy</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-835</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The :hierarchy option for defmulti should be passed a var, but this is not mentioned in the doc string.&lt;/p&gt;

&lt;p&gt;The error message from passing the hierarchy directly is rather cryptic:&lt;/p&gt;

&lt;p&gt;Evaluation aborted on java.lang.ClassCastException: clojure.lang.PersistentArrayMap cannot be cast to clojure.lang.IRef (SOURCE_FORM_44:19).&lt;/p&gt;</description>
                <environment>1.2, 1.3 beta3</environment>
            <key id="14599">CLJ-835</key>
            <summary>defmulti doc string doesn't mention needing to be passed a var for the value of :hierarchy</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Sep 2011 13:09:00 -0700</created>
                <updated>Wed, 14 Sep 2011 13:11:10 -0700</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26815" author="mbrandmeyer" created="Wed, 14 Sep 2011 13:11:10 -0700">&lt;p&gt;Modified doctoring to clarify the usage of &lt;tt&gt;:hierarchy&lt;/tt&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10361" name="0001-Clarify-docstring-for-defmulti.patch" size="1058" author="mbrandmeyer" created="Wed, 14 Sep 2011 13:11:10 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-825] Protocol implementation inconsistencies </title>
                <link>http://dev.clojure.org/jira/browse/CLJ-825</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;There seems to be some inconsistencies when implementing protocols that have multi arity functions depending on how the protocol is implemented. I have attached a clj file illustrating this. The short version is that multi arity must be defined as such w/ defrecord:&lt;/p&gt;

&lt;p&gt;(defrecord Zomg []&lt;br/&gt;
  SomeProto&lt;br/&gt;
  (hello &lt;span class="error"&gt;&amp;#91;_&amp;#93;&lt;/span&gt; 1)&lt;br/&gt;
  (hello &lt;span class="error"&gt;&amp;#91;_ _&amp;#93;&lt;/span&gt; 1))&lt;/p&gt;

&lt;p&gt;And as such with extend-type&lt;/p&gt;

&lt;p&gt;(extend-type Object&lt;br/&gt;
  SomeProto&lt;br/&gt;
  (hello&lt;br/&gt;
    (&lt;span class="error"&gt;&amp;#91;_&amp;#93;&lt;/span&gt; 1)&lt;br/&gt;
    (&lt;span class="error"&gt;&amp;#91;_ _&amp;#93;&lt;/span&gt; 1)))&lt;/p&gt;

&lt;p&gt;I have only tested defrecord &amp;amp; extend-type. I am unsure how it works with deftype and extend-protocol.&lt;/p&gt;</description>
                <environment>All</environment>
            <key id="14570">CLJ-825</key>
            <summary>Protocol implementation inconsistencies </summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="carllerche">Carl Lerche</reporter>
                        <labels>
                    </labels>
                <created>Mon, 8 Aug 2011 10:35:38 -0700</created>
                <updated>Mon, 8 Aug 2011 10:35:38 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                                <attachments>
                    <attachment id="10310" name="scribbles.clj" size="816" author="carllerche" created="Mon, 8 Aug 2011 10:35:38 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-823] Piping seque into seque can deadlock</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-823</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I'm not sure if this is a supported scenario, but the following deadlocks in Clojure 1.3:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;(let [xs (seque (range 150000))&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;ys (seque (filter odd? xs))]&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;(apply + ys))&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;As I understand it, the problem is that ys' fill takes place on an agent thread, so when it calls xs' drain, the &lt;tt&gt;(send-off agt fill)&lt;/tt&gt; does not immediately trigger xs' fill, but is instead put on the nested list to be performed when ys' agent returns. Unfortunately, ys' fill will eventually block trying to take from xs, and so it never returns and the pending send-offs are never sent. Wrapping the send-off in drain to:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;(future (send-off agt fill))&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;is a simple (probably not optimal) way to fix the deadlock.&lt;/p&gt;</description>
                <environment>Windows 7; JVM 1.6; Clojure 1.3 beta 1</environment>
            <key id="14557">CLJ-823</key>
            <summary>Piping seque into seque can deadlock</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="glchapman">Greg Chapman</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Aug 2011 11:28:22 -0700</created>
                <updated>Wed, 3 Aug 2011 11:28:22 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-820] int coercion doesn't work in clojure 1.3</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-820</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Using the clojure git head as of 2011-07-14 (commit f704853751d02faf72bd53be599ee0be6c1da63e), int coercion doesn't work:&lt;/p&gt;

&lt;p&gt;user&amp;gt; (class (int 1))&lt;br/&gt;
java.lang.Long&lt;/p&gt;

&lt;p&gt;byte, short, double, and float coercion work fine, though:&lt;/p&gt;

&lt;p&gt;user&amp;gt; (class (byte 1))&lt;br/&gt;
java.lang.Byte&lt;br/&gt;
user&amp;gt; (class (short 1))&lt;br/&gt;
java.lang.Short&lt;br/&gt;
user&amp;gt; (class (double 1))&lt;br/&gt;
java.lang.Double&lt;br/&gt;
user&amp;gt; (class (float 1))&lt;br/&gt;
java.lang.Float&lt;/p&gt;

&lt;p&gt;Also creating integers directly works fine:&lt;/p&gt;

&lt;p&gt;user&amp;gt; (class (Integer. "100"))&lt;br/&gt;
java.lang.Integer&lt;br/&gt;
user&amp;gt; (class (Integer/valueOf 1))&lt;br/&gt;
java.lang.Integer&lt;br/&gt;
user&amp;gt; (class (Integer. 100))&lt;br/&gt;
java.lang.Integer&lt;/p&gt;

&lt;p&gt;This is probably related to &lt;a href="http://dev.clojure.org/jira/browse/CLJ-439" title="Automatic type translation from Integer to Long"&gt;&lt;del&gt;CLJ-439&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</description>
                <environment>Gentoo GNU/Linux</environment>
            <key id="14490">CLJ-820</key>
            <summary>int coercion doesn't work in clojure 1.3</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="tsdh">Tassilo Horn</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Jul 2011 06:05:40 -0700</created>
                <updated>Sat, 16 Jul 2011 05:13:07 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26571" author="paraseba" created="Fri, 15 Jul 2011 12:33:57 -0700">&lt;p&gt;Related documentation here: &lt;a href="http://dev.clojure.org/display/doc/Enhanced+Primitive+Support"&gt;http://dev.clojure.org/display/doc/Enhanced+Primitive+Support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all long-or-smaller integers are boxed as Long&lt;br/&gt;
You can't use primitive coercions to force specific box types&lt;br/&gt;
Your code was broken if you were relying on that&lt;/p&gt;

&lt;p&gt;So, apparently (int) has the correct behavior. It's byte and short which should be also boxed into Longs&lt;/p&gt;</comment>
                    <comment id="26572" author="paraseba" created="Fri, 15 Jul 2011 12:34:24 -0700">&lt;p&gt;See also this topic in clojure-dev: &lt;a href="https://groups.google.com/d/topic/clojure-dev/fXQAYv8s0tQ/discussion"&gt;https://groups.google.com/d/topic/clojure-dev/fXQAYv8s0tQ/discussion&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26573" author="tsdh" created="Fri, 15 Jul 2011 13:00:20 -0700">&lt;p&gt;So to call some Java method that requires an int you have to use Integer/valueOf?&lt;/p&gt;</comment>
                    <comment id="26574" author="paraseba" created="Fri, 15 Jul 2011 13:46:02 -0700">&lt;p&gt;Yes, I think so&lt;/p&gt;</comment>
                    <comment id="26575" author="tsdh" created="Fri, 15 Jul 2011 14:16:11 -0700">&lt;p&gt;But for what are the coercion functions now good for?  I mean, &lt;a href="http://clojure.org/java_interop#Java"&gt;http://clojure.org/java_interop#Java&lt;/a&gt; Interop-Coercions states:&lt;/p&gt;

&lt;p&gt;  "At times it is necessary to have a value of a particular primitive type. These coercion functions yield a value of the indicated type as long as such a coercion is possible: bigdec bigint boolean byte char double float int long num short"&lt;/p&gt;

&lt;p&gt;That's exactly my use case which is not supported anymore.&lt;/p&gt;</comment>
                    <comment id="26576" author="paraseba" created="Fri, 15 Jul 2011 21:09:37 -0700">&lt;p&gt;(int) (char) etc. are not intended to return boxed types, they always return primitive types. If you want boxed types you can use (num). When you do (class (int 42)) you are casting the long 42 to a int and then boxing it into a Long to get its class.&lt;/p&gt;

&lt;p&gt;For short and byte, I don't know, I think there is a bug, (class (short 42)) should be Short.&lt;/p&gt;</comment>
                    <comment id="26577" author="tsdh" created="Sat, 16 Jul 2011 05:13:07 -0700">&lt;p&gt;&lt;cite&gt;(int) (char) etc. are not intended to return boxed types, they always return primitive types.&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Thank you, Sebastián, that made it clear and unveiled the problem at my side.  When I did&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;(set-value! foo :position (int 17))&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I got the exception "java.lang.Long cannot be cast to java.lang.Integer".  set-value! is a protocol function extended on the java types of the java library I'm interacting with.  Eventually, it'll call &lt;tt&gt;(doto foo (.setAttribute "position" (mutable &amp;lt;providedVal&amp;gt;))&lt;/tt&gt;, where mutable is yet another protocol function that converts clojure collections to the libraries counterparts and does nothing for primitive types.&lt;/p&gt;

&lt;p&gt;Now, although (int 17) returns an unboxed int, these two indirections box it into a Long again and the java setter is called with that leading to the error.&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;(set-value! foo :position (Integer/intValue 17))&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;circumvents the issue, because here you directly get an int boxed as Integer.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;If you want boxed types you can use (num).&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Well, I want a boxed value of a certain type, like Integer.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;For short and byte, I don't know, I think there is a bug, (class (short 42)) should be Short.&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Should or should not?  Currently, for all primitive types &amp;lt;primType&amp;gt;, the call &lt;tt&gt;(class (&amp;lt;primType&amp;gt; &amp;lt;val&amp;gt;))&lt;/tt&gt; returns the wrapper class corresponding to &amp;lt;primType&amp;gt; with the exception of int where you get a Long instead of an Integer.  That's totally surprising and caused me to file this bug report.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-809] fn's created using defn should not lexical shadow the var that holds them</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-809</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;currently (defn foo &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt; (foo x)) expands to something like (def foo&lt;br/&gt;
(fn foo &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt; (foo x))) so the fn is bound to foo lexically in the scope&lt;br/&gt;
of the fn body.&lt;/p&gt;

&lt;p&gt;because of this lexical shadowing self calls to fns defined with defn&lt;br/&gt;
do not incur the overhead of var dereferencing, I assume this is the&lt;br/&gt;
reason it was added.&lt;/p&gt;

&lt;p&gt;the lexical shadowing also breaks memoization if you create the&lt;br/&gt;
memoized functions via (alter-var-root #'foo memoize) and several&lt;br/&gt;
macros here and there emit code in this style, since reusing defn is&lt;br/&gt;
the easiest way to get all the good juicy metadata bits like arglists,&lt;br/&gt;
etc.&lt;/p&gt;

&lt;p&gt;1.3 has changes to eliminate some of the cost of going through the var.&lt;/p&gt;

&lt;p&gt;since going through the var is much cheaper now it would be nice to &lt;br/&gt;
eliminate the lexical shadowing.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/33b52b24616967f?hl=en"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/33b52b24616967f?hl=en&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14461">CLJ-809</key>
            <summary>fn's created using defn should not lexical shadow the var that holds them</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hiredman">Kevin Downey</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Jun 2011 12:37:22 -0700</created>
                <updated>Fri, 29 Jul 2011 05:39:50 -0700</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26505" author="hiredman" created="Sat, 11 Jun 2011 12:40:23 -0700">&lt;p&gt;tests indicate that accessing the fn through the var vs. accessing through the lexical binding have very similar access times&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/1013008"&gt;https://gist.github.com/1013008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;results in&lt;/p&gt;

&lt;p&gt;$ java -jar clojure.jar ~/src/lexicaltest.clj&lt;br/&gt;
lexical binding run 0&lt;br/&gt;
"Elapsed time: 86.739 msecs"&lt;br/&gt;
lexical binding run 1&lt;br/&gt;
"Elapsed time: 8.062 msecs"&lt;br/&gt;
lexical binding run 2&lt;br/&gt;
"Elapsed time: 16.182 msecs"&lt;br/&gt;
var binding run 0&lt;br/&gt;
"Elapsed time: 61.136 msecs"&lt;br/&gt;
var binding run 1&lt;br/&gt;
"Elapsed time: 40.317 msecs"&lt;br/&gt;
var binding run 2&lt;br/&gt;
"Elapsed time: 11.641 msecs"&lt;br/&gt;
$&lt;/p&gt;</comment>
                    <comment id="26510" author="jawolfe" created="Mon, 13 Jun 2011 15:05:00 -0700">&lt;p&gt;Here's another test that makes sure no JIT funny business (e.g. dead code elimination) is going on, and also looks at primitive hinted versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/1023816"&gt;https://gist.github.com/1023816&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;var-obj result, time: 14930352 ,"Elapsed time: 965.577 msecs"&lt;br/&gt;
lex-obj result, time: 14930352 ,"Elapsed time: 957.741 msecs"&lt;br/&gt;
var-prim result, time: 14930352 ,"Elapsed time: 770.411 msecs"&lt;br/&gt;
lex-prim result, time: 14930352 ,"Elapsed time: 113.412 msecs"&lt;br/&gt;
nil&lt;/p&gt;

&lt;p&gt;I'm not sure how to properly hint the var in the var-prim version to get truly comparable results.  In any case, this use case should definitely be kept in mind. &lt;/p&gt;</comment>
                    <comment id="26511" author="hiredman" created="Mon, 13 Jun 2011 15:35:15 -0700">&lt;p&gt;I think the point is we want to make sure the jvm can optimize both just as well, so making the code purposefully unoptimizable is kind of silly, yes? &lt;/p&gt;</comment>
                    <comment id="26526" author="jawolfe" created="Tue, 21 Jun 2011 14:41:55 -0700">&lt;p&gt;@Kevin In your gist, the return value of foo is not used, and foo has no side effects.  A sufficiently smart compiler could optimize the calls out entirely, which would not tell us much about the runtime of foo.  &lt;/p&gt;</comment>
                    <comment id="26541" author="aaron" created="Tue, 28 Jun 2011 16:49:28 -0700">&lt;p&gt;Rich: Given the performance testing (in the email thread) what is the next step here?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;more thorough testing&lt;/li&gt;
	&lt;li&gt;patch?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Are there things that this might break that we need to consider?&lt;/p&gt;</comment>
                    <comment id="26667" author="richhickey" created="Fri, 29 Jul 2011 05:39:33 -0700">&lt;p&gt;Someone needs to make a patch, and then test perf with and without the patch. These simulated tests aren't necessarily indicative. Naive fib is an ok test once you have a patch. And yes, more things might break - needs careful assessment.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-807] hash-maps print-dup as literal, thus can be read as array-maps</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-807</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Per Rich in &lt;a href="http://dev.clojure.org/jira/browse/CLJ-799" title="ArrayMaps print-dup with read-eval"&gt;&lt;del&gt;CLJ-799&lt;/del&gt;&lt;/a&gt;: "The point of print-dup is type preservation"&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;user=&amp;gt; (hash-map :k :v)
{:k :v}
user=&amp;gt; (type *1)
clojure.lang.PersistentHashMap
user=&amp;gt; (binding [*print-dup* true] (print-str *2))
"{:k :v}"
user=&amp;gt; (read-string *1)
{:k :v}
user=&amp;gt; (type *1)
clojure.lang.PersistentArrayMap
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cause is due to &lt;tt&gt;RT.map&lt;/tt&gt; conditionally creating an array-map if the size is within the &lt;tt&gt;PersistentArrayMap.HASHTABLE_THRESHOLD&lt;/tt&gt;.&lt;/p&gt;</description>
                <environment/>
            <key id="14455">CLJ-807</key>
            <summary>hash-maps print-dup as literal, thus can be read as array-maps</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Jun 2011 13:14:49 -0700</created>
                <updated>Fri, 29 Jul 2011 05:42:26 -0700</updated>
                                    <version>Release 1.3</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="26540" author="aaron" created="Tue, 28 Jun 2011 16:47:07 -0700">&lt;p&gt;Rich: do you want a patch for this?&lt;/p&gt;</comment>
                    <comment id="26668" author="richhickey" created="Fri, 29 Jul 2011 05:42:01 -0700">&lt;p&gt;Only if it important to someone, solves some problem.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-790] Primitive type hints on function names should print error message</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-790</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Functions returning primitives are hinted with metadata on the argument list, not on the function name.  Using a primitive type hint on a function name should print an error message.&lt;/p&gt;

&lt;p&gt;Currently, misplaced primitive hints are read without error.&lt;/p&gt;</description>
                <environment/>
            <key id="14421">CLJ-790</key>
            <summary>Primitive type hints on function names should print error message</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="alan@thinkrelevance.com">Alan Dipert</assignee>
                                <reporter username="alan@thinkrelevance.com">Alan Dipert</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 May 2011 10:11:37 -0700</created>
                <updated>Tue, 10 May 2011 10:11:37 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-787] transient blows up when passed a vector created by subvec</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-787</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Subvectors created with subvec from a PersistentVector cannot be made transient:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (&lt;span class="code-keyword"&gt;transient&lt;/span&gt; (subvec [1 2 3 4] 2))
ClassCastException clojure.lang.APersistentVector$SubVector cannot be &lt;span class="code-keyword"&gt;cast&lt;/span&gt; to clojure.lang.IEditableCollection  clojure.core/&lt;span class="code-keyword"&gt;transient&lt;/span&gt; (core.clj:2864)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</description>
                <environment/>
            <key id="14413">CLJ-787</key>
            <summary>transient blows up when passed a vector created by subvec</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="aredington">Alexander Redington</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 May 2011 05:23:56 -0700</created>
                <updated>Tue, 31 May 2011 07:28:01 -0700</updated>
                                    <version>Backlog</version>
                                <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26477" author="stuart.sierra" created="Tue, 31 May 2011 07:28:01 -0700">&lt;p&gt;Confirmed. APersistentVector$SubVector does not implement IEditableCollection.&lt;/p&gt;

&lt;p&gt;The current implementation of TransientVector depends on implementation details of PersistentVector, so it is not a trivial fix. The simplest fix might be to implement IEditableCollection.asTransient in SubVector by creating a new PersistentVector, but I do not know the performance implications.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-776] seque broken for some BlockingQueues</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-776</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.core/seque takes an optional argument that can be the initial capacity for a LinkedBlockingQueue or an instance of the BlockingQueue interface.&lt;/p&gt;

&lt;p&gt;PriorityBlockingQueue is such a class, but fails to work because seque makes a few assumptions about BlockingQueues that are not true for all BlockingQueues.&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (def s (seque (java.util.concurrent.PriorityBlockingQueue. 100) (shuffle (range 100))))&lt;br/&gt;
#'user/s&lt;br/&gt;
user=&amp;gt; s&lt;br/&gt;
java.lang.NullPointerException&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (seque (java.util.concurrent.SynchronousQueue.) (shuffle (range 100)))&lt;br/&gt;
&amp;lt;never finishes&amp;gt;&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (seque (java.util.concurrent.ArrayBlockingQueue. 10) (shuffle (range 100)))&lt;br/&gt;
(39 41 27 76 1 24 92 34 72 37 67 99 38 21 5 64 9 26 59 43 82 65 3 11 31 93 50 63 15 90 13 75 40 97 57 88 86 53 19 83 2 12 54 49 71 28 68 73 96 44 8 98 61 6 22 25 78 66 32 84 60 94 70 7 89 4 33 55 74 81 51 56 62 87 69 80 77 20 30 91 52 10 48 18 36 58 47 14 16 42 35 17 95 0 45 85 29 23 46 79)&lt;/p&gt;</description>
                <environment/>
            <key id="14402">CLJ-776</key>
            <summary>seque broken for some BlockingQueues</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pepijndevos">Pepijn de Vos</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Apr 2011 06:33:48 -0700</created>
                <updated>Fri, 22 Apr 2011 07:27:55 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26378" author="pepijndevos" created="Thu, 21 Apr 2011 09:32:12 -0700">&lt;p&gt;A working implementation with some tests.&lt;/p&gt;</comment>
                    <comment id="26381" author="pepijndevos" created="Fri, 22 Apr 2011 07:27:55 -0700">&lt;p&gt;Attachement removed, I'm working on it here: &lt;a href="https://gist.github.com/934781"&gt;https://gist.github.com/934781&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-775] Test clojure.test-clojure.rt fails</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-775</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When I run the &lt;em&gt;mvn test&lt;/em&gt; command against Clojure built from source, I&lt;br/&gt;
encounter the following error in the test &lt;tt&gt;clojure.test-clojure.rt&lt;/tt&gt;,&lt;br/&gt;
which appears to be due to the &lt;tt&gt;bare-rt-print&lt;/tt&gt; function's use of the&lt;br/&gt;
var &lt;tt&gt;clojure.core/print-initialized&lt;/tt&gt;:&lt;/p&gt;

&lt;p&gt;{{Testing clojure.test-clojure.rt&lt;/p&gt;

&lt;p&gt;ERROR in (rt-print-prior-to-print-initialize) (Var.java:339)&lt;br/&gt;
expected: (= "#\"foo\"" (bare-rt-print #"foo"))&lt;br/&gt;
  actual: java.lang.IllegalStateException: Can't dynamically bind non-dynamic var: clojure.core/print-initialized&lt;br/&gt;
 at clojure.lang.Var.pushThreadBindings (Var.java:339)&lt;br/&gt;
    clojure.core$push_thread_bindings.invoke (core.clj:1656)&lt;br/&gt;
    clojure.test_clojure.rt$bare_rt_print$fn__14891.invoke (rt.clj:46)&lt;br/&gt;
    clojure.test_clojure.rt$bare_rt_print.invoke (rt.clj:45)&lt;br/&gt;
    clojure.test_clojure.rt/fn (rt.clj:53)&lt;br/&gt;
    clojure.test$test_var$fn__1762.invoke (test.clj:693)&lt;br/&gt;
    clojure.test$test_var.invoke (test.clj:693)&lt;br/&gt;
    clojure.test$test_all_vars$fn_&lt;em&gt;1766$fn&lt;/em&gt;_1773.invoke (test.clj:709)&lt;br/&gt;
    clojure.test$default_fixture.invoke (test.clj:663)&lt;br/&gt;
    clojure.test$test_all_vars$fn__1766.invoke (test.clj:709)&lt;br/&gt;
    clojure.test$default_fixture.invoke (test.clj:663)&lt;br/&gt;
    clojure.test$test_all_vars.invoke (test.clj:705)&lt;br/&gt;
    clojure.test$test_ns.invoke (test.clj:728)&lt;br/&gt;
    clojure.core$map$fn__2231.invoke (core.clj:2371)&lt;br/&gt;
    clojure.lang.LazySeq.sval (LazySeq.java:42)&lt;br/&gt;
    clojure.lang.LazySeq.seq (LazySeq.java:60)&lt;br/&gt;
    clojure.lang.ChunkedCons.chunkedNext (ChunkedCons.java:59)&lt;br/&gt;
    clojure.core$chunk_next.invoke (core.clj:643)&lt;br/&gt;
    clojure.core$reException in thread "main" java.lang.IllegalStateException: Pop without matching push&lt;br/&gt;
    at clojure.lang.Var.popThreadBindings(Var.java:350)&lt;br/&gt;
    at clojure.core$pop_thread_bindings.invoke(core.clj:1658)&lt;br/&gt;
    at clojure.main$script_opt.invoke(main.clj:338)&lt;br/&gt;
    at clojure.main$main.doInvoke(main.clj:426)&lt;br/&gt;
    at clojure.lang.RestFn.invoke(RestFn.java:408)&lt;br/&gt;
    at clojure.lang.Var.invoke(Var.java:401)&lt;br/&gt;
    at clojure.lang.AFn.applyToHelper(AFn.java:161)&lt;br/&gt;
    at clojure.lang.Var.applyTo(Var.java:518)&lt;br/&gt;
    at clojure.main.main(main.java:37)&lt;br/&gt;
duce1.invoke (core.clj:878)&lt;br/&gt;
    clojure.core$reduce1.invoke (core.clj:870)&lt;br/&gt;
    clojure.core$merge_with.doInvoke (core.clj:2588)&lt;br/&gt;
    clojure.lang.RestFn.applyTo (RestFn.java:139)&lt;br/&gt;
    clojure.core$apply.invoke (core.clj:602)&lt;br/&gt;
    clojure.test$run_tests.doInvoke (test.clj:743)&lt;br/&gt;
    clojure.lang.RestFn.applyTo (RestFn.java:137)&lt;br/&gt;
    clojure.core$apply.invoke (core.clj:600)&lt;br/&gt;
    clojure.test_clojure$eval19718.invoke (run_tests.clj:58)&lt;br/&gt;
    clojure.lang.Compiler.eval (Compiler.java:6328)&lt;br/&gt;
    clojure.lang.Compiler.load (Compiler.java:6765)&lt;br/&gt;
    clojure.lang.Compiler.loadFile (Compiler.java:6726)&lt;br/&gt;
    clojure.main$load_script.invoke (main.clj:282)&lt;br/&gt;
    clojure.main$script_opt.invoke (main.clj:342)&lt;br/&gt;
    clojure.main$main.doInvoke (main.clj:426)&lt;br/&gt;
    clojure.lang.RestFn.invoke (RestFn.java:408)&lt;br/&gt;
    clojure.lang.Var.invoke (Var.java:401)&lt;br/&gt;
    clojure.lang.AFn.applyToHelper (AFn.java:161)&lt;br/&gt;
    clojure.lang.Var.applyTo (Var.java:518)&lt;br/&gt;
    clojure.main.main (main.java:37)}}&lt;/p&gt;</description>
                <environment>Windows XP, Cygwin, with Clojure built against the tip of the published &amp;quot;clojure/clojure&amp;quot; repository on GitHub</environment>
            <key id="14401">CLJ-775</key>
            <summary>Test clojure.test-clojure.rt fails</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="seh">Steven E. Harris</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Apr 2011 15:45:22 -0700</created>
                <updated>Fri, 24 Feb 2012 11:15:51 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27842" author="jafingerhut" created="Fri, 24 Feb 2012 11:02:42 -0800">&lt;p&gt;With latest Clojure master as of Feb 24, 2012, and with "git checkout 1.3.x" in a Clojure tree, "mvn test" builds and passes all tests for me on a Windows XP system with Cygwin, Java 1.7.0, and Maven 3.0.4.  Similarly on Mac OS X 10.6.8 with Java 1.6.0_29 and Maven 3.0.3.&lt;/p&gt;

&lt;p&gt;This may have been fixed already in 1.3.0, but it would be good for Steven to confirm.&lt;/p&gt;</comment>
                    <comment id="27843" author="jafingerhut" created="Fri, 24 Feb 2012 11:03:22 -0800">&lt;p&gt;Sorry, I should have said Windows Vista, but everything else applies.&lt;/p&gt;</comment>
                    <comment id="27844" author="seh" created="Fri, 24 Feb 2012 11:15:51 -0800">&lt;p&gt;I'm ecstatic to report that at present, I don't have access to a computer running Windows with Cygwin, so I can't help verify the fix at present.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-766] Implicit casting behaviour of into-array differs from &lt;primitive&gt;-array</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-766</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Example:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;base64v3a=&amp;gt; (into-array Byte/TYPE [1 2 3 4])
#&amp;lt;byte[] [B@5ee04fd&amp;gt;
base64v3a=&amp;gt; (byte-array [1 2 3 4])
ClassCastException java.lang.Long cannot be cast to java.lang.Byte
  clojure.lang.Numbers.byte_array (Numbers.java:1418)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While into-array (via RT.seqToTypedArray) casts each element prior to inserting into the array, byte-array (via Numbers.byte_array) does an unchecked cast to Byte.&lt;/p&gt;
</description>
                <environment/>
            <key id="14390">CLJ-766</key>
            <summary>Implicit casting behaviour of into-array differs from &lt;primitive&gt;-array</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Apr 2011 16:45:53 -0700</created>
                <updated>Fri, 22 Apr 2011 09:42:49 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26342" author="ataggart" created="Sat, 2 Apr 2011 12:04:31 -0700">&lt;p&gt;See &lt;a href="http://dev.clojure.org/jira/browse/CLJ-678" title="into-array should work with all primitive types"&gt;&lt;del&gt;CLJ-678&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-764] (partition 0 seq) and (parition-all 0 seq) are infinite sequences of empty sequences</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-764</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;(partition n seq) and (partition-all n seq) are implemented by taking n and dropping n from seq.  When n=0 this becomes an infinite sequence of empty sequences.&lt;/p&gt;

&lt;p&gt;While conceptionally this makes sense, I think practically it may surprise people, and perhaps it should return an empty sequence or a sequence of a single empty sequence.&lt;/p&gt;</description>
                <environment/>
            <key id="14380">CLJ-764</key>
            <summary>(partition 0 seq) and (parition-all 0 seq) are infinite sequences of empty sequences</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pjstadig">Paul Stadig</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Mar 2011 07:20:57 -0700</created>
                <updated>Sun, 26 Feb 2012 08:16:03 -0800</updated>
                                    <version>Release 1.1</version>
                <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26324" author="pjstadig" created="Mon, 21 Mar 2011 07:22:32 -0700">&lt;p&gt;Ugh!  I didn't mean for this to be major priority, and I can't seem to edit it after the fact.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-761] print-dup generates call to nonexistent method for APersistentVector$SubVector</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-761</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Originally reported by &lt;a href="https://groups.google.com/d/topic/clojure/0JYeIgzAwsQ/discussion"&gt;Carson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;print-dup&lt;/tt&gt; on any collection type generates code to call the &lt;tt&gt;create&lt;/tt&gt; method of the collection's class.  &lt;tt&gt;APersistentVector$SubVector&lt;/tt&gt; has no &lt;tt&gt;create&lt;/tt&gt; method.&lt;/p&gt;

&lt;p&gt;Example with Clojure at commit ecae8ff08a298777c365a261001adfe9bfa4d83c :&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Clojure 1.3.0-master-SNAPSHOT
user=&amp;gt; (read-string (binding [*print-dup* &lt;span class="code-keyword"&gt;true&lt;/span&gt;] (pr-str (subvec [1 2 3] 1))))
IllegalArgumentException No matching method found: create  clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:50)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="14377">CLJ-761</key>
            <summary>print-dup generates call to nonexistent method for APersistentVector$SubVector</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stuart.sierra">Stuart Sierra</reporter>
                        <labels>
                    </labels>
                <created>Sat, 19 Mar 2011 06:36:57 -0700</created>
                <updated>Fri, 4 Nov 2011 09:31:09 -0700</updated>
                                    <version>Backlog</version>
                                <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27193" author="hiredman" created="Fri, 4 Nov 2011 09:29:27 -0700">&lt;p&gt;33.927         hiredman   ,(binding &lt;span class="error"&gt;&amp;#91;*print-dup* true&amp;#93;&lt;/span&gt; (pr-str (first {:a 1})))&lt;br/&gt;
 33.928  clojurebot   "#=(clojure.lang.MapEntry/create &lt;span class="error"&gt;&amp;#91;:a 1&amp;#93;&lt;/span&gt;)"&lt;br/&gt;
 33.938         hiredman   yeah, well, I was busy&lt;br/&gt;
 33.941  chouser   heh&lt;br/&gt;
 33.949         hiredman   ,(clojure.lang.MapEntry/create &lt;span class="error"&gt;&amp;#91;:a 1&amp;#93;&lt;/span&gt;)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-760] ClassNotFound when AOT compiling a self-referring deftype extended to a protocol</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-760</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If I create a deftype that refers to itself in a protocol extension like below:&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(ns type-test)

(defprotocol Foo
  (isa-foo [x]))

(deftype TypeTest []
  Foo
  (isa-foo [x]
           (instance? TypeTest x)))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And use that code via another namespace:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(ns test-type-user
  (:use [type-test :only (isa-foo)])
  (:import [type-test TypeTest]))

(isa-foo (TypeTest.))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I try to AOT compile the test-type-user namespace with Clojure 1.2.0, I get &lt;em&gt;java.lang.NoClassDefFoundError: compile&lt;/em&gt;&lt;em&gt;stub/type-test/TypeTest (test_type_user.clj:5)&lt;/em&gt;.  Full stack trace attached.  Running the same code on 1.2.1 and 1.3.0-alpha6 yielded the same exception with a slightly different error message (stacktrace for 1.2.1 is also in the attached file).&lt;/p&gt;

&lt;p&gt;This came up in a test at Revelytix.  We worked around this issue by not using &lt;em&gt;instance?&lt;/em&gt; and instead comparing based on class name.  Another workaround is to define the deftype and the extension separately (using extend-type or something similar).  This problem also doesn't occur if the usage of the deftype and the definition of it are in the same namespace (i.e. if &lt;em&gt;type-test&lt;/em&gt; and &lt;em&gt;test-type-user&lt;/em&gt; were in the same file).&lt;/p&gt;
</description>
                <environment>Clojure 1.2.0, 1.2.1, 1.3.0-alpha6, JDK 1.6.0_24, Ubuntu 10.10</environment>
            <key id="14376">CLJ-760</key>
            <summary>ClassNotFound when AOT compiling a self-referring deftype extended to a protocol</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ryansenior">Ryan Senior</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Mar 2011 07:06:37 -0700</created>
                <updated>Fri, 18 Mar 2011 08:27:46 -0700</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26312" author="alexmiller" created="Fri, 18 Mar 2011 08:27:46 -0700">&lt;p&gt;The first case where we saw this was actually in having a deftype implement a Java interface (not a protocol) and in that case you cannot extend the interface outside the deftype (although comparing based on class name of course works).  &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10153" name="stacktraces.txt" size="4744" author="ryansenior" created="Fri, 18 Mar 2011 07:06:37 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-750] clojure.lang.MapEntry violates .equals and .hashCode contracts of HashMap.Entry; leads to non-reflexive .equals, etc.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-750</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;user&amp;gt; (let &lt;span class="error"&gt;&amp;#91;h (HashMap.)&amp;#93;&lt;/span&gt; &lt;br/&gt;
       (.put h 1 2) &lt;br/&gt;
       (let [p1 (first h) &lt;br/&gt;
             p2 (first {1 2})] &lt;br/&gt;
        (println (.hashCode p1) (.hashCode p2) &lt;br/&gt;
                 (= p1 p2) (= p2 p1) &lt;br/&gt;
                 (.equals p1 p2) (.equals p2 p1))))&lt;/p&gt;

&lt;p&gt;3 994 false false true false&lt;/p&gt;

&lt;p&gt;clojure.lang.MapEntry does not follow the contracts of hashCode or equals for java.util.Map$Entry.  This, among other things, leads to the above non-reflexive behavior of .equals.  &lt;/p&gt;

&lt;p&gt;I realize this isn't a simple bug; it's a fundamental issue, in that it's impossible to consistently implement both java.util.List and java.util.Map$Entry, which clojure.lang.MapEntry claims to do.  On balance I do find it very useful that Clojure map entries are equivalent to vectors, and probably wouldn't want to give that up.  But, I think that at minimum this wart should be documented somewhere, since it could lead to some very strange and hard to catch bugs.  &lt;/p&gt;</description>
                <environment/>
            <key id="14365">CLJ-750</key>
            <summary>clojure.lang.MapEntry violates .equals and .hashCode contracts of HashMap.Entry; leads to non-reflexive .equals, etc.</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jawolfe">Jason Wolfe</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Mar 2011 20:04:41 -0800</created>
                <updated>Fri, 29 Jul 2011 05:45:40 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26259" author="jawolfe" created="Wed, 2 Mar 2011 20:13:33 -0800">&lt;p&gt;This might be fixable by changing seq to promise a sequence of pairs rather than MapEntries.  I don't know enough about Clojure internals to know if this would entail too large a performance hit, but perhaps it's worth considering.&lt;/p&gt;</comment>
                    <comment id="26273" author="stu" created="Fri, 4 Mar 2011 19:11:41 -0800">&lt;p&gt;Rich: is there a doc patch you would want for this?&lt;/p&gt;</comment>
                    <comment id="26670" author="richhickey" created="Fri, 29 Jul 2011 05:45:39 -0700">&lt;p&gt;doc patch ok&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-740] Unnecessary boxing of primitives in case form</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-740</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Found this while profiling some performance-critical code.&lt;/p&gt;

&lt;p&gt;Consider the following Clojure function:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defn test-&lt;span class="code-keyword"&gt;case&lt;/span&gt; ^&lt;span class="code-object"&gt;double&lt;/span&gt; [^&lt;span class="code-object"&gt;long&lt;/span&gt; i ^&lt;span class="code-object"&gt;double&lt;/span&gt; d1 ^&lt;span class="code-object"&gt;double&lt;/span&gt; d2]
  (&lt;span class="code-keyword"&gt;case&lt;/span&gt; (&lt;span class="code-object"&gt;int&lt;/span&gt; i)
    0 d1
    d2))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Current Clojure 1.3 snapshot compiles it to:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;&lt;span class="code-keyword"&gt;public&lt;/span&gt; &lt;span class="code-keyword"&gt;final&lt;/span&gt; &lt;span class="code-object"&gt;double&lt;/span&gt; invokePrim(&lt;span class="code-object"&gt;long&lt;/span&gt;, &lt;span class="code-object"&gt;double&lt;/span&gt;, &lt;span class="code-object"&gt;double&lt;/span&gt;)   &lt;span class="code-keyword"&gt;throws&lt;/span&gt; java.lang.Exception;
  Code:
   0:	lload_1
   1:	invokestatic	#67; &lt;span class="code-comment"&gt;//Method clojure/lang/RT.intCast:(J)I
&lt;/span&gt;   4:	istore	7
   6:	iload	7
   8:	i2l
   9:	invokestatic	#73; &lt;span class="code-comment"&gt;//Method clojure/lang/Numbers.num:(J)Ljava/lang/&lt;span class="code-object"&gt;Number&lt;/span&gt;;
&lt;/span&gt;   12:	invokestatic	#79; &lt;span class="code-comment"&gt;//Method clojure/lang/Util.hash:(Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)I
&lt;/span&gt;   15:	iconst_0
   16:	ishr
   17:	iconst_1
   18:	iand
   19:	tableswitch{ &lt;span class="code-comment"&gt;//0 to 0
&lt;/span&gt;		0: 36;
		&lt;span class="code-keyword"&gt;default&lt;/span&gt;: 58 }
   36:	iload	7
   38:	i2l
   39:	invokestatic	#73; &lt;span class="code-comment"&gt;//Method clojure/lang/Numbers.num:(J)Ljava/lang/&lt;span class="code-object"&gt;Number&lt;/span&gt;;
&lt;/span&gt;   42:	getstatic	#45; &lt;span class="code-comment"&gt;//Field const__3:Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;
&lt;/span&gt;   45:	invokestatic	#83; &lt;span class="code-comment"&gt;//Method clojure/lang/Util.equals:(Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)Z
&lt;/span&gt;   48:	ifeq	58
   51:	dload_3
   52:	invokestatic	#88; &lt;span class="code-comment"&gt;//Method java/lang/&lt;span class="code-object"&gt;Double&lt;/span&gt;.valueOf:(D)Ljava/lang/&lt;span class="code-object"&gt;Double&lt;/span&gt;;
&lt;/span&gt;   55:	&lt;span class="code-keyword"&gt;goto&lt;/span&gt;	63
   58:	dload	5
   60:	invokestatic	#88; &lt;span class="code-comment"&gt;//Method java/lang/&lt;span class="code-object"&gt;Double&lt;/span&gt;.valueOf:(D)Ljava/lang/&lt;span class="code-object"&gt;Double&lt;/span&gt;;
&lt;/span&gt;   63:	checkcast	#92; &lt;span class="code-comment"&gt;//class java/lang/&lt;span class="code-object"&gt;Number&lt;/span&gt;
&lt;/span&gt;   66:	invokevirtual	#96; &lt;span class="code-comment"&gt;//Method java/lang/&lt;span class="code-object"&gt;Number&lt;/span&gt;.doubleValue:()D
&lt;/span&gt;   69:	dreturn
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This bytecode contains boxing of primitives (calls to clojure/lang/Numbers.num and java/lang/Double.valueOf) and calls to clojure/lang/Util.hash and clojure/lang/Util.equals that does not seem necessary.&lt;/p&gt;

&lt;p&gt;At 60-66 primitive double is boxed into Double only to be converted back into primitive.&lt;/p&gt;

&lt;p&gt;The equivalent Java code compiles to much simpler and faster bytecode:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;&lt;span class="code-keyword"&gt;public&lt;/span&gt; &lt;span class="code-object"&gt;double&lt;/span&gt; testCase(&lt;span class="code-object"&gt;long&lt;/span&gt;, &lt;span class="code-object"&gt;double&lt;/span&gt;, &lt;span class="code-object"&gt;double&lt;/span&gt;);
  Code:
   0:	lload_1
   1:	l2i
   2:	lookupswitch{ &lt;span class="code-comment"&gt;//1
&lt;/span&gt;		0: 20;
		&lt;span class="code-keyword"&gt;default&lt;/span&gt;: 22 }
   20:	dload_3
   21:	dreturn
   22:	dload	5
   24:	dreturn
}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="14354">CLJ-740</key>
            <summary>Unnecessary boxing of primitives in case form</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="kryshen">Mikhail Kryshen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Feb 2011 00:49:45 -0800</created>
                <updated>Tue, 1 Mar 2011 00:51:43 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26250" author="ataggart" created="Mon, 28 Feb 2011 12:16:07 -0800">&lt;p&gt;Improved via patch on &lt;a href="http://dev.clojure.org/jira/browse/CLJ-426" title="case should handle hash collision"&gt;&lt;del&gt;CLJ-426&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn test-case ^double [^long i ^double d1 ^double d2]
  (case (int i)
    0 d1
    d2))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now emits as&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt; 0  lload_1 [i]
 1  invokestatic clojure.lang.RT.intCast(long) : int [67]
 4  istore 7 [G__7903] // let-bound expression
 6  iload 7 [G__7903]
 8  tableswitch default: 32
      case 0: 28
28  dload_3 [d2]
29  goto 34
32  dload 5 [arg2]
34  dreturn
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if the int cast of the expression is omitted:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt; 0  lload_1 [i]
 1  lstore 7 [G__7903] // let-bound expression
 3  lload 7 [G__7903]
 5  l2i
 6  tableswitch default: 35
      case 0: 24
24  lconst_0           // match, verify long expr wasn't truncated
25  lload 7 [G__7903]
27  lcmp
28  ifne 35
31  dload_3 [d2]
32  goto 37
35  dload 5 [arg2]
37  dreturn
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-731] Create macro to variadically unroll a combinator function definition</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-731</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Clojure contains a set of combinators that are implemented in a similar, but slightly different way.  That is, they are implemented as a complete set of variadic overloads on both the call-side and also on the functions that they return.  Visually, they all tend to look something like:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn foo
  ([f]
     (fn
       ([] do stuff...)
       ([x] do stuff...)
       ([x y] do stuff...)
       ([x y z] do stuff...)
       ([x y z &amp;amp; args] do variadic stuff...)))
  ([f1 f2]
     (fn
       ([] do stuff...)
       ([x] do stuff...)
       ([x y] do stuff...)
       ([x y z] do stuff...)
       ([x y z &amp;amp; args] do variadic stuff...)))
  ([f1 f2 f3]
     (fn
       ([] do stuff...)
       ([x] do stuff...)
       ([x y] do stuff...)
       ([x y z] do stuff...)
       ([x y z &amp;amp; args] do variadic stuff...)))
  ([f1 f2 f3 &amp;amp; fs]
     (fn
       ([] do stuff...)
       ([x] do stuff...)
       ([x y] do stuff...)
       ([x y z] do stuff...)
       ([x y z &amp;amp; args] do variadic stuff...))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To build this type of function for each combinator is tedious and error-prone.&lt;/p&gt;

&lt;p&gt;There must be a way to implement a macro that takes a "specification" of a combinator including:&lt;/p&gt;

&lt;p&gt;1. name&lt;br/&gt;
2. docstring&lt;br/&gt;
3. do stuff template&lt;br/&gt;
4. do variadic stuff template&lt;/p&gt;

&lt;p&gt;And builds something like the function &lt;tt&gt;foo&lt;/tt&gt; above.  This macro should be able to implement the current batch of combinators (assuming that &lt;a href="http://dev.clojure.org/jira/browse/CLJ-730"&gt;http://dev.clojure.org/jira/browse/CLJ-730&lt;/a&gt; is completed first for the sake of verification).&lt;/p&gt;</description>
                <environment/>
            <key id="14344">CLJ-731</key>
            <summary>Create macro to variadically unroll a combinator function definition</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="fogus">Fogus</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 Jan 2011 10:00:01 -0800</created>
                <updated>Fri, 28 Jan 2011 07:40:05 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26181" author="stu" created="Fri, 28 Jan 2011 07:03:46 -0800">&lt;p&gt;This seems useful. Rich, would you accept a patch?&lt;/p&gt;</comment>
                    <comment id="26185" author="stu" created="Fri, 28 Jan 2011 07:40:05 -0800">&lt;p&gt;Nevermind, just saw that Rich already suggested this on the dev list. Patch away.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-721] A record? predicate would complement defrecord</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-721</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;To improve Midje checkers/assertions, it'd be useful if we could ask an object if it were a-maplike-object-due-to-defrecord, rather than just ask it #'map?&lt;/p&gt;</description>
                <environment/>
            <key id="14334">CLJ-721</key>
            <summary>A record? predicate would complement defrecord</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="marick">Brian Marick</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Jan 2011 18:11:08 -0800</created>
                <updated>Wed, 19 Jan 2011 19:03:47 -0800</updated>
                                    <version>Backlog</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="26143" author="alexmiller" created="Wed, 19 Jan 2011 18:59:47 -0800">&lt;p&gt;I have also run into the need to do this when implementing multimethods where records were treated in a specific way (for printing for example).  &lt;/p&gt;

&lt;p&gt;We wrapped defmacro to install a multimethod implementation of a record? function at record definition time but that's not a generic solution.&lt;/p&gt;

&lt;p&gt;I imagine it would be easy for defrecord to construct a class that implements a marker IRecord interface that is checked by a record? predicate.  &lt;/p&gt;</comment>
                    <comment id="26144" author="alexmiller" created="Wed, 19 Jan 2011 19:03:47 -0800">&lt;p&gt;In searching I noticed there is already a &lt;a href="http://dev.clojure.org/jira/browse/CLJ-394" title="Add marker Interfaces for defrecords and deftypes plus boolean test fns"&gt;CLJ-394&lt;/a&gt; which contains this (plus request for a marker on deftype).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-713] Upgrade ASM to a more current version</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-713</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;ul&gt;
	&lt;li&gt;Move to the latest ASM (currently 3.3.1)&lt;/li&gt;
	&lt;li&gt;No longer subset-ed&lt;/li&gt;
	&lt;li&gt;Still re-rooted it under clojure.asm&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="14322">CLJ-713</key>
            <summary>Upgrade ASM to a more current version</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="aaron">Aaron Bedra</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Jan 2011 20:47:00 -0800</created>
                <updated>Fri, 9 Dec 2011 08:06:10 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-706] make use of deprecated namespaces/vars easier to spot</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-706</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;From the mailing list &lt;a href="http://groups.google.com/group/clojure/msg/c41d909bd58e4534"&gt;http://groups.google.com/group/clojure/msg/c41d909bd58e4534&lt;/a&gt;. It is easy to use deprecated namespaces without knowing you are doing so. The documentation warnings are small, and there is no compiler warning.&lt;/p&gt;

&lt;p&gt;Some possibilities include:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;much more visible deprecation styling in the documentation&lt;/li&gt;
	&lt;li&gt;stderr warnings when referencing a deprecated thing.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I don't love the idea of stderr warnings on all the time. Rich: is there an approach to this that you would like to see a patch for?&lt;/p&gt;</description>
                <environment/>
            <key id="14315">CLJ-706</key>
            <summary>make use of deprecated namespaces/vars easier to spot</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stu">Stuart Halloway</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jan 2011 18:39:01 -0800</created>
                <updated>Fri, 7 Jan 2011 07:38:32 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26099" author="richhickey" created="Fri, 7 Jan 2011 07:38:32 -0800">&lt;p&gt;I don't mind warning to stderr&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-705] Make sorted maps and sets implement j.u.SortedMap and SortedSet interfaces</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-705</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description/>
                <environment/>
            <key id="14314">CLJ-705</key>
            <summary>Make sorted maps and sets implement j.u.SortedMap and SortedSet interfaces</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="richhickey">Rich Hickey</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jan 2011 10:53:42 -0800</created>
                <updated>Wed, 5 Jan 2011 10:53:42 -0800</updated>
                                                                            <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-704] range function has missing documentation</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-704</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The range function's documentation does indicate the following usage:&lt;/p&gt;

&lt;p&gt;(range 10 0 -1) -&amp;gt; (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)&lt;/p&gt;

&lt;p&gt;Current doc:&lt;/p&gt;

&lt;p&gt;Returns a lazy seq of nums from start (inclusive) to end&lt;br/&gt;
(exclusive), by step, where start defaults to 0, step to 1, and end&lt;br/&gt;
to infinity.&lt;/p&gt;

&lt;p&gt;Suggestion:&lt;/p&gt;

&lt;p&gt;Returns a lazy seq of nums from start (inclusive) to end&lt;br/&gt;
(exclusive), by step, where start defaults to 0, step to 1, and end&lt;br/&gt;
to infinity.&lt;/p&gt;

&lt;p&gt;Its also possible to step down rather than up, for example counting&lt;br/&gt;
backwards from 10 by -1: (range 10 0 -1).  &lt;/p&gt;</description>
                <environment>All</environment>
            <key id="14313">CLJ-704</key>
            <summary>range function has missing documentation</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mrhus">Maarten Hus</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Jan 2011 17:32:56 -0800</created>
                <updated>Sat, 15 Jan 2011 05:39:05 -0800</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26134" author="raek" created="Sat, 15 Jan 2011 05:39:05 -0800">&lt;p&gt;The current doc actually mentions the 'step' parameter briefly:&lt;/p&gt;

&lt;p&gt;"&lt;span class="error"&gt;&amp;#91;...&amp;#93;&lt;/span&gt; to end (exclusive), by &lt;b&gt;step&lt;/b&gt;, where start &lt;span class="error"&gt;&amp;#91;...&amp;#93;&lt;/span&gt;"&lt;/p&gt;

&lt;p&gt;But as this might be easy to miss, an addition to the doc is still a good idea, I think.&lt;/p&gt;

&lt;p&gt;My suggestion:&lt;/p&gt;

&lt;p&gt;Returns a lazy seq of nums from start (inclusive) to end&lt;br/&gt;
(exclusive), by step, where start defaults to 0, step to 1, and end&lt;br/&gt;
to infinity. &lt;b&gt;Step may be negative to count backwards.&lt;/b&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-703] Improve writeClassFile performance</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-703</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/be0c45b3a4f3d46/36337ac7260d7d0a?lnk=gst&amp;amp;q=writeclassfile#36337ac7260d7d0a"&gt;Discussion&lt;/a&gt; about timing issues when writing class files led to the the current implementation of synchronous writes to disk. This leads to bad performance/system-load when compiling Clojure code.&lt;/p&gt;

&lt;p&gt;This &lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/23213b787d3ec60f#"&gt;Discussion&lt;/a&gt; questioned the current implentation.&lt;/p&gt;

&lt;p&gt;Synchronous writes are not necessary and also do not ensure (crash while calling write) valid classfiles.&lt;/p&gt;

&lt;p&gt;These Patches (0001 is just a code cleanup for creating the directory structure) ensures atomic creation of classfiles by using File.renameTo()&lt;/p&gt;




</description>
                <environment/>
            <key id="14312">CLJ-703</key>
            <summary>Improve writeClassFile performance</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="juergenhoetzel">Jürgen Hötzel</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Jan 2011 10:58:38 -0800</created>
                <updated>Wed, 19 Jan 2011 12:05:21 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="26140" author="djpowell" created="Mon, 17 Jan 2011 12:16:19 -0800">
&lt;p&gt;Removing sync makes clojure build much faster.  I wonder why it was added in the first place?  I guess only Rich knows?  I assume that it is not necessary.&lt;/p&gt;

&lt;p&gt;If we are removing sync though, I wouldn't bother with the atomic rename stuff.  Doing that sort of thing can cause problems on some platforms, eg with search indexers and virus checkers momentarily locking files after they are created.  &lt;/p&gt;

&lt;p&gt;The patch seems to be assuming that sync is there for some reason, but my initial assumption would be that sync isn't necessary - perhaps it was working around some issue that no longer exists?&lt;/p&gt;
</comment>
                    <comment id="26142" author="juergenhoetzel" created="Wed, 19 Jan 2011 12:05:21 -0800">&lt;p&gt;Although its unlikely: there is a possible race condition "loading a paritally written classfile"?:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/RT.java#L393"&gt;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/RT.java#L393&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10066" name="0001-use-File.mkdirs-instead-of-mkdir-every-single-direct.patch" size="1224" author="juergenhoetzel" created="Tue, 4 Jan 2011 10:58:38 -0800"/>
                    <attachment id="10067" name="0002-Ensure-atomic-creation-of-class-files-by-renaming-a-.patch" size="1442" author="juergenhoetzel" created="Tue, 4 Jan 2011 10:58:38 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10009">Fixed</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-701] Compiler loses 'loop's return type in some cases</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-701</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(set! *warn-on-reflection* &lt;span class="code-keyword"&gt;true&lt;/span&gt;)
(fn [] (loop [b 0] (recur (loop [a 1] a))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generates the following warnings:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;recur arg for primitive local: b is not matching primitive, had: Object, needed: long
Auto-boxing loop arg: b
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is interesting for several reasons.  For one, if the arg to &lt;tt&gt;recur&lt;/tt&gt; is a &lt;tt&gt;let&lt;/tt&gt; form, there is no warning:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(fn [] (loop [b 0] (recur (let [a 1] a))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, the compiler appears to understand the return type of &lt;tt&gt;loop&lt;/tt&gt; forms just fine:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(use '[clojure.contrib.repl-utils :only [expression-info]])
(expression-info '(loop [a 1] a))
;=&amp;gt; {:class &lt;span class="code-object"&gt;long&lt;/span&gt;, :primitive? &lt;span class="code-keyword"&gt;true&lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem can of course be worked around using an explicit cast on the &lt;tt&gt;loop&lt;/tt&gt; form:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(fn [] (loop [b 0] (recur (&lt;span class="code-object"&gt;long&lt;/span&gt; (loop [a 1] a)))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reported by leafw in IRC: &lt;a href="http://clojure-log.n01se.net/date/2011-01-03.html#10:31"&gt;http://clojure-log.n01se.net/date/2011-01-03.html#10:31&lt;/a&gt;&lt;/p&gt;</description>
                <environment>Clojure commit 9052ca1854b7b6202dba21fe2a45183a4534c501, version 1.3.0-master-SNAPSHOT</environment>
            <key id="14310">CLJ-701</key>
            <summary>Compiler loses 'loop's return type in some cases</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chouser@n01se.net">Chouser</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Jan 2011 08:56:07 -0800</created>
                <updated>Fri, 22 Apr 2011 07:51:48 -0700</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26081" author="a_strange_guy" created="Mon, 3 Jan 2011 14:36:27 -0800">&lt;p&gt;The problem is that a 'loop form gets converted into an anonymous fn that gets called immediately, when the loop is in a expression context (eg. its return value is needed, but not as the return value of a method/fn).&lt;/p&gt;

&lt;p&gt;so&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(fn [] (loop [b 0] (recur (loop [a 1] a))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;gets converted into&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(fn [] (loop [b 0] (recur ((fn [] (loop [a 1] a))))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;see the code in the compiler:&lt;br/&gt;
&lt;a href="http://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L5572"&gt;http://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L5572&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;this conversion already bites you if you have mutable fields in a deftype and want to 'set! them in a loop&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-274"&gt;http://dev.clojure.org/jira/browse/CLJ-274&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-699] make sure compile paths shares as much code as possible</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-699</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Issue &lt;a href="http://dev.clojure.org/jira/browse/CLJ-697"&gt;http://dev.clojure.org/jira/browse/CLJ-697&lt;/a&gt; highlighted the fact that compilation has more than one entry point. Review these entry points and make them share code.&lt;/p&gt;</description>
                <environment/>
            <key id="14308">CLJ-699</key>
            <summary>make sure compile paths shares as much code as possible</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stu">Stuart Halloway</reporter>
                        <labels>
                    </labels>
                <created>Fri, 31 Dec 2010 14:01:39 -0800</created>
                <updated>Fri, 31 Dec 2010 14:01:39 -0800</updated>
                                    <version>Release 1.2</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-698] class accessible from deftype method bodies is not suitable for instance?, ...</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-698</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Example interaction: &lt;a href="http://pastebin.com/cTdUCKfp"&gt;http://pastebin.com/cTdUCKfp&lt;/a&gt;&lt;br/&gt;
Which directly contradicts documentation for deftype&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In the method bodies, the (unqualified) name can be used to name the class (for calls to new, instance? etc).&lt;/p&gt;&lt;/blockquote&gt;</description>
                <environment/>
            <key id="14307">CLJ-698</key>
            <summary>class accessible from deftype method bodies is not suitable for instance?, ...</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bendlas">Herwig Hochleitner</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Dec 2010 07:38:07 -0800</created>
                <updated>Wed, 29 Dec 2010 10:45:45 -0800</updated>
                                    <version>Release 1.2</version>
                                <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="26067" author="stu" created="Wed, 29 Dec 2010 10:45:45 -0800">&lt;p&gt;The problem occurs in 1.2 but is fixed on master. Leaving in backlog in case we ever cut another 1.2 release--if not, then mark as fixed.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-696] SCA FAQ link is broken</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-696</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The link to the SCA FAQ on the clojure.org/contributing page returns a "document not found" error. Anyone who's watch what Oracle has done with Solaris will certainly have questions it might answer.&lt;/p&gt;</description>
                <environment/>
            <key id="14305">CLJ-696</key>
            <summary>SCA FAQ link is broken</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mwm">Mike Meyer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Dec 2010 12:47:06 -0800</created>
                <updated>Fri, 28 Jan 2011 08:44:19 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26069" author="trptcolin" created="Fri, 31 Dec 2010 10:36:33 -0800">&lt;p&gt;Looks like this has now been fixed by swapping in the Oracle Contributor Agreement.&lt;/p&gt;</comment>
                    <comment id="26190" author="aaron" created="Fri, 28 Jan 2011 08:44:09 -0800">&lt;p&gt;Agreed.  Rich can we close this?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>richhickey</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-669] clojure.java.io/do-copy: use java.nio  for Files</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-669</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;NIO Channels reduce CPU/Disk load when copying Files (by using&lt;br/&gt;
syscalls like sendfile internally on Linux/Solaris).&lt;/p&gt;

&lt;p&gt;CPU-Load goes from 100% to 0% on my system when copying large files, because no userspace-copying is involved:&lt;/p&gt;

&lt;p&gt;Patch: &lt;a href="http://github.com/juergenhoetzel/clojure/commit/2b5ab103cbcfe6c49236ac6966c032d3c922233d"&gt;http://github.com/juergenhoetzel/clojure/commit/2b5ab103cbcfe6c49236ac6966c032d3c922233d&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14271">CLJ-669</key>
            <summary>clojure.java.io/do-copy: use java.nio  for Files</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="juergenhoetzel">Jürgen Hötzel</reporter>
                        <labels>
                    </labels>
                <created>Mon, 1 Nov 2010 14:03:16 -0700</created>
                <updated>Sat, 27 Nov 2010 03:05:14 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="25965" author="juergenhoetzel" created="Sat, 27 Nov 2010 03:05:14 -0800">&lt;p&gt;Patch instead of linking to github&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10032" name="0001-use-java.nio-in-do-copy-method-for-Files.patch" size="1158" author="juergenhoetzel" created="Sat, 27 Nov 2010 03:05:14 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-668] Improve slurp performance by using native Java StringWriter and jio/copy</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-668</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Instead of copying each character from InputReader to StringBuffer.&lt;/p&gt;

&lt;p&gt;Performance improvement:&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;From:
user&amp;gt; (time (count (slurp "/home/juergen/test.dat")))
"Elapsed time: 4269.980863 msecs"
104857600
To:
user&amp;gt; (time (count (slurp "/home/juergen/test.dat")))
"Elapsed time: 1140.854023 msecs"
104857600
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Patch: &lt;a href="http://github.com/juergenhoetzel/clojure/commit/af1a5713cd485ba5f1db25c37906ebaf7d474b47"&gt;http://github.com/juergenhoetzel/clojure/commit/af1a5713cd485ba5f1db25c37906ebaf7d474b47&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14270">CLJ-668</key>
            <summary>Improve slurp performance by using native Java StringWriter and jio/copy</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="juergenhoetzel">Jürgen Hötzel</reporter>
                        <labels>
                    </labels>
                <created>Mon, 1 Nov 2010 13:58:31 -0700</created>
                <updated>Mon, 1 Nov 2010 13:58:31 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-666] Add support for Big* numeric types to Reflector</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-666</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This should work as expected, for example:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;(Integer. 1N)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;Probably for &lt;tt&gt;BigInt&lt;/tt&gt;, &lt;tt&gt;BigInteger&lt;/tt&gt;, and &lt;tt&gt;BigDecimal&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Method to look at is &lt;tt&gt;c.l.Reflector.paramArgTypeMatch&lt;/tt&gt;, per Rich in irc.&lt;/p&gt;</description>
                <environment/>
            <key id="14267">CLJ-666</key>
            <summary>Add support for Big* numeric types to Reflector</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="cemerick">Chas Emerick</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Oct 2010 09:20:19 -0700</created>
                <updated>Fri, 29 Apr 2011 08:01:24 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26333" author="trptcolin" created="Wed, 30 Mar 2011 21:52:38 -0700">&lt;p&gt;Questions posed on the clojure-dev list around how this impacts bit-shift-left: &lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/2191cbf0048d8ca6"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/2191cbf0048d8ca6&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26334" author="ataggart" created="Wed, 30 Mar 2011 22:42:37 -0700">&lt;p&gt;Patch on &lt;a href="http://dev.clojure.org/jira/browse/CLJ-445" title="Method/Constructor resolution does not factor in widening conversion of primitive args"&gt;CLJ-445&lt;/a&gt; fixes this as well.&lt;/p&gt;</comment>
                    <comment id="26394" author="trptcolin" created="Wed, 27 Apr 2011 14:41:39 -0700">&lt;p&gt;This patch fails a test around bit-shifting a BigInt: `(bit-shift-left 1N 10000)`. The reason is that the patch changes the dispatch of (BigInt, Long) from (Object, Object) to (long, int). &lt;/p&gt;

&lt;p&gt;Clearly this can't be applied (unless another change makes it possible), but I'm putting it up as a start of the conversation.&lt;/p&gt;</comment>
                    <comment id="26395" author="ataggart" created="Wed, 27 Apr 2011 15:26:04 -0700">&lt;p&gt;My comment from the mailing list:&lt;/p&gt;

&lt;p&gt;If the test breaks it likely means Numbers.shiftLeft(long,int) was &lt;br/&gt;
selected over Numbers.shiftLeft(Object,Object).  Given that 1N is an &lt;br/&gt;
Object (one that can exceed the size of a long), the method selection &lt;br/&gt;
is incorrect, thus the patch is broken.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The suggestion of "simply" modifying paramArgTypeMatch is not sufficient since the mechanism for preferring one method over another lives in Compiler, and isn't smart enough to make these sorts of decisions.&lt;/p&gt;</comment>
                    <comment id="26397" author="redinger" created="Thu, 28 Apr 2011 07:21:09 -0700">&lt;p&gt;Considering moving this out of Release.next - soliciting comments from Chas.&lt;/p&gt;</comment>
                    <comment id="26398" author="cemerick" created="Thu, 28 Apr 2011 07:41:43 -0700">&lt;p&gt;I'm afraid I don't have any particular insight into the issues involved at this point.  I ran into the problem originally noted a while back, and opened the ticket at Rich's suggestion.  I'm sorry if the text of the ticket led anyone down unfruitful paths…&lt;/p&gt;</comment>
                    <comment id="26401" author="lvanderhart" created="Fri, 29 Apr 2011 08:01:24 -0700">&lt;p&gt;The issues relating to bitshift are moot since the decision was made that bit-shifts are only for 32/64 bit values. &lt;/p&gt;

&lt;p&gt;Still a valid issue, but de-prioritized as per Rich.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10200" name="0001-Add-Big-support-to-Reflector.patch" size="4834" author="trptcolin" created="Wed, 27 Apr 2011 14:41:39 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-459] RFE: modify description of "assoc"</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-459</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The documentation for "assoc" in clojure.core should probably &lt;br/&gt;
include&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(assoc vector index val)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
and

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;(assoc vector index val &amp;amp; ivs)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in the usage line.&lt;/p&gt;</description>
                <environment/>
            <key id="13856">CLJ-459</key>
            <summary>RFE: modify description of "assoc"</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Oct 2010 14:55:00 -0700</created>
                <updated>Thu, 14 Oct 2010 14:55:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="24307" author="importer" created="Thu, 14 Oct 2010 14:55:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/459"&gt;http://www.assembla.com/spaces/clojure/tickets/459&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-457] lazy recursive definition giving incorrect results</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-457</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If you define a global data var in terms of a lazy sequence referring to that same var, you can get different results depending on the chunkiness of laziness of the functions being used to build the collection.&lt;/p&gt;

&lt;p&gt;Clojure's lazy sequences don't promise to support this, but they shouldn't return wrong answers. In the example given in &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/1c342fad8461602d"&gt;http://groups.google.com/group/clojure/browse_thread/thread/1c342fad8461602d&lt;/a&gt; (and repeated below), Clojure should not return bad data. An error message would be good, and even an infinite loop would be more reasonable than the current behavior.&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(def nums (drop 2 (range)))
(def primes (cons (first nums)
             (lazy-seq (-&amp;gt;&amp;gt;
               (&lt;span class="code-keyword"&gt;rest&lt;/span&gt; nums)
               (remove
                 (fn [x]
                   (let [dividors (take-&lt;span class="code-keyword"&gt;while&lt;/span&gt; #(&amp;lt;= (* % %) x)
primes)]
                     (println (str &lt;span class="code-quote"&gt;"primes = "&lt;/span&gt; primes))
                     (some #(= 0 (rem x %)) dividors))))))))
(take 5 primes)

It prints out:
(primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
primes = (2)
2 3 5 7 9)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13854">CLJ-457</key>
            <summary>lazy recursive definition giving incorrect results</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Oct 2010 13:00:00 -0700</created>
                <updated>Fri, 2 Dec 2011 12:15:36 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24301" author="importer" created="Wed, 13 Oct 2010 13:00:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/457"&gt;http://www.assembla.com/spaces/clojure/tickets/457&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26020" author="aaron" created="Fri, 10 Dec 2010 07:08:13 -0800">&lt;p&gt;Stu and Rich talked about making this an error, but it would break some existing code to do so. &lt;/p&gt;</comment>
                    <comment id="26038" author="richhickey" created="Fri, 17 Dec 2010 06:03:15 -0800">&lt;p&gt;Is there a specific question on this?&lt;/p&gt;</comment>
                    <comment id="26091" author="aaron" created="Wed, 5 Jan 2011 19:05:44 -0800">&lt;p&gt;Stu, you and I went over this but I can't remember exactly what the question was here.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-451] fn literals lack name/arglists/namespace metadata</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-451</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I would expect (meta (fn not-so-anonymous &lt;span class="error"&gt;&amp;#91;a b c&amp;#93;&lt;/span&gt;)) to include {:name not-so-anonymous :arglists (&lt;span class="error"&gt;&amp;#91;a b c&amp;#93;&lt;/span&gt;)} alongside line number information and possibly namespace/file as well, but currently it only includes :line.&lt;/p&gt;</description>
                <environment/>
            <key id="13848">CLJ-451</key>
            <summary>fn literals lack name/arglists/namespace metadata</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Oct 2010 22:29:00 -0700</created>
                <updated>Mon, 4 Oct 2010 22:29:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24285" author="importer" created="Mon, 4 Oct 2010 22:29:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/451"&gt;http://www.assembla.com/spaces/clojure/tickets/451&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-450] Add default predicate argument to filter, every?, take-while</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-450</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Some seq processing functions that take predicates could be improved by the addition of a default value of identity for the predicate argument.&lt;/p&gt;

&lt;p&gt;This has been discussed on the mailing list, and people seem favorable:&lt;br/&gt;
&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/600559b7ee261908/3bc5d144ac54854e?lnk=gst&amp;amp;q=filter+identity#3bc5d144ac54854e"&gt;http://groups.google.com/group/clojure/browse_thread/thread/600559b7ee261908/3bc5d144ac54854e?lnk=gst&amp;amp;q=filter+identity#3bc5d144ac54854e&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/0a9b5750dd7ec4ca"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/0a9b5750dd7ec4ca&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can put together a patch.&lt;/p&gt;</description>
                <environment/>
            <key id="13847">CLJ-450</key>
            <summary>Add default predicate argument to filter, every?, take-while</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Oct 2010 14:39:00 -0700</created>
                <updated>Tue, 13 Mar 2012 14:57:27 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="24284" author="importer" created="Fri, 1 Oct 2010 14:39:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/450"&gt;http://www.assembla.com/spaces/clojure/tickets/450&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27938" author="jorendorff" created="Tue, 13 Mar 2012 12:51:07 -0700">&lt;p&gt;I independently wanted this. Here's a patch for: some, not-any?, every?, not-every?. If this is roughly what's wanted I'll be happy to add filter, remove, take-while, drop-while.&lt;/p&gt;</comment>
                    <comment id="27939" author="jorendorff" created="Tue, 13 Mar 2012 14:57:27 -0700">&lt;p&gt;Note that there are a few cases of (every? identity ...) and (some identity ...) in core.clj itself; the patch removes "identity" from those.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10991" name="clojure-default-every-argument-v1.patch" size="9139" author="jorendorff" created="Tue, 13 Mar 2012 12:51:07 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-445] Method/Constructor resolution does not factor in widening conversion of primitive args</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-445</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Problem:&lt;br/&gt;
When making java calls (or inlined functions), if both args and param are primitive, no widening conversion is used to locate the proper overloaded method/constructor.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (&lt;span class="code-object"&gt;Integer&lt;/span&gt;. (&lt;span class="code-object"&gt;byte&lt;/span&gt; 0))
java.lang.IllegalArgumentException: No matching ctor found &lt;span class="code-keyword"&gt;for&lt;/span&gt; class java.lang.&lt;span class="code-object"&gt;Integer&lt;/span&gt; (NO_SOURCE_FILE:0)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
The above occurs because there is no &lt;span class="code-object"&gt;Integer&lt;/span&gt;(&lt;span class="code-object"&gt;byte&lt;/span&gt;) constructor, though it should match on &lt;span class="code-object"&gt;Integer&lt;/span&gt;(&lt;span class="code-object"&gt;int&lt;/span&gt;).
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;user=&amp;gt; (bit-shift-left (&lt;span class="code-object"&gt;byte&lt;/span&gt; 1) 1)
Reflection warning, NO_SOURCE_PATH:3 - call to shiftLeft can't be resolved.
2&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above, a call is made via reflection to Numbers.shiftLeft(Object, Object) and its associated auto-boxing, instead of directly to the perfectly adequate Numbers.shiftLeft(long, int).&lt;/p&gt;

&lt;p&gt;Workarounds:&lt;br/&gt;
Explicitly casting to the formal type.&lt;/p&gt;

&lt;p&gt;Ancillary benefits of fixing:&lt;br/&gt;
It would also reduce the amount of method overloading, e.g., RT.intCast(char), intCast(byte), intCast(short), could all be removed, since such calls would pass to RT.intCast(int).&lt;/p&gt;</description>
                <environment/>
            <key id="13842">CLJ-445</key>
            <summary>Method/Constructor resolution does not factor in widening conversion of primitive args</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="ataggart">Alexander Taggart</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Sep 2010 23:02:00 -0700</created>
                <updated>Mon, 20 Feb 2012 12:04:42 -0800</updated>
                                                    <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24255" author="importer" created="Sat, 23 Oct 2010 16:43:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/445"&gt;http://www.assembla.com/spaces/clojure/tickets/445&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
fixbug445.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/b6gDSUZOur36b9eJe5cbCb/download/b6gDSUZOur36b9eJe5cbCb"&gt;https://www.assembla.com/spaces/clojure/documents/b6gDSUZOur36b9eJe5cbCb/download/b6gDSUZOur36b9eJe5cbCb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="24256" author="importer" created="Sat, 23 Oct 2010 16:43:00 -0700">&lt;p&gt;ataggart said: [&lt;a href="file:b6gDSUZOur36b9eJe5cbCb"&gt;file:b6gDSUZOur36b9eJe5cbCb&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="24257" author="importer" created="Sat, 23 Oct 2010 16:43:00 -0700">&lt;p&gt;ataggart said: Also fixes #446.&lt;/p&gt;</comment>
                    <comment id="26001" author="stu" created="Fri, 3 Dec 2010 10:50:23 -0800">&lt;p&gt;The patch is causing a test failure &lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;[java] Exception in thread &lt;span class="code-quote"&gt;"main"&lt;/span&gt; java.lang.IllegalArgumentException: 
     More than one matching method found: equiv, compiling:(clojure/pprint/cl_format.clj:428)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you take a look?&lt;/p&gt;</comment>
                    <comment id="26192" author="stu" created="Fri, 28 Jan 2011 10:30:18 -0800">&lt;p&gt;The failing test happens when trying to find the correct equiv for signature &lt;tt&gt;(Number, long)&lt;/tt&gt;. Is the compiler wrong to propose this signature, or is the resolution method wrong in not having an answer? (It thinks two signatures are tied: &lt;tt&gt;(Object, long)&lt;/tt&gt; and &lt;tt&gt;(Number, Number)&lt;/tt&gt;.)&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Exception in thread &lt;span class="code-quote"&gt;"main"&lt;/span&gt; java.lang.IllegalArgumentException: More than one matching method found: equiv, compiling:(clojure/pprint/cl_format.clj:428)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6062)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6050)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.access$100(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:35)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$LetExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5492)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$IfExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:2372)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$InvokeExpr.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:3277)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6057)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$BodyExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5231)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$LetExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5527)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$BodyExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5231)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$IfExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:2385)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$BodyExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5231)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$LetExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5527)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$IfExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:2385)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$BodyExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5231)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$LetExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5527)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$BodyExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5231)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$FnMethod.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:4667)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$FnExpr.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:3397)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6053)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6043)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.access$100(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:35)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$DefExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:480)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5866)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyze(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:5827)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.eval(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6114)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.load(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6545)
	at clojure.lang.RT.loadResourceScript(RT.java:340)
	at clojure.lang.RT.loadResourceScript(RT.java:331)
	at clojure.lang.RT.load(RT.java:409)
	at clojure.lang.RT.load(RT.java:381)
	at clojure.core$load$fn__1427.invoke(core.clj:5308)
	at clojure.core$load.doInvoke(core.clj:5307)
	at clojure.lang.RestFn.invoke(RestFn.java:409)
	at clojure.pprint$eval3969.invoke(pprint.clj:46)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.eval(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6110)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.load(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6545)
	at clojure.lang.RT.loadResourceScript(RT.java:340)
	at clojure.lang.RT.loadResourceScript(RT.java:331)
	at clojure.lang.RT.load(RT.java:409)
	at clojure.lang.RT.load(RT.java:381)
	at clojure.core$load$fn__1427.invoke(core.clj:5308)
	at clojure.core$load.doInvoke(core.clj:5307)
	at clojure.lang.RestFn.invoke(RestFn.java:409)
	at clojure.core$load_one.invoke(core.clj:5132)
	at clojure.core$load_lib.doInvoke(core.clj:5169)
	at clojure.lang.RestFn.applyTo(RestFn.java:143)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:77)
	at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28)
	at clojure.core$apply.invoke(core.clj:602)
	at clojure.core$load_libs.doInvoke(core.clj:5203)
	at clojure.lang.RestFn.applyTo(RestFn.java:138)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:77)
	at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28)
	at clojure.core$apply.invoke(core.clj:604)
	at clojure.core$use.doInvoke(core.clj:5283)
	at clojure.lang.RestFn.invoke(RestFn.java:409)
	at clojure.main$repl.doInvoke(main.clj:196)
	at clojure.lang.RestFn.invoke(RestFn.java:422)
	at clojure.main$repl_opt.invoke(main.clj:267)
	at clojure.main$main.doInvoke(main.clj:362)
	at clojure.lang.RestFn.invoke(RestFn.java:409)
	at clojure.lang.Var.invoke(Var.java:401)
	at clojure.lang.AFn.applyToHelper(AFn.java:163)
	at clojure.lang.Var.applyTo(Var.java:518)
	at clojure.main.main(main.java:37)
Caused by: java.lang.IllegalArgumentException: More than one matching method found: equiv
	at clojure.lang.Reflector.getMatchingParams(Reflector.java:639)
	at clojure.lang.Reflector.getMatchingParams(Reflector.java:578)
	at clojure.lang.Reflector.getMatchingMethod(Reflector.java:569)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$StaticMethodExpr.&amp;lt;init&amp;gt;(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:1439)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$HostExpr$Parser.parse(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:896)
	at clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.analyzeSeq(&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:6055)
	... 115 more&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="26214" author="ataggart" created="Tue, 8 Feb 2011 16:27:03 -0800">&lt;p&gt;In working on implementing support for vararg methods, I found a number of flaws with the previous solutions.  Please disregard them.&lt;/p&gt;

&lt;p&gt;I've attached a single patch (reflector-compiler-numbers.diff) which is a rather substantial overhaul of the Reflector code, with some enhancements to the Compiler and Numbers code.  &lt;/p&gt;

&lt;p&gt;The patch notes:&lt;/p&gt;

&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;Moved reflection functionality from Compiler to Reflector.&lt;/li&gt;
	&lt;li&gt;Reflector supports finding overloaded methods by widening conversion, boxing conversion, and casting.&lt;/li&gt;
	&lt;li&gt;During compilation Reflector attempts to find best wildcard match.&lt;/li&gt;
	&lt;li&gt;Reflector refers to &lt;tt&gt;&amp;#42;unchecked-math*&lt;/tt&gt; when reflectively invoking methods and constructors.&lt;/li&gt;
	&lt;li&gt;Both Reflector and Compiler support variable arity java methods and constructor; backwards compatible with passing an array or nil in the vararg slot.&lt;/li&gt;
	&lt;li&gt;Added more informative error messages to Reflector.&lt;/li&gt;
	&lt;li&gt;Added tests to clojure.test-clojure.reflector.&lt;/li&gt;
	&lt;li&gt;Altered overloaded functions of clojure.lang.Numbers to service Object/double/long params; fixes some ambiguity issues and avoids unnecessary boxing in some cases.&lt;/li&gt;
	&lt;li&gt;Patch closes issues 380, 440, 445, 666, and possibly 259 (not enough detail provided).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="26215" author="ataggart" created="Thu, 10 Feb 2011 17:35:57 -0800">&lt;p&gt;Updated patch to fix a bug where a concrete class with multiple identical Methods (e.g., one from an interface, another from an abstract class) would result in ambiguity.  Now resolved by arbitrary selection (this is what the original code did as well albeit not explicitly).&lt;/p&gt;</comment>
                    <comment id="26245" author="ataggart" created="Fri, 25 Feb 2011 19:29:21 -0800">&lt;p&gt;Updated patch to work with latest master branch.&lt;/p&gt;</comment>
                    <comment id="26289" author="stu" created="Sun, 6 Mar 2011 11:54:58 -0800">&lt;p&gt;patch appears to be missing test file clojure/test_clojure/reflector.clj.&lt;/p&gt;</comment>
                    <comment id="26290" author="ataggart" created="Sun, 6 Mar 2011 12:39:37 -0800">&lt;p&gt;Bit by git.&lt;/p&gt;

&lt;p&gt;Patch corrected to contain clojure.test-clojure.reflector.&lt;/p&gt;</comment>
                    <comment id="26300" author="stu" created="Fri, 11 Mar 2011 08:30:59 -0800">&lt;p&gt;Rich: I verified that the patch applied but reviewed only briefly, knowing you will want to go over this one closely.&lt;/p&gt;</comment>
                    <comment id="26301" author="stu" created="Fri, 11 Mar 2011 08:55:21 -0800">&lt;p&gt;After applying this patch, I am getting method missing errors:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;java.lang.NoSuchMethodError: clojure.lang.Numbers.lt(JLjava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but only when using compiled code, e.g. the same code works in the REPL and then fails after compilation. Haven't been able to isolate an example that I can share here yet, but hoping this will cause someone to have an "a, hah" moment...&lt;/p&gt;</comment>
                    <comment id="26341" author="ataggart" created="Sat, 2 Apr 2011 10:55:14 -0700">&lt;p&gt;The patch now contains only the minimal changes needed to support widening conversion. Cleanup of Numbers overloads, etc., can wait until this patch gets applied.  The vararg support is in a separate patch on &lt;a href="http://dev.clojure.org/jira/browse/CLJ-440" title="java method calls cannot omit varargs"&gt;CLJ-440&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="26370" author="redinger" created="Fri, 15 Apr 2011 10:50:43 -0700">&lt;p&gt;Please test patch&lt;/p&gt;</comment>
                    <comment id="26377" author="redinger" created="Thu, 21 Apr 2011 09:02:31 -0700">&lt;p&gt;FYI: Patch applies cleanly on master and all tests pass as of 4/21 (2011)&lt;/p&gt;</comment>
                    <comment id="26384" author="redinger" created="Fri, 22 Apr 2011 07:57:18 -0700">&lt;p&gt;This work is too big to take into the 1.3 beta right now. We'll revisit for a future release.&lt;/p&gt;</comment>
                    <comment id="26399" author="ataggart" created="Thu, 28 Apr 2011 11:19:50 -0700">&lt;p&gt;To better facilitate understanding of the changes, I've broken them up into two patches, each with a number of isolable, incremental commits:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;reorg-reflector.patch:&lt;/b&gt; Moves the reflection/invocation code from Compiler to Reflector, and eliminates redundant code.  The result is a single code base for resolving methods/constructors, which will allow for altering that mechanism without excess external coordination.  &lt;em&gt;This contains no behaviour changes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;prim-conversion.patch:&lt;/b&gt; Depends on the above. Alters the method/constructor resolution process:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;more consistent with java resolution, especially when calling pre-1.5 APIs&lt;/li&gt;
	&lt;li&gt;adds support for widening conversion of primitive numerics of the same category (this is more strict than java, and more clojuresque)&lt;/li&gt;
	&lt;li&gt;adds support for wildcard matches at compile-time (i.e., you don't need to type-hint every arg to avoid reflection).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This also provides a base to add further features, e.g., &lt;a href="http://dev.clojure.org/jira/browse/CLJ-666" title="Add support for Big* numeric types to Reflector"&gt;CLJ-666&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="26406" author="ataggart" created="Fri, 29 Apr 2011 13:01:22 -0700">&lt;p&gt;It's documented in situ, but here are the conversion rules that the reflector uses to find methods:&lt;/p&gt;


&lt;ol&gt;
	&lt;li&gt;By Type:
	&lt;ul&gt;
		&lt;li&gt;object to ancestor type&lt;/li&gt;
		&lt;li&gt;primitive to a wider primitive of the same numeric category (new)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Boxing:
	&lt;ul&gt;
		&lt;li&gt;boxed number to its primitive&lt;/li&gt;
		&lt;li&gt;boxed number to a wider primitive of the same numeric category (new for Short and Byte args)&lt;/li&gt;
		&lt;li&gt;primitive to its boxed value&lt;/li&gt;
		&lt;li&gt;primitive to Number or Object (new)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Casting:
	&lt;ul&gt;
		&lt;li&gt;long to int&lt;/li&gt;
		&lt;li&gt;double to float&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="26428" author="ataggart" created="Tue, 10 May 2011 13:13:33 -0700">&lt;p&gt;prim-conversion-update-1.patch applies to current master.&lt;/p&gt;</comment>
                    <comment id="26429" author="ataggart" created="Wed, 11 May 2011 12:15:13 -0700">&lt;p&gt;Created &lt;a href="http://dev.clojure.org/jira/browse/CLJ-792" title="Refactor method resolution code out of Compiler and into Reflector"&gt;CLJ-792&lt;/a&gt; for the reflector reorg.&lt;/p&gt;</comment>
                    <comment id="27753" author="stuart.sierra" created="Fri, 17 Feb 2012 12:29:42 -0800">&lt;p&gt;prim-conversion-update-1.patch does not apply as of f5bcf64. &lt;/p&gt;

&lt;p&gt;Is &lt;a href="http://dev.clojure.org/jira/browse/CLJ-792" title="Refactor method resolution code out of Compiler and into Reflector"&gt;CLJ-792&lt;/a&gt; now a prerequisite of this ticket?&lt;/p&gt;</comment>
                    <comment id="27758" author="ataggart" created="Fri, 17 Feb 2012 13:15:17 -0800">&lt;p&gt;Yes, after the original patch was deemed "too big".&lt;/p&gt;

&lt;p&gt;After this much time with no action from TPTB, feel free to kill both tickets.&lt;/p&gt;</comment>
                    <comment id="27778" author="jafingerhut" created="Mon, 20 Feb 2012 12:04:42 -0800">&lt;p&gt;Again, not sure if this is any help, but I've tested starting from Clojure head as of Feb 20, 2012, applying clj-792-reorg-reflector-patch2.txt attached to &lt;a href="http://dev.clojure.org/jira/browse/CLJ-792" title="Refactor method resolution code out of Compiler and into Reflector"&gt;CLJ-792&lt;/a&gt;, and then applying clj-445-prim-conversion-update-2-patch.txt attached to this ticket, and the result compiles and passes all but 2 tests.  I don't know whether those failures are easy to fix or not, or whether issues may have been introduced with these patches.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10932" name="clj-445-prim-conversion-update-2-patch.txt" size="36531" author="jafingerhut" created="Mon, 20 Feb 2012 12:04:42 -0800"/>
                    <attachment id="10205" name="prim-conversion.patch" size="36375" author="ataggart" created="Fri, 29 Apr 2011 04:43:21 -0700"/>
                    <attachment id="10225" name="prim-conversion-update-1.patch" size="36473" author="ataggart" created="Tue, 10 May 2011 13:13:33 -0700"/>
                    <attachment id="10203" name="reorg-reflector.patch" size="73345" author="ataggart" created="Thu, 28 Apr 2011 11:19:50 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-440] java method calls cannot omit varargs</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-440</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;From &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/7d0d6cb32656a621"&gt;http://groups.google.com/group/clojure/browse_thread/thread/7d0d6cb32656a621&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E.g., trying to call java.util.Collections.addAll(Collection c, T... elements)&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (Collections/addAll [] (object-array 0))
&lt;span class="code-keyword"&gt;false&lt;/span&gt;
user=&amp;gt; (Collections/addAll [])
IllegalArgumentException No matching method: addAll  clojure.lang.&lt;span class="code-object"&gt;Compiler&lt;/span&gt;$StaticMethodExpr.&amp;lt;init&amp;gt; (&lt;span class="code-object"&gt;Compiler&lt;/span&gt;.java:1401)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Method class provides an isVarArg() method, which could be used to inform the compiler to process things differently.&lt;/p&gt;</description>
                <environment/>
            <key id="13837">CLJ-440</key>
            <summary>java method calls cannot omit varargs</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Sep 2010 18:19:00 -0700</created>
                <updated>Fri, 22 Apr 2011 09:43:06 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24237" author="importer" created="Mon, 27 Sep 2010 18:19:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/440"&gt;http://www.assembla.com/spaces/clojure/tickets/440&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26340" author="ataggart" created="Fri, 1 Apr 2011 21:16:23 -0700">&lt;p&gt;Patch adds support for varargs.  Builds on top of patch in &lt;a href="http://dev.clojure.org/jira/browse/CLJ-445" title="Method/Constructor resolution does not factor in widening conversion of primitive args"&gt;CLJ-445&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="26344" author="ataggart" created="Tue, 5 Apr 2011 15:45:41 -0700">&lt;p&gt;Patch updated to current &lt;a href="http://dev.clojure.org/jira/browse/CLJ-445" title="Method/Constructor resolution does not factor in widening conversion of primitive args"&gt;CLJ-445&lt;/a&gt; patch.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-438] case* and code walkers</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-438</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Clojure 1.2.0-master-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (use 'clojure.walk)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (eval (macroexpand-all '(case 1 1 :test)))&lt;br/&gt;
java.lang.ClassCastException: clojure.lang.PersistentVector cannot be cast to clojure.lang.MapEntry (NO_SOURCE_FILE:2)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (macroexpand-all '(case 1 1 :test))&lt;br/&gt;
(let* &lt;span class="error"&gt;&amp;#91;G__9 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
(case*  G__9  0  1  1  1&lt;br/&gt;
  (throw   (new  java.lang.IllegalArgumentException  (clojure.core/str "No matching clause: " G__9)))&lt;/p&gt;
  {1 [1 :test]}
&lt;p&gt;  false))&lt;/p&gt;

&lt;p&gt;The existing code walkers convert the embedded &lt;span class="error"&gt;&amp;#91;1 :test&amp;#93;&lt;/span&gt; into a PersistentVector that the compiler doesn't accept.&lt;br/&gt;
(symbol-macrolet &lt;span class="error"&gt;&amp;#91;x :test&amp;#93;&lt;/span&gt; (case 1 1 x)) fails in the same way.&lt;/p&gt;</description>
                <environment/>
            <key id="13835">CLJ-438</key>
            <summary>case* and code walkers</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="1" iconUrl="http://dev.clojure.org/jira/images/icons/priority_blocker.gif">Blocker</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Sep 2010 11:06:00 -0700</created>
                <updated>Mon, 10 Oct 2011 07:28:36 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="24234" author="importer" created="Fri, 1 Oct 2010 08:47:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/438"&gt;http://www.assembla.com/spaces/clojure/tickets/438&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26077" author="trptcolin" created="Sat, 1 Jan 2011 14:13:12 -0800">&lt;p&gt;A post-order traversal for macroexpand-all seems more reliable here than pre-order, and does fix the issue.&lt;/p&gt;

&lt;p&gt;The attached patch adds tests around this and updates macroexpand-all to use postwalk rather than prewalk. &lt;/p&gt;</comment>
                    <comment id="26249" author="ataggart" created="Mon, 28 Feb 2011 11:51:10 -0800">&lt;p&gt;This has been fixed in the patch on &lt;a href="http://dev.clojure.org/jira/browse/CLJ-426" title="case should handle hash collision"&gt;&lt;del&gt;CLJ-426&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The CaseExpr parser now just treats the map value as a tuple by calling RT.first/second, rather than casting it to a MapEntry.&lt;/p&gt;</comment>
                    <comment id="26920" author="trptcolin" created="Mon, 10 Oct 2011 07:28:35 -0700">&lt;p&gt;Confirming Alex's fix - this ticket can just get closed, I think.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10065" name="0001-Fix-error-case-in-eval-of-walk-macroexpand-all-outpu.patch" size="1571" author="trptcolin" created="Sat, 1 Jan 2011 14:13:12 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-434] Additional copy methods for URLs in clojure.java.io</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-434</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The copy method in clojure.java.io doesn't handle java.net.URL as input.&lt;br/&gt;
The necessary methods can be found in the mailing list post:&lt;br/&gt;
[&lt;span class="error"&gt;&amp;#91;url:http://groups.google.com/group/clojure/browse_thread/thread/24a105b12466a8e8&amp;#93;&lt;/span&gt;]&lt;/p&gt;</description>
                <environment/>
            <key id="13831">CLJ-434</key>
            <summary>Additional copy methods for URLs in clojure.java.io</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Sep 2010 05:32:00 -0700</created>
                <updated>Fri, 10 Sep 2010 05:32:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24226" author="importer" created="Fri, 10 Sep 2010 05:32:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/434"&gt;http://www.assembla.com/spaces/clojure/tickets/434&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-428] subseq, rsubseq enhancements to support priority maps?</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-428</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;See dev thread at &lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/fdb000cae4f66a95"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/fdb000cae4f66a95&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: subseq currently returns () instead of nil in some situations. If the rest of this idea dies we might still want to fix that.&lt;/p&gt;</description>
                <environment/>
            <key id="13825">CLJ-428</key>
            <summary>subseq, rsubseq enhancements to support priority maps?</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Aug 2010 06:01:00 -0700</created>
                <updated>Fri, 10 Dec 2010 07:11:50 -0800</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24210" author="importer" created="Tue, 24 Aug 2010 08:10:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/428"&gt;http://www.assembla.com/spaces/clojure/tickets/428&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-420] Some compiler exceptions erroneously using REPL line numbers.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-420</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Certain kinds of errors in loaded source files are coming back tagged with the correct source file, but what seems to be the REPL line number.  &lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure/browse_frm/thread/beb36e7228eabd69/a7ef16dcc45834bc?hl=en#a7ef16dcc45834bc"&gt;http://groups.google.com/group/clojure/browse_frm/thread/beb36e7228eabd69/a7ef16dcc45834bc?hl=en#a7ef16dcc45834bc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jawolfe@&lt;span class="error"&gt;&amp;#91;~/Projects/testproj&amp;#93;&lt;/span&gt;: cat &amp;gt; src/test.clj&lt;/p&gt;

&lt;p&gt;bla&lt;br/&gt;
jawolfe@&lt;span class="error"&gt;&amp;#91;~/Projects/testproj&amp;#93;&lt;/span&gt;: cat &amp;gt; src/test2.clj&lt;/p&gt;

&lt;p&gt;(bla)&lt;br/&gt;
jawolfe@&lt;span class="error"&gt;&amp;#91;~/Projects/testproj&amp;#93;&lt;/span&gt;: lein repl&lt;br/&gt;
user=&amp;gt; (require 'test)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test.clj:1)&lt;br/&gt;
user=&amp;gt; (require 'test)a&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test.clj:2)&lt;br/&gt;
user=&amp;gt; (require 'test)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test.clj:3)&lt;br/&gt;
user=&amp;gt; (require 'test2)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test2.clj:2)&lt;br/&gt;
user=&amp;gt; (require 'test2)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test2.clj:2)&lt;br/&gt;
user=&amp;gt; (require 'test2)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test2.clj:2)&lt;br/&gt;
user=&amp;gt; (require 'test)&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: bla in this context&lt;br/&gt;
(test.clj:7)&lt;br/&gt;
user=&amp;gt;&lt;/p&gt;</description>
                <environment/>
            <key id="13817">CLJ-420</key>
            <summary>Some compiler exceptions erroneously using REPL line numbers.</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="aredington">Alexander Redington</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Aug 2010 02:46:00 -0700</created>
                <updated>Fri, 10 Dec 2010 07:14:11 -0800</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24177" author="importer" created="Tue, 28 Sep 2010 19:59:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/420"&gt;http://www.assembla.com/spaces/clojure/tickets/420&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="24178" author="importer" created="Tue, 28 Sep 2010 19:59:00 -0700">&lt;p&gt;stu said: Updating tickets (#427, #426, #421, #420, #397)&lt;/p&gt;</comment>
                    <comment id="24179" author="importer" created="Tue, 28 Sep 2010 19:59:00 -0700">&lt;p&gt;stu said: Updating tickets (#429, #437, #397, #420)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-416] improvments on agent</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-416</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;hi,i have some ideas to improve the agent system:&lt;br/&gt;
1.Agent's thread pool must use a custom ThreadFactory to new threads.Set new thread a system name and set it to be daemon.Thread's name would be used for debug or monitor.And set thread to be daemon asking user to shutdown agents explicitly.&lt;/p&gt;

&lt;p&gt;2.Beacause agent's thread is daemon,so if a application doesn't use any agents,the thread pool must not started.I think the agent's thread pools should be lazy initialized.&lt;/p&gt;

&lt;p&gt;3.I think agent must allow use to define a agent-own thread pool.That thread pool is only used by a agent,not global.just like:&lt;br/&gt;
(define a (agent :executor (java.util.concurrent.Executors/newFixedThreadPool 2)))&lt;br/&gt;
or&lt;br/&gt;
(set-executor!  a  (java.util.concurrent.Executors/newFixedThreadPool 2))&lt;br/&gt;
And then,a new function to shutdown agent's custom thread pool:&lt;br/&gt;
(shutdown-agent a)&lt;/p&gt;

&lt;p&gt;Why do we need a custom thread pool?&lt;br/&gt;
First, the default thread pool is global, send use the thread pool&lt;br/&gt;
is a fixed size cpus +2, is likely to become the system bottleneck&lt;br/&gt;
sometime. Although you can use the send-off, use the cache thread&lt;br/&gt;
pool, but in a real world application, I can not use the cache thread&lt;br/&gt;
pool, which will introduce the risk of OutOfMemoryError, normally I&lt;br/&gt;
like to use a fixed-size thread pool.&lt;/p&gt;

&lt;p&gt;Second, the actions which global thread pool execute are from a&lt;br/&gt;
variety of agents, the actions are not homogeneous, and can not&lt;br/&gt;
maximize the efficient use of the thread pool.&lt;/p&gt;

&lt;p&gt;These are my suggestions on agent,thanks for this great language,i enjoy it.&lt;/p&gt;</description>
                <environment/>
            <key id="13813">CLJ-416</key>
            <summary>improvments on agent</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Jul 2010 14:15:00 -0700</created>
                <updated>Tue, 24 Aug 2010 16:42:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="24167" author="importer" created="Tue, 24 Aug 2010 16:42:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/416"&gt;http://www.assembla.com/spaces/clojure/tickets/416&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-415] smarter assert (prints locals)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-415</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Here is an implementation you can paste into a repl. Feedback wanted:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defn ^{:&lt;span class="code-keyword"&gt;private&lt;/span&gt; &lt;span class="code-keyword"&gt;true&lt;/span&gt;} local-bindings
  &lt;span class="code-quote"&gt;"Produces a map of the names of local bindings to their values."&lt;/span&gt;
  [env]
  (let [symbols (map key env)]
    (zipmap (map (fn [sym] `(quote ~sym)) symbols) symbols)))

(defmacro &lt;span class="code-keyword"&gt;assert&lt;/span&gt;
  "Evaluates expr and &lt;span class="code-keyword"&gt;throws&lt;/span&gt; an exception &lt;span class="code-keyword"&gt;if&lt;/span&gt; it does not evaluate to
 logical &lt;span class="code-keyword"&gt;true&lt;/span&gt;."
  {:added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;}
  [x]
  (when *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;*
    (let [bindings (local-bindings &amp;amp;env)]
      `(when-not ~x
         (let [sep# (&lt;span class="code-object"&gt;System&lt;/span&gt;/getProperty &lt;span class="code-quote"&gt;"line.separator"&lt;/span&gt;)]
           (&lt;span class="code-keyword"&gt;throw&lt;/span&gt; (AssertionError. (apply str &lt;span class="code-quote"&gt;"Assert failed: "&lt;/span&gt; (pr-str '~x) sep#
                                          (map (fn [[k# v#]] (str &lt;span class="code-quote"&gt;"\t"&lt;/span&gt; k# &lt;span class="code-quote"&gt;" : "&lt;/span&gt; v# sep#)) ~bindings)))))))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13812">CLJ-415</key>
            <summary>smarter assert (prints locals)</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jul 2010 15:45:00 -0700</created>
                <updated>Fri, 27 May 2011 06:16:40 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24161" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/415"&gt;http://www.assembla.com/spaces/clojure/tickets/415&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="24162" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;alexdmiller said: A simple example I tried for illustration:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (let [a 1 b 2] (&lt;span class="code-keyword"&gt;assert&lt;/span&gt; (= a b)))
#&amp;lt;CompilerException java.lang.AssertionError: Assert failed: (= a b)
 a : 1
 b : 2&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="24163" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;fogus said: Of course it's weird if you do something like:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(let [x 1 y 2 z 3 a 1 b 2 c 3] (&lt;span class="code-keyword"&gt;assert&lt;/span&gt; (= x y)))
java.lang.AssertionError: Assert failed: (= x y)
 x : 1
 y : 2
 z : 3
 a : 1
 b : 2
 c : 3
 (NO_SOURCE_FILE:0)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

So maybe it could be slightly changed to:
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;(defmacro &lt;span class="code-keyword"&gt;assert&lt;/span&gt;
  &lt;span class="code-quote"&gt;"Evaluates expr and &lt;span class="code-keyword"&gt;throws&lt;/span&gt; an exception &lt;span class="code-keyword"&gt;if&lt;/span&gt; it does not evaluate to logical &lt;span class="code-keyword"&gt;true&lt;/span&gt;."&lt;/span&gt;
  {:added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;}
  [x]
  (when *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;*
    (let [bindings (local-bindings &amp;amp;env)]
      `(when-not ~x
         (let [sep#  (&lt;span class="code-object"&gt;System&lt;/span&gt;/getProperty &lt;span class="code-quote"&gt;"line.separator"&lt;/span&gt;)
               form# '~x]
           (&lt;span class="code-keyword"&gt;throw&lt;/span&gt; (AssertionError. (apply str &lt;span class="code-quote"&gt;"Assert failed: "&lt;/span&gt; (pr-str form#) sep#
                                          (map (fn [[k# v#]] 
                                                 (when (some #{k#} form#) 
                                                   (str &lt;span class="code-quote"&gt;"\t"&lt;/span&gt; k# &lt;span class="code-quote"&gt;" : "&lt;/span&gt; v# sep#))) 
                                               ~bindings)))))))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

So that. now it's just:
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;(let [x 1 y 2 z 3 a 1 b 2 c 3] (&lt;span class="code-keyword"&gt;assert&lt;/span&gt; (= x y)))
java.lang.AssertionError: Assert failed: (= x y)
 x : 1
 y : 2
 (NO_SOURCE_FILE:0)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;:f&lt;/p&gt;</comment>
                    <comment id="24164" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;fogus said: Hmmm, but that fails entirely for: (let &lt;span class="error"&gt;&amp;#91;x 1 y 2 z 3 a 1 b 2 c 3&amp;#93;&lt;/span&gt; (assert (= &lt;span class="error"&gt;&amp;#91;x y&amp;#93;&lt;/span&gt; &lt;span class="error"&gt;&amp;#91;a c&amp;#93;&lt;/span&gt;))).  So maybe it's better just to print all of the locals unless you really want to get complicated.&lt;br/&gt;
:f&lt;/p&gt;</comment>
                    <comment id="24165" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;jawolfe said: See also some comments in:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure-dev/browse_frm/thread/68d49cd7eb4a4899/9afc6be4d3f8ae27?lnk=gst&amp;amp;q=assert#9afc6be4d3f8ae27"&gt;http://groups.google.com/group/clojure-dev/browse_frm/thread/68d49cd7eb4a4899/9afc6be4d3f8ae27?lnk=gst&amp;amp;q=assert#9afc6be4d3f8ae27&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus one more suggestion to add to the mix:  in addition to / instead of printing the locals, how about saving them somewhere.  For example, the var &lt;b&gt;assert-bindings&lt;/b&gt; could be bound to the map of locals.  This way you don't run afoul of infinite/very large sequences, and allow the user to do more detailed interrogation of the bad values (especially useful when some of the locals print opaquely).&lt;/p&gt;</comment>
                    <comment id="24166" author="importer" created="Tue, 24 Aug 2010 15:41:00 -0700">&lt;p&gt;stuart.sierra said: Another approach, which I wil willingly donate:&lt;br/&gt;
&lt;a href="http://github.com/stuartsierra/lazytest/blob/master/src/main/clojure/lazytest/expect.clj"&gt;http://github.com/stuartsierra/lazytest/blob/master/src/main/clojure/lazytest/expect.clj&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26034" author="jweiss" created="Wed, 15 Dec 2010 11:33:52 -0800">&lt;p&gt;There's one more tweak to fogus's last comment, which I'm actually using.  You need to flatten the quoted form before you can use 'some' to check whether the local was used in the form:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defmacro &lt;span class="code-keyword"&gt;assert&lt;/span&gt;
  &lt;span class="code-quote"&gt;"Evaluates expr and &lt;span class="code-keyword"&gt;throws&lt;/span&gt; an exception &lt;span class="code-keyword"&gt;if&lt;/span&gt; it does not evaluate to logical &lt;span class="code-keyword"&gt;true&lt;/span&gt;."&lt;/span&gt;
  {:added &lt;span class="code-quote"&gt;"1.0"&lt;/span&gt;}
  [x]
  (when *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;*
    (let [bindings (local-bindings &amp;amp;env)]
      `(when-not ~x
         (let [sep#  (&lt;span class="code-object"&gt;System&lt;/span&gt;/getProperty &lt;span class="code-quote"&gt;"line.separator"&lt;/span&gt;)
               form# '~x]
           (&lt;span class="code-keyword"&gt;throw&lt;/span&gt; (AssertionError. (apply str &lt;span class="code-quote"&gt;"Assert failed: "&lt;/span&gt; (pr-str form#) sep#
                                          (map (fn [[k# v#]] 
                                                 (when (some #{k#} (flatten form#)) 
                                                   (str &lt;span class="code-quote"&gt;"\t"&lt;/span&gt; k# &lt;span class="code-quote"&gt;" : "&lt;/span&gt; v# sep#))) 
                                               ~bindings)))))))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="26087" author="stu" created="Tue, 4 Jan 2011 18:31:17 -0800">&lt;p&gt;I am holding off on this until we have more solidity around &lt;a href="http://dev.clojure.org/display/design/Error+Handling"&gt;http://dev.clojure.org/display/design/Error+Handling&lt;/a&gt;. (Considering, for instance, having &lt;b&gt;all&lt;/b&gt; exceptions thrown from Clojure provide access to locals.)&lt;/p&gt;

&lt;p&gt;When my pipe dream fades I will come back and screen this before the next release.&lt;/p&gt;</comment>
                    <comment id="26194" author="stu" created="Fri, 28 Jan 2011 11:14:13 -0800">&lt;p&gt;Why try to guess what someone wants to do with the locals (or any other context, for that matter) when you can specify a callback (see below). This would have been useful last week when I had an assertion that failed only on the CI box, where no debugger is available.&lt;/p&gt;

&lt;p&gt;Rich, at the risk of beating a dead horse, I still think this is a good idea. Debuggers are not always available, and this is an example of where a Lisp is intrinsically capable of providing better information than can be had in other environments. If you want a patch for the code below please mark waiting on me, otherwise please decline this ticket so I stop looking at it. &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(def ^:dynamic *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;-handler* nil)

(defn ^{:&lt;span class="code-keyword"&gt;private&lt;/span&gt; &lt;span class="code-keyword"&gt;true&lt;/span&gt;} local-bindings
  &lt;span class="code-quote"&gt;"Produces a map of the names of local bindings to their values."&lt;/span&gt;
  [env]
  (let [symbols (map key env)]
    (zipmap (map (fn [sym] `(quote ~sym)) symbols) symbols)))

(defmacro &lt;span class="code-keyword"&gt;assert&lt;/span&gt;
  [x]
  (when *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;*
    (let [bindings (local-bindings &amp;amp;env)]
      `(when-not ~x
         (let [sep#  (&lt;span class="code-object"&gt;System&lt;/span&gt;/getProperty &lt;span class="code-quote"&gt;"line.separator"&lt;/span&gt;)
               form# '~x]
           (&lt;span class="code-keyword"&gt;if&lt;/span&gt; *&lt;span class="code-keyword"&gt;assert&lt;/span&gt;-handler*
             (*&lt;span class="code-keyword"&gt;assert&lt;/span&gt;-handler* form# ~bindings)
             (&lt;span class="code-keyword"&gt;throw&lt;/span&gt; (AssertionError. (apply str &lt;span class="code-quote"&gt;"Assert failed: "&lt;/span&gt; (pr-str form#) sep#
                                            (map (fn [[k# v#]] 
                                                   (when (some #{k#} (flatten form#)) 
                                                     (str &lt;span class="code-quote"&gt;"\t"&lt;/span&gt; k# &lt;span class="code-quote"&gt;" : "&lt;/span&gt; v# sep#))) 
                                                 ~bindings))))))))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="26461" author="jweiss" created="Fri, 27 May 2011 06:16:40 -0700">&lt;p&gt;A slight improvement I made in my own version of this code:  flatten does not affect set literals.  So if you do (assert (some #{x} &lt;span class="error"&gt;&amp;#91;a b c d&amp;#93;&lt;/span&gt;))  the value of x will not be printed.  Here's a modified flatten that does the job:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-none"&gt;(defn symbols [sexp]
  "Returns just the symbols from the expression, including those
   inside literals (sets, maps, lists, vectors)."
  (distinct (filter symbol? (tree-seq coll? seq sexp))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>richhickey</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-405] better error messages for bad defrecord calls</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-405</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;defrecord could tell you if, e.g., you didn't specify an interface before leaping into method bodies. See &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/f52f90954edd8b09"&gt;http://groups.google.com/group/clojure/browse_thread/thread/f52f90954edd8b09&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="13802">CLJ-405</key>
            <summary>better error messages for bad defrecord calls</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Jul 2010 13:53:00 -0700</created>
                <updated>Mon, 23 Aug 2010 22:28:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24122" author="importer" created="Mon, 23 Aug 2010 22:28:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/405"&gt;http://www.assembla.com/spaces/clojure/tickets/405&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="24123" author="importer" created="Mon, 23 Aug 2010 22:28:00 -0700">&lt;p&gt;stu said: This could be fixed with an assert-valid-defrecord call in core_deftype, similar to assert-valid-fdecl in core.clj. Such a function would also be a place to hang other defrecord error messages.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-401] Promote "seqable?" from contrib?</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-401</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This was vaguely discussed &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/c9eef488d27bdf37"&gt;here&lt;/a&gt; and could potenntially help &lt;a href="http://www.assembla.com/spaces/clojure/support/tickets/400-a-faster-flatten"&gt;this ticket&lt;/a&gt; as well as be generally useful.&lt;/p&gt;

&lt;p&gt;I don't speak for everyone but when I saw sequential? I assumed it would have the semantics that seqable? does. Just my opinion, I'd love to hear someone's who is more informed than mine.&lt;/p&gt;

&lt;p&gt;In the proposed patch referenced in the ticket above, if seqable? could be used in place of sequential? flatten could be more powerful and work with maps/sets/java collections. Here's how it would look:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defn flatten [coll]
  (lazy-seq
    (when-let [coll (seq coll)]
      (let [x (first coll)]
        (&lt;span class="code-keyword"&gt;if&lt;/span&gt; (seqable? x)
          (concat (flatten x) (flatten (next coll)))
          (cons x (flatten (next coll))))))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And an example:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (flatten #{1 2 3 #{4 5 {6 {7 &lt;a href="#tok1-block-tok"&gt;8 9 10 #�tok1-block-tok&lt;/a&gt;}}}})&lt;br/&gt;
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)&lt;/p&gt;</description>
                <environment/>
            <key id="13798">CLJ-401</key>
            <summary>Promote "seqable?" from contrib?</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Jul 2010 08:45:00 -0700</created>
                <updated>Tue, 24 Aug 2010 07:19:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24105" author="importer" created="Tue, 24 Aug 2010 07:19:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/401"&gt;http://www.assembla.com/spaces/clojure/tickets/401&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-400] A faster flatten</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-400</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;As discussed in &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/c9eef488d27bdf37"&gt;this thread&lt;/a&gt;, I am submitting a more performant version of flatten for review. It has the same semantics as the current core/flatten. I have also updated the doc string to say that "(flatten nil) returns the empty list", because that's what the current version of core/flatten does as well.&lt;/p&gt;

&lt;p&gt;I haven't mailed in a CA yet, but I will tomorrow morning.&lt;/p&gt;

&lt;p&gt;Edit: Of course I'd mess my first ticket up &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;. I am not immediately seeing an option to edit this to add the "patch" tag or add the "ready to test" action. Sorry folks&lt;/p&gt;</description>
                <environment/>
            <key id="13797">CLJ-400</key>
            <summary>A faster flatten</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Jul 2010 11:18:00 -0700</created>
                <updated>Mon, 23 Aug 2010 22:19:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24104" author="importer" created="Mon, 23 Aug 2010 22:19:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/400"&gt;http://www.assembla.com/spaces/clojure/tickets/400&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
flatten-enhancement.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/c5chtAJQir353NeJe5cbLr/download/c5chtAJQir353NeJe5cbLr"&gt;https://www.assembla.com/spaces/clojure/documents/c5chtAJQir353NeJe5cbLr/download/c5chtAJQir353NeJe5cbLr&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-396] Better support for multiple inheritance in hierarchies and multimethods</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-396</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;While the hierarchies produced with 'derive' allow multiple parents per child, there is no way to indicate precedence between those parents, other than by laboriously specifying 'prefer-method' for every type X every multimethod. When 2 multimethods are both applicable to the supplied arguments, Clojure produces a nonspecific IllegalArgumentException containing only an error string. All this means that while Clojure does have an "inheritance" mechanism in the form of the ad hoc hierarchies, it is currently not really possible to implement multiple inheritance using the ad hoc hierarchy mechanism. 'Prefer-method' will not scale up to use in large applications with complex type hierarchies and heavy use of multimethods. &lt;/p&gt;

&lt;p&gt;Some potential ways to solve this are:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;allowing 'defmulti' to take a 'tie-breaker' function (tie-breaker &lt;span class="error"&gt;&amp;#91;arglist speclist1 speclist2&amp;#93;&lt;/span&gt; ...) which is called instead of throwing an IllegalArgumentException, and must return the 'winning speclist'.&lt;/li&gt;
	&lt;li&gt;instead of throwing IllegalArgumentException, throw a TiedMultiMethodsException &amp;#8211; the exception instance should contain the offending speclists, the function, and the arguments that were supplied.&lt;/li&gt;
	&lt;li&gt;allowing specification of precedence when using 'derive' (if only via a "last in = highest precedence" rule).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Paul&lt;/p&gt;</description>
                <environment/>
            <key id="13793">CLJ-396</key>
            <summary>Better support for multiple inheritance in hierarchies and multimethods</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Jul 2010 00:51:00 -0700</created>
                <updated>Tue, 24 Aug 2010 09:06:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24087" author="importer" created="Tue, 24 Aug 2010 09:06:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/396"&gt;http://www.assembla.com/spaces/clojure/tickets/396&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-394] Add marker Interfaces for defrecords and deftypes plus boolean test fns</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-394</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Sometimes one would like to know if an object is an instance of a deftype or a defrecord.&lt;br/&gt;
Add (possibly empty) marker Interfaces that allow an efficient test, plus test fns&lt;br/&gt;
'record?' and 'deftype?'.&lt;/p&gt;</description>
                <environment/>
            <key id="13791">CLJ-394</key>
            <summary>Add marker Interfaces for defrecords and deftypes plus boolean test fns</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 5 Jul 2010 07:58:00 -0700</created>
                <updated>Fri, 7 Oct 2011 05:42:34 -0700</updated>
                                                    <fixVersion>Release 1.4</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="24084" author="importer" created="Mon, 23 Aug 2010 22:04:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/394"&gt;http://www.assembla.com/spaces/clojure/tickets/394&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-379] problem with classloader when run as windows service</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-379</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I found following error when I run clojure application as MS Windows service (via procrun from Apache Daemon project).  When I tried to do 'require' during run-time, I got NullPointerException.  This happened as baseLoader function from RT class returned null in such environment (the value of Thread.currentThread().getContextClassLoader()).  (Although my app works fine when I run my application as standalone program, not as service).&lt;br/&gt;
This error was fixed by explicit setting of class loader with following code: &lt;/p&gt;

&lt;p&gt;(.setContextClassLoader (Thread/currentThread) (java.lang.ClassLoader/getSystemClassLoader))&lt;/p&gt;

&lt;p&gt;before any call to 'require'....&lt;/p&gt;

&lt;p&gt;May be you need to modify 'baseLoader' function, so it will check is value of Thread.currentThread().getContextClassLoader() is null or not, and if null, then return value of java.lang.ClassLoader.getSystemClassLoader() ?&lt;/p&gt;</description>
                <environment/>
            <key id="13776">CLJ-379</key>
            <summary>problem with classloader when run as windows service</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sun, 13 Jun 2010 08:24:00 -0700</created>
                <updated>Tue, 24 Aug 2010 08:40:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="24022" author="importer" created="Tue, 24 Aug 2010 08:40:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/379"&gt;http://www.assembla.com/spaces/clojure/tickets/379&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
ticket-379-fix.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/c5XWHcD4yr34HveJe5ccaP/download/c5XWHcD4yr34HveJe5ccaP"&gt;https://www.assembla.com/spaces/clojure/documents/c5XWHcD4yr34HveJe5ccaP/download/c5XWHcD4yr34HveJe5ccaP&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="24023" author="importer" created="Tue, 24 Aug 2010 08:40:00 -0700">&lt;p&gt;alexott said: possible fix is attached&lt;/p&gt;</comment>
                    <comment id="24024" author="importer" created="Tue, 24 Aug 2010 08:40:00 -0700">&lt;p&gt;alexott said: [&lt;a href="file:c5XWHcD4yr34HveJe5ccaP"&gt;file:c5XWHcD4yr34HveJe5ccaP&lt;/a&gt;]&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-373] update-in with empty key paths</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-373</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;To the topic of get-in and update-in. While I realize this is not a bug it is odd and in my eyes unexpected and unwanted behavior.&lt;/p&gt;

&lt;p&gt;get-in called with an empty path returns the hashmap it was given to walk through - this is as I expect and makes a lot of sense when dynamically (with generated pathes ) walking a hash map.&lt;/p&gt;

&lt;p&gt;update-in behaves differently and while from the implementation side, it's behavior too makes sense, it does not work as expected (at least not for me) update-in with an empty map creates a new key 'nil' so:&lt;/p&gt;

&lt;p&gt;(update-in {...} [] f) ist he same as (update-in {...} &lt;span class="error"&gt;&amp;#91;nil&amp;#93;&lt;/span&gt; f) while (get-in {...} []) is not the same as (get-in {...} &lt;span class="error"&gt;&amp;#91;nil&amp;#93;&lt;/span&gt;) and of cause differs from what update-in does.&lt;/p&gt;

&lt;p&gt;For automatically walking trees the behavior of get-in makes a lot more sense since the current behavior of update-in forces you to check for empty paths and if they are empty fall back to plain assoc and get (or get-in since this works):&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(&lt;span class="code-keyword"&gt;if&lt;/span&gt;-let [r (butlast @path)]
(&lt;span class="code-keyword"&gt;do&lt;/span&gt;
  (alter m update-in r dissoc (last @path))
  (alter m update-in r assoc {:name @sr} c))
(&lt;span class="code-keyword"&gt;do&lt;/span&gt;
  (alter m dissoc (last @path))
  (alter m assoc {:name @sr} c)))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next argument is that update-in with an empty map working on nil isn't easy to gasp, one needs to know the implementation details to realize that it works, I think 90% of the people reading update-in with [] will not instinctively know that it works on the key nil, so changing this would most likely not break any current code, and if it would the code would be bad anyway &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/tongue.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;.&lt;/p&gt;

&lt;p&gt;Chouser has, a very nice solution on the mailing list that would fix the problem I'm not sure if I'm entitled to post it here since I did not wrote it but it can be found in this thread: &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/de5b20b8c3fe498b?hl=en"&gt;http://groups.google.com/group/clojure/browse_thread/thread/de5b20b8c3fe498b?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Heinz&lt;/p&gt;</description>
                <environment/>
            <key id="13770">CLJ-373</key>
            <summary>update-in with empty key paths</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Jun 2010 08:31:00 -0700</created>
                <updated>Fri, 10 Dec 2010 06:50:59 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="23998" author="importer" created="Fri, 8 Oct 2010 08:33:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/373"&gt;http://www.assembla.com/spaces/clojure/tickets/373&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="25938" author="chouser@n01se.net" created="Sat, 13 Nov 2010 16:37:53 -0800">&lt;p&gt;I've attached my code from the g.group thread in the form of a patch, in case it's sufficient.  (Thanks to abedra for the gentle kick in the pants.)&lt;/p&gt;</comment>
                    <comment id="25974" author="stu" created="Mon, 29 Nov 2010 06:20:59 -0800">&lt;p&gt;Looks to me like the patch is misusing if-let, e.g.&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(when-let [[k &amp;amp; mk] []] &lt;span class="code-quote"&gt;"Doh!"&lt;/span&gt;) 
=&amp;gt; Doh!&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please correct, and add tests for &lt;tt&gt;nil&lt;/tt&gt; and &lt;tt&gt;[]&lt;/tt&gt; keys (at least).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10019" name="0001-Support-empty-path-in-update-in.-CLJ-373.patch" size="949" author="chouser@n01se.net" created="Sat, 13 Nov 2010 16:37:53 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>chouser@n01se.net</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-366] Multiplatform command-line clojure launcher</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-366</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Clojure needs a lower barrier of entry, long java commands scare people away! We need a script that conveniently launches a clojure repl or executes clojure files, much like the ruby/python/perl/other-favorite-interpreted-language behavior.&lt;/p&gt;

&lt;p&gt;NOTES:&lt;/p&gt;

&lt;p&gt;From Russ Olson (regarding Dejure/Dejour):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I just fixed a bunch of bugs in the script, so make sure you get the latest from download from: &lt;a href="http://github.com/russolsen/dejour"&gt;http://github.com/russolsen/dejour&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;After looking at jruby, scala, and groovy, it seems that the only way to do this right on windows is to write a C or C++ program and have a .exe.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="13763">CLJ-366</key>
            <summary>Multiplatform command-line clojure launcher</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 28 May 2010 06:06:00 -0700</created>
                <updated>Fri, 10 Dec 2010 08:13:46 -0800</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="23968" author="importer" created="Tue, 24 Aug 2010 06:21:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/366"&gt;http://www.assembla.com/spaces/clojure/tickets/366&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23969" author="importer" created="Tue, 24 Aug 2010 06:21:00 -0700">&lt;p&gt;stu said: Updating tickets (#370, #366, #374)&lt;/p&gt;</comment>
                    <comment id="26022" author="aaron" created="Fri, 10 Dec 2010 08:13:46 -0800">&lt;p&gt;Design page is at &lt;a href="http://dev.clojure.org/display/design/CLJ+Launcher"&gt;http://dev.clojure.org/display/design/CLJ+Launcher&lt;/a&gt; and should be the basis for all future discussion&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-348] reify allows use of qualified name as method parameter</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-348</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This should complain about using a fully-qualified name as a parameter:&lt;/p&gt;

&lt;p&gt;(defmacro lookup []&lt;br/&gt;
  `(reify clojure.lang.ILookup&lt;br/&gt;
          (valAt &lt;span class="error"&gt;&amp;#91;_ key&amp;#93;&lt;/span&gt;)))&lt;/p&gt;

&lt;p&gt;Instead it simply ignores that parameter in the method body in favour of clojure.core/key.&lt;/p&gt;</description>
                <environment/>
            <key id="13745">CLJ-348</key>
            <summary>reify allows use of qualified name as method parameter</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="1" iconUrl="http://dev.clojure.org/jira/images/icons/priority_blocker.gif">Blocker</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 May 2010 12:30:00 -0700</created>
                <updated>Fri, 7 Oct 2011 05:54:30 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="23886" author="importer" created="Tue, 24 Aug 2010 06:03:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/348"&gt;http://www.assembla.com/spaces/clojure/tickets/348&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
0001-Add-a-test-for-348-reify-shouldn-t-accept-qualified-.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/d2xUJIxTyr36fseJe5cbLA/download/d2xUJIxTyr36fseJe5cbLA"&gt;https://www.assembla.com/spaces/clojure/documents/d2xUJIxTyr36fseJe5cbLA/download/d2xUJIxTyr36fseJe5cbLA&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23887" author="importer" created="Tue, 24 Aug 2010 06:03:00 -0700">&lt;p&gt;technomancy said: [&lt;a href="file:d2xUJIxTyr36fseJe5cbLA"&gt;file:d2xUJIxTyr36fseJe5cbLA&lt;/a&gt;]: A test to expose the unwanted behaviour&lt;/p&gt;</comment>
                    <comment id="23888" author="importer" created="Tue, 24 Aug 2010 06:03:00 -0700">&lt;p&gt;richhickey said: I'm not sure the bug is what you say it is, or the resolution should be what you suggest. The true problem is the resolution of key when qualified. Another possibility is to ignore the qualifier there.&lt;/p&gt;</comment>
                    <comment id="23889" author="importer" created="Tue, 24 Aug 2010 06:03:00 -0700">&lt;p&gt;technomancy said: Interesting. So it's not appropriate to require auto-gensym here? Why are the rules different for reify methods vs proxy methods?&lt;/p&gt;

&lt;p&gt;&amp;gt; (defmacro lookup []&lt;br/&gt;
  `(proxy &lt;span class="error"&gt;&amp;#91;clojure.lang.ILookup&amp;#93;&lt;/span&gt; []&lt;br/&gt;
          (valAt &lt;span class="error"&gt;&amp;#91;key&amp;#93;&lt;/span&gt; key)))&lt;br/&gt;
&amp;gt; (lookup)&lt;/p&gt;

&lt;p&gt;Can't use qualified name as parameter: clojure.core/key&lt;br/&gt;
  &lt;span class="error"&gt;&amp;#91;Thrown class java.lang.Exception&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-346] (pprint-newline :fill) is not handled correctly</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-346</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Filled pretty printing (where we try to fit as many elements on a line as possible) is being too aggressive as we can see when we try to print the following array:&lt;/p&gt;

&lt;p&gt;user&amp;gt; (binding &lt;span class="error"&gt;&amp;#91;*print-right-margin* 20&amp;#93;&lt;/span&gt; (pprint (int-array (range 10))))&lt;/p&gt;

&lt;p&gt;Produces:&lt;/p&gt;

&lt;p&gt;[0,&lt;br/&gt;
 1,&lt;br/&gt;
 2,&lt;br/&gt;
 3,&lt;br/&gt;
 4, 5, 6, 7, 8, 9]&lt;/p&gt;

&lt;p&gt;Rather than &lt;/p&gt;

&lt;p&gt;[0, 1, 2, 3, 4,&lt;br/&gt;
 5, 6, 7, 8, 9]&lt;/p&gt;

&lt;p&gt;or something like that. (I haven't worked through the exact correct representation for this case).&lt;/p&gt;

&lt;p&gt;We currently only use :fill style newlines for native java arrays.&lt;/p&gt;</description>
                <environment/>
            <key id="13743">CLJ-346</key>
            <summary>(pprint-newline :fill) is not handled correctly</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="tomfaulhaber">Tom Faulhaber</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 May 2010 07:45:00 -0700</created>
                <updated>Mon, 29 Nov 2010 18:48:05 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="23878" author="importer" created="Tue, 24 Aug 2010 06:01:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/346"&gt;http://www.assembla.com/spaces/clojure/tickets/346&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
0347-pprint-update-2.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/diLxv6y4Sr35GVeJe5cbLr/download/diLxv6y4Sr35GVeJe5cbLr"&gt;https://www.assembla.com/spaces/clojure/documents/diLxv6y4Sr35GVeJe5cbLr/download/diLxv6y4Sr35GVeJe5cbLr&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23879" author="importer" created="Tue, 24 Aug 2010 06:01:00 -0700">&lt;p&gt;stu said: [&lt;a href="file:diLxv6y4Sr35GVeJe5cbLr"&gt;file:diLxv6y4Sr35GVeJe5cbLr&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23880" author="importer" created="Tue, 24 Aug 2010 06:01:00 -0700">&lt;p&gt;stu said: The second patch includes the first, and adds another test.&lt;/p&gt;</comment>
                    <comment id="23881" author="importer" created="Tue, 24 Aug 2010 06:01:00 -0700">&lt;p&gt;tomfaulhaber said: This patch was attached to the wrong bug. It should be attached to bug #347. There is no fix for this bug yet.&lt;/p&gt;</comment>
                    <comment id="25921" author="richhickey" created="Fri, 5 Nov 2010 06:07:14 -0700">&lt;p&gt;Is this current?&lt;/p&gt;</comment>
                    <comment id="25980" author="stu" created="Mon, 29 Nov 2010 18:48:05 -0800">&lt;p&gt;Tom, this patch doesn't apply, and I am not sure why. Can you take a look?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>tomfaulhaber</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-326] add :as-of option to refer</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-326</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Discussed here: &lt;a href="http://groups.google.com/group/clojure-dev/msg/74af612909dcbe56"&gt;http://groups.google.com/group/clojure-dev/msg/74af612909dcbe56&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:as-of allows library authors to specify a known subset of vars to refer from clojure (or &lt;b&gt;any other library&lt;/b&gt; which would use :added metadata).&lt;/p&gt;

&lt;p&gt;(ns foo (:refer-clojure :as-of "1.1")) is equivalent to (ns foo (:refer-clojure :only &lt;span class="error"&gt;&amp;#91;public-documented-vars-which-already-existed-in-1.1&amp;#93;&lt;/span&gt;))&lt;/p&gt;</description>
                <environment/>
            <key id="13723">CLJ-326</key>
            <summary>add :as-of option to refer</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="cgrand">Christophe Grand</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Apr 2010 00:49:00 -0700</created>
                <updated>Tue, 24 Aug 2010 08:19:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23803" author="importer" created="Tue, 24 Aug 2010 08:19:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/326"&gt;http://www.assembla.com/spaces/clojure/tickets/326&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
add-as-of-to-refer.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/a8SumUvcOr37SmeJe5cbLA/download/a8SumUvcOr37SmeJe5cbLA"&gt;https://www.assembla.com/spaces/clojure/documents/a8SumUvcOr37SmeJe5cbLA/download/a8SumUvcOr37SmeJe5cbLA&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23804" author="importer" created="Tue, 24 Aug 2010 08:19:00 -0700">&lt;p&gt;cgrand said: [&lt;a href="file:a8SumUvcOr37SmeJe5cbLA"&gt;file:a8SumUvcOr37SmeJe5cbLA&lt;/a&gt;]: requires application of #325&lt;/p&gt;</comment>
                    <comment id="23805" author="importer" created="Tue, 24 Aug 2010 08:19:00 -0700">&lt;p&gt;richhickey said: Do we still need this?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10013">Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-319] TransactionalHashMap bug</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-319</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;TransactionalHashMap computation of the bin is buggy. The implementation doesn't unset the sign bit before using it in accessing the bin array which in some cases cause an ArrayOutOfBoundException to be thrown.&lt;/p&gt;

&lt;p&gt;As Rich Hickey has pointed out, this is an unsupported experimental Class and won't be fixed unless I provided a patch, so attached is the patch file.&lt;/p&gt;</description>
                <environment/>
            <key id="13716">CLJ-319</key>
            <summary>TransactionalHashMap bug</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Apr 2010 16:58:00 -0700</created>
                <updated>Fri, 1 Oct 2010 14:06:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="23762" author="importer" created="Fri, 1 Oct 2010 14:06:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/319"&gt;http://www.assembla.com/spaces/clojure/tickets/319&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
TransactionalHashMap.java.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/cuuZnsuuWr36H0eJe5dVir/download/cuuZnsuuWr36H0eJe5dVir"&gt;https://www.assembla.com/spaces/clojure/documents/cuuZnsuuWr36H0eJe5dVir/download/cuuZnsuuWr36H0eJe5dVir&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23763" author="importer" created="Fri, 1 Oct 2010 14:06:00 -0700">&lt;p&gt;megabyte2021 said: [&lt;a href="file:cuuZnsuuWr36H0eJe5dVir"&gt;file:cuuZnsuuWr36H0eJe5dVir&lt;/a&gt;]: The patch file&lt;/p&gt;</comment>
                    <comment id="23764" author="importer" created="Fri, 1 Oct 2010 14:06:00 -0700">&lt;p&gt;stu said: Please add a test case.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-304] contrib get-source no longer works with deftype</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-304</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Now that deftype creates a class (but not a var), you can't use c.c.repl-utils/get-source on a deftype. Is there something we can do on the Clojure side to help this work again?&lt;/p&gt;</description>
                <environment/>
            <key id="13701">CLJ-304</key>
            <summary>contrib get-source no longer works with deftype</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Apr 2010 19:18:00 -0700</created>
                <updated>Fri, 3 Dec 2010 09:44:01 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23670" author="importer" created="Tue, 24 Aug 2010 14:38:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/304"&gt;http://www.assembla.com/spaces/clojure/tickets/304&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23671" author="importer" created="Tue, 24 Aug 2010 14:38:00 -0700">&lt;p&gt;chouser@n01se.net said: That's a great question.  get-source just needs a file name and line number.&lt;/p&gt;

&lt;p&gt;If IMeta were a protocol, it could be extended to Class.  That implementation could look for a "well-known" static field, perhaps?  __clojure_meta or something?  Then deftype would just have to populate that field, and get-source would be all set.&lt;/p&gt;

&lt;p&gt;Does that plan have any merit?  Is there a better place to store a file name and line number?&lt;/p&gt;</comment>
                    <comment id="23672" author="importer" created="Tue, 24 Aug 2010 14:38:00 -0700">&lt;p&gt;stu said: Seems like a reasonable idea, but this is going to get back-burnered for now, unless there is a dire use case we have missed.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-291] (take-nth 0 coll) redux...</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-291</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I dont seem to be able make the old ticket uninvalid so here goes&lt;br/&gt;
(take-nth 0 coll) causes (at least on Solaris) infinite space and time consumption&lt;br/&gt;
It's not a printout error as the following code causes the problem too&lt;/p&gt;

&lt;p&gt;(let [j 0&lt;br/&gt;
 firstprod (apply * (doall (map #(- 1 %) (take-nth j (:props mix)))))]) ; from my parameter update function&lt;/p&gt;

&lt;p&gt;I used jvisualvm and the jvm is doing some RNI call - no clojure code is running at all&lt;br/&gt;
If left alone it will crash the jvm with all heap space consumed&lt;br/&gt;
0 is an InvalidArgument for take-nth&lt;br/&gt;
I wouldnt mind if it produced an infinite lazy sequence of nils even though thats wrong&lt;br/&gt;
It doesnt do this though it actively destroys the JVM&lt;br/&gt;
Its a bug nasty destructive and it took me half a day to figure out what was going on&lt;br/&gt;
please let someone fix it!&lt;/p&gt;</description>
                <environment/>
            <key id="13688">CLJ-291</key>
            <summary>(take-nth 0 coll) redux...</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Apr 2010 04:29:00 -0700</created>
                <updated>Fri, 10 Dec 2010 06:50:19 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23615" author="importer" created="Sun, 17 Oct 2010 07:47:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/291"&gt;http://www.assembla.com/spaces/clojure/tickets/291&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
fixbug291.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/dfNhoS2Cir3543eJe5cbLA/download/dfNhoS2Cir3543eJe5cbLA"&gt;https://www.assembla.com/spaces/clojure/documents/dfNhoS2Cir3543eJe5cbLA/download/dfNhoS2Cir3543eJe5cbLA&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23616" author="importer" created="Sun, 17 Oct 2010 07:47:00 -0700">&lt;p&gt;bhurt said: Before this bug gets marked as invalid as well, let me point out that the problem here is that (take-nth 0 any-list) is a meaningless construction- the only question is what to do when this happens.  IMHO, the correct behavior is to throw an exception.&lt;/p&gt;</comment>
                    <comment id="23617" author="importer" created="Sun, 17 Oct 2010 07:47:00 -0700">&lt;p&gt;ataggart said: [&lt;a href="file:dfNhoS2Cir3543eJe5cbLA"&gt;file:dfNhoS2Cir3543eJe5cbLA&lt;/a&gt;]: throws IllegalArgumentException on negative step size&lt;/p&gt;</comment>
                    <comment id="25891" author="stu" created="Fri, 29 Oct 2010 08:36:34 -0700">&lt;p&gt;Does calling (take-nth 0 ...) cause the problem, or only realizing the result?&lt;/p&gt;</comment>
                    <comment id="25892" author="chouser@n01se.net" created="Fri, 29 Oct 2010 09:06:01 -0700">&lt;p&gt;I'm not seeing a problem.  Calling take-nth and even partially consuming the seq it returns works fine for me:&lt;/p&gt;

&lt;p&gt;(take 5 (take-nth 0 &lt;span class="error"&gt;&amp;#91;1 2 3&amp;#93;&lt;/span&gt;))&lt;br/&gt;
;=&amp;gt; (1 1 1 1 1)&lt;/p&gt;

&lt;p&gt;Note however that it is returning an infinite lazy seq.  The example in the issue description seems to include essentially (doall &amp;lt;infinite-lazy-seq&amp;gt;) which does blow the heap:&lt;/p&gt;

&lt;p&gt;(doall (range))&lt;/p&gt;

&lt;p&gt;This issue still strikes me as invalid.&lt;/p&gt;</comment>
                    <comment id="25893" author="richhickey" created="Fri, 29 Oct 2010 09:06:02 -0700">&lt;p&gt;(take-nth 0 ...) returns an infinite sequence of the first item:&lt;/p&gt;

&lt;p&gt;(take 12 (take-nth 0 &lt;span class="error"&gt;&amp;#91;1 2 3&amp;#93;&lt;/span&gt;))&lt;br/&gt;
=&amp;gt; (1 1 1 1 1 1 1 1 1 1 1 1)&lt;/p&gt;

&lt;p&gt;Is something other than this happening on Solaris?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-288] Make clojure.core/merge-with accept a wider range of map types</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-288</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The current implementation of merge-with works only with map types that implement the IFn protocol for key lookup. In particular, this means that it doesn't work with map-like types created with deftype. The attached patch replaces the call to the map by a call to clojure.core/get, which works on any map-like type.&lt;/p&gt;</description>
                <environment/>
            <key id="13685">CLJ-288</key>
            <summary>Make clojure.core/merge-with accept a wider range of map types</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Apr 2010 05:56:00 -0700</created>
                <updated>Tue, 24 Aug 2010 08:11:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23600" author="importer" created="Tue, 24 Aug 2010 08:11:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/288"&gt;http://www.assembla.com/spaces/clojure/tickets/288&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
merge-with-enhancements.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/cIq-tspyur375WeJe5avMc/download/cIq-tspyur375WeJe5avMc"&gt;https://www.assembla.com/spaces/clojure/documents/cIq-tspyur375WeJe5avMc/download/cIq-tspyur375WeJe5avMc&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-277] Making clojure.xml/emit a little friendler to xml consumers</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-277</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently, clojure.xml/emit breaks the eBay api, because emit adds whitespace before and after :contents. This trivial patch fixes it for me:&lt;br/&gt;
&lt;a href="http://github.com/tjg/clojure/commit/bbff079d26e627c655b847319a58d76b8b3cec7c"&gt;http://github.com/tjg/clojure/commit/bbff079d26e627c655b847319a58d76b8b3cec7c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Dunno whether there's a good reason emit works that way, or if I'm missing something obvious.)&lt;/p&gt;

&lt;p&gt;I realize that emit's behavior conforms to the XML spec and it's probably eBay at fault here. But I can nevertheless see this whitespace causing problems.&lt;/p&gt;</description>
                <environment/>
            <key id="13674">CLJ-277</key>
            <summary>Making clojure.xml/emit a little friendler to xml consumers</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Mar 2010 15:58:00 -0800</created>
                <updated>Tue, 24 Aug 2010 07:41:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23539" author="importer" created="Tue, 24 Aug 2010 07:41:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/277"&gt;http://www.assembla.com/spaces/clojure/tickets/277&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23540" author="importer" created="Tue, 24 Aug 2010 07:41:00 -0700">&lt;p&gt;bpsm said: I've attached a patch to #410, which also fixes this issue. (In fact, it turns out that it's the same patch tlj previously attached here.)&lt;/p&gt;</comment>
                    <comment id="23541" author="importer" created="Tue, 24 Aug 2010 07:41:00 -0700">&lt;p&gt;stu said: &lt;b&gt;Duplicated&lt;/b&gt; association with ticket #410 was added&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-274] cannot close over mutable fields (in deftype)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-274</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Simplest case:&lt;/p&gt;

&lt;p&gt;user=&amp;gt;&lt;br/&gt;
(deftype Bench &lt;span class="error"&gt;&amp;#91;#^{:unsynchronized-mutable true} val&amp;#93;&lt;/span&gt;&lt;br/&gt;
  Runnable&lt;br/&gt;
  (run &lt;span class="error"&gt;&amp;#91;_&amp;#93;&lt;/span&gt;&lt;br/&gt;
    (fn [] (set! val 5))))&lt;/p&gt;

&lt;p&gt;java.lang.IllegalArgumentException: Cannot assign to non-mutable: val (NO_SOURCE_FILE:5)&lt;/p&gt;

&lt;p&gt;Functions should be able to mutate mutable fields in their surrounding deftype (just like inner classes do in Java).&lt;/p&gt;

&lt;p&gt;Filed as bug, because the loop special form expands into a fn form sometimes:&lt;/p&gt;

&lt;p&gt;user=&amp;gt;&lt;br/&gt;
(deftype Bench &lt;span class="error"&gt;&amp;#91;#^{:unsynchronized-mutable true} val&amp;#93;&lt;/span&gt;&lt;br/&gt;
  Runnable&lt;br/&gt;
  (run &lt;span class="error"&gt;&amp;#91;_&amp;#93;&lt;/span&gt;&lt;br/&gt;
    (let [x (loop [] (set! val 5))])))&lt;br/&gt;
java.lang.IllegalArgumentException: Cannot assign to non-mutable: val (NO_SOURCE_FILE:9)&lt;/p&gt;</description>
                <environment/>
            <key id="13671">CLJ-274</key>
            <summary>cannot close over mutable fields (in deftype)</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Feb 2010 14:41:00 -0800</created>
                <updated>Fri, 1 Oct 2010 07:35:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23526" author="importer" created="Fri, 1 Oct 2010 07:35:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/274"&gt;http://www.assembla.com/spaces/clojure/tickets/274&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23527" author="importer" created="Fri, 1 Oct 2010 07:35:00 -0700">&lt;p&gt;donmullen said: Updated each run to &lt;span class="error"&gt;&amp;#91;_&amp;#93;&lt;/span&gt; for new syntax.&lt;/p&gt;

&lt;p&gt;Now gives exception listed.&lt;/p&gt;</comment>
                    <comment id="23528" author="importer" created="Fri, 1 Oct 2010 07:35:00 -0700">&lt;p&gt;richhickey said: We're not going to allow closing over mutable fields. Instead we'll have to generate something other than fn for loops et al used as expressions. Not going to come before cinc&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-273] def with a function value returns meta {:macro false}, but def itself doesn't have meta</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-273</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;On the master (1.2) branch, if you create a def with an initial function value, {:macro false} is added to the metadata of the return value for def. However, if you look again at the metadata on the var itself, the {:macro false} is not present! This breaks the use of contrib's defalias when aliasing macros, because the new alias is marked as {:macro false}.&lt;/p&gt;

&lt;p&gt;The code below demonstrates the issue, which was introduced in &lt;a href="http://github.com/richhickey/clojure/commit/430dd4fa711d0008137d7a82d4b4cd27b6e2d6d1"&gt;http://github.com/richhickey/clojure/commit/430dd4fa711d0008137d7a82d4b4cd27b6e2d6d1&lt;/a&gt;, "metadata for fns."&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;;; all running on 1.2, DIFF noted in comments

(defmacro foo [])
-&amp;gt; #'user/foo

(meta (def bar (.getRoot #'foo)))
-&amp;gt; {:macro &lt;span class="code-keyword"&gt;false&lt;/span&gt;, :ns #&amp;lt;Namespace user&amp;gt;, :name bar, :file &lt;span class="code-quote"&gt;"NO_SOURCE_PATH"&lt;/span&gt;, :line 83}
;; DIFF: where did that :macro &lt;span class="code-keyword"&gt;false&lt;/span&gt; come from??

(def bar (.getRoot #'foo))
-&amp;gt; #'user/bar

(meta #'bar)
-&amp;gt; {:ns #&amp;lt;Namespace user&amp;gt;, :name bar, :file &lt;span class="code-quote"&gt;"NO_SOURCE_PATH"&lt;/span&gt;, :line 84}
;; LIKE 1.1, but really weird: now the :macro &lt;span class="code-keyword"&gt;false&lt;/span&gt; is gone again!&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13670">CLJ-273</key>
            <summary>def with a function value returns meta {:macro false}, but def itself doesn't have meta</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="richhickey">Rich Hickey</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Feb 2010 06:16:00 -0800</created>
                <updated>Tue, 24 Aug 2010 07:32:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23525" author="importer" created="Tue, 24 Aug 2010 07:32:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/273"&gt;http://www.assembla.com/spaces/clojure/tickets/273&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-272] load/ns/require/use overhaul</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-272</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Creating this ticket to describe various things people have wanted to change about how ns works:&lt;/p&gt;

&lt;h2&gt;&lt;a name="Minimalneeds"&gt;&lt;/a&gt;Minimal needs  &lt;/h2&gt;

&lt;ol&gt;
	&lt;li&gt;there should be a primitive level of loading (presumably &lt;tt&gt;load&lt;/tt&gt;) that just loads without question.&lt;/li&gt;
	&lt;li&gt;the api should be unified across the ns and direct forms. No more keywords or quoting! So &lt;tt&gt;(use foo)&amp;lt;/code&amp;gt; not &amp;lt;code&amp;gt;(use 'foo)&amp;lt;/code&amp;gt;. This makes &amp;lt;code&amp;gt;use&amp;lt;/code&amp;gt; et al macros, so there should also be new fn versions (maybe &amp;lt;code&amp;gt;use*&lt;/tt&gt;).&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;&lt;a name="Otherpossibilitiestodiscuss."&gt;&lt;/a&gt;Other possibilities to discuss.&lt;/h2&gt;

&lt;ol&gt;
	&lt;li&gt;Feature addressing the {{:like&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;:clone&amp;lt;/code&amp;gt; ideas from &lt;a href="http://onclojure.com/2010/02/17/managing-namespaces/"&gt;http://onclojure.com/2010/02/17/managing-namespaces/&lt;/a&gt;. I think I would prefer a single new option &amp;lt;code&amp;gt;:clone&amp;lt;/code&amp;gt; which allows &amp;lt;code&amp;gt;:only&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;:exclude}} features as subspecifiers.&lt;/li&gt;
	&lt;li&gt;Convenience fn to unmap all names in a namespace?&lt;/li&gt;
&lt;/ol&gt;
</description>
                <environment/>
            <key id="13669">CLJ-272</key>
            <summary>load/ns/require/use overhaul</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Feb 2010 01:47:00 -0800</created>
                <updated>Tue, 28 Feb 2012 01:56:11 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>3</votes>
                        <watches>6</watches>
                        <comments>
                    <comment id="23522" author="importer" created="Tue, 24 Aug 2010 07:27:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/272"&gt;http://www.assembla.com/spaces/clojure/tickets/272&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23523" author="importer" created="Tue, 24 Aug 2010 07:27:00 -0700">&lt;p&gt;stu said: Suggestions from Volkan Yazici:&lt;/p&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I saw your "load/ns/require/use overhaul" ticket&lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt; and would like to&lt;br/&gt;
ask for a few extra overhaulings. I have a project called retop, and&lt;br/&gt;
here is its file hiearachy:&lt;/p&gt;

&lt;p&gt; tr/edu/bilkent/cs/retop.clj&lt;br/&gt;
 tr/edu/bilkent/cs/retop/km.clj&lt;br/&gt;
 tr/edu/bilkent/cs/retop/graph.clj&lt;br/&gt;
 tr/edu/bilkent/cs/retop/main.clj&lt;br/&gt;
 tr/edu/bilkent/cs/retop/util.clj&lt;/p&gt;

&lt;p&gt;In retop.clj, I have below ns definition.&lt;/p&gt;

&lt;p&gt; (ns tr.edu.bilkent.cs.retop&lt;br/&gt;
   (:gen-class)&lt;br/&gt;
   (:import&lt;br/&gt;
    (com.sun.jna&lt;br/&gt;
     Function&lt;br/&gt;
     Pointer)&lt;br/&gt;
    (com.sun.jna.ptr&lt;br/&gt;
     IntByReference)&lt;br/&gt;
    (tr.edu.bilkent.cs.patoh&lt;br/&gt;
     HyperGraph&lt;br/&gt;
     HyperGraphException&lt;br/&gt;
     Parititoning&lt;br/&gt;
     ParititoningParameters))&lt;br/&gt;
   (:load&lt;br/&gt;
    "retop/util"&lt;br/&gt;
    "retop/km"&lt;br/&gt;
    "retop/graph"&lt;br/&gt;
    "retop/main"))&lt;/p&gt;

&lt;p&gt;And in every .clj file in retop/ directory I have below in-ns in the&lt;br/&gt;
very first line.&lt;/p&gt;

&lt;p&gt; (in-ns 'tr.edu.bilkent.cs.retop)&lt;/p&gt;

&lt;p&gt;The problems with the ns decleration are:&lt;/p&gt;

&lt;p&gt;1) Most of the :import's in retop.clj only belong to a single .clj file.&lt;br/&gt;
  For instance,&lt;/p&gt;

&lt;p&gt;    (tr.edu.bilkent.cs.patoh&lt;br/&gt;
     HyperGraph&lt;br/&gt;
     HyperGraphException&lt;br/&gt;
     Parititoning&lt;br/&gt;
     ParititoningParameters)&lt;/p&gt;

&lt;p&gt;  imports are only used by graph.clj. Yep, I can add an (import ...)&lt;br/&gt;
  line just after the (in-ns ...), but wouldn't it be better if I can&lt;br/&gt;
  specify that in (in-ns ...) form?&lt;/p&gt;

&lt;p&gt;2) See (:load ...) clause in (ns ...) form. There are lots of&lt;br/&gt;
  unnecessary directory prefixes. I'd be prefer something ala Common&lt;br/&gt;
  Lisp's defpackage:&lt;/p&gt;

&lt;p&gt;    (:load&lt;br/&gt;
     "packages"   ; packages.clj&lt;br/&gt;
     ("retop"&lt;br/&gt;
      "util"      ; retop/util.clj&lt;br/&gt;
      "km"        ; retop/km.clj&lt;br/&gt;
      "graph"     ; retop/graph.clj&lt;br/&gt;
      ("graph"&lt;br/&gt;
       "foo"      ; retop/graph/foo.clj&lt;br/&gt;
       "bar)      ; retop/graph/bar.clj&lt;br/&gt;
      "main"))    ; retop/main.clj&lt;/p&gt;

&lt;p&gt;  Also, being able to use wildcards would be awesome.&lt;/p&gt;

&lt;p&gt;3) There are inconsistencies between macros and functions. For instance,&lt;br/&gt;
  consider:&lt;/p&gt;

&lt;p&gt;    (ns foo.bar.baz (:use mov))&lt;br/&gt;
    (in-ns 'foo.bar.baz)&lt;br/&gt;
    (use 'mov)&lt;/p&gt;

&lt;p&gt;  I'd like to get rid of quotations in both cases.&lt;/p&gt;

&lt;p&gt;I'm not sure if I'm using the right tools and doing the right approach&lt;br/&gt;
for such a project. But if you agree with the above overhauling&lt;br/&gt;
requirements, I'd like to see them appear in the same assembla ticket as&lt;br/&gt;
well.&lt;/p&gt;</comment>
                    <comment id="23524" author="importer" created="Tue, 24 Aug 2010 07:27:00 -0700">&lt;p&gt;stuart.sierra said: My requests:&lt;/p&gt;

&lt;p&gt;1. If writing macros that do not evaluate their arguments, provide function versions that do evaluate their arguments.&lt;/p&gt;

&lt;p&gt;2. Do not support prefix lists for loading Clojure namespaces.  It's hard to parse with external tools.&lt;/p&gt;

&lt;p&gt;3. Do not conflate importing Java classes with loading Clojure namespaces.  They are fundamentally different operations with different semantics.&lt;/p&gt;

&lt;p&gt;I have implemented some ideas in a macro called "need" at &lt;a href="http://github.com/stuartsierra/need"&gt;http://github.com/stuartsierra/need&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26026" author="stuart.sierra" created="Sun, 12 Dec 2010 14:08:30 -0800">&lt;p&gt;Further requests:&lt;/p&gt;

&lt;p&gt;Permit tools to read the "ns" declaration and statically determine the dependencies of a namespace, without evaluating any code.&lt;/p&gt;</comment>
                    <comment id="27883" author="pmoriarty" created="Tue, 28 Feb 2012 01:56:11 -0800">&lt;blockquote&gt;&lt;p&gt;Permit tools to read the "ns" declaration and statically determine the dependencies of a namespace, without evaluating any code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be great for building OSGi bundles where Bnd is currently not  much help.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-270] defn-created fns inherit old metadata from the Var they are assigned to</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-270</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;ul&gt;
	&lt;li&gt;What (small set of) steps will reproduce the problem?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;user&amp;gt; (def #^{:foo "bar"} x 5)&lt;br/&gt;
#'user/x&lt;br/&gt;
user&amp;gt; (meta #'x)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name x, :file "NO_SOURCE_FILE", :line 1, :foo "bar"}&lt;br/&gt;
user&amp;gt; (defn x [] 5)&lt;br/&gt;
#'user/x&lt;br/&gt;
user&amp;gt; (meta #'x)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name x, :file "NO_SOURCE_FILE", :line 1, :arglists ([])}&lt;br/&gt;
user&amp;gt; (meta x)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name x, :file "NO_SOURCE_FILE", :line 1, :foo "bar"}&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;What is the expected output? What do you see instead?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I expect (meta #'x) to evaluate to the value of the final (meta x) in the above.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;What version are you using?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Current master (commit 61202d2ff6925002400a9843e8fbd080f3bef3a5).&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Was this discussed on the group? If so, please provide a link to the discussion.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/4c7151aa9c4d919c/d1b033ef5a13dd89?lnk=gst&amp;amp;q=off-by-one#d1b033ef5a13dd89"&gt;http://groups.google.com/group/clojure/browse_thread/thread/4c7151aa9c4d919c/d1b033ef5a13dd89?lnk=gst&amp;amp;q=off-by-one#d1b033ef5a13dd89&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prompted by discussion at&lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/6553d48c981019eb/3c55b0bd43a5d8e9?lnk=gst&amp;amp;q=off-by-one#3c55b0bd43a5d8e9"&gt;http://groups.google.com/group/clojure/browse_thread/thread/6553d48c981019eb/3c55b0bd43a5d8e9?lnk=gst&amp;amp;q=off-by-one#3c55b0bd43a5d8e9&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Initial attempt at a diagnosis:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think this is due to DefExpr's eval method binding the Var to init.eval() first and attaching the supplied metadata to the Var later &amp;#8211; see Compiler.java lines 341-352. (Note the Var is always already in place when init.eval() is called, regardless of whether it existed prior to the evaluation of the def / defn.) Thus the init expression supplied by defn sees the old (and wrong) metadata on the Var.&lt;/p&gt;</description>
                <environment/>
            <key id="13667">CLJ-270</key>
            <summary>defn-created fns inherit old metadata from the Var they are assigned to</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="richhickey">Rich Hickey</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sat, 13 Feb 2010 17:05:00 -0800</created>
                <updated>Tue, 24 Aug 2010 04:23:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23509" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/270"&gt;http://www.assembla.com/spaces/clojure/tickets/270&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
dont-copy-val-metadata-onto-new-var-value-in-defn.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/dwK4yssayr37y_eJe5d-aX/download/dwK4yssayr37y_eJe5d-aX"&gt;https://www.assembla.com/spaces/clojure/documents/dwK4yssayr37y_eJe5d-aX/download/dwK4yssayr37y_eJe5d-aX&lt;/a&gt;&lt;br/&gt;
0001-set-meta-on-vars-before-evaluating-their-init-see-27.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/arrhbiAI4r35lQeJe5cbLr/download/arrhbiAI4r35lQeJe5cbLr"&gt;https://www.assembla.com/spaces/clojure/documents/arrhbiAI4r35lQeJe5cbLr/download/arrhbiAI4r35lQeJe5cbLr&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23510" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;stu said: [&lt;a href="file:dwK4yssayr37y_eJe5d-aX"&gt;file:dwK4yssayr37y_eJe5d-aX&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23511" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;stu said: The problem happens with defn, but not with def+fn, so I think the original diagnosis is incorrect. &lt;/p&gt;

&lt;p&gt;Another stab at diagnosis: The defn macro copies metadata from a var onto its new value, so if you defn a var that already exists, the old var metadata becomes metadata on the new value. I don't know why this would be the right thing to do, and if you eliminate this behavior (see patch) all the Clojure and Contrib tests still pass.&lt;/p&gt;

&lt;p&gt;If this is correct, please assign back to me and I will write tests. If this is wrong, please tell me what's going on here so I know how to write the tests.&lt;/p&gt;</comment>
                    <comment id="23512" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: &lt;b&gt;Child&lt;/b&gt; association with ticket #363 was added&lt;/p&gt;</comment>
                    <comment id="23513" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: I think the original diagnosis is correct. Note that the behavior differ when def iscompiled:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (def #^{:foo "bar"} x 5)&lt;br/&gt;
#'user/x&lt;br/&gt;
user=&amp;gt; (let [] (defn x [] 5))&lt;br/&gt;
#'user/x&lt;br/&gt;
user=&amp;gt; (meta x)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name x, :file "NO_SOURCE_PATH", :line 83, :arglists ([])}&lt;br/&gt;
user=&amp;gt; (meta #'x)&lt;br/&gt;
{:ns #&amp;lt;Namespace user&amp;gt;, :name x, :file "NO_SOURCE_PATH", :line 83, :arglists ([])}&lt;/p&gt;

&lt;p&gt;See also &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/6afd81896ca368b2#"&gt;http://groups.google.com/group/clojure/browse_thread/thread/6afd81896ca368b2#&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23514" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: [&lt;a href="file:arrhbiAI4r35lQeJe5cbLr"&gt;file:arrhbiAI4r35lQeJe5cbLr&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23515" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: My patch aligns DefExpr.eval with DefExpr.emit (first set meta then eval the init value).&lt;/p&gt;</comment>
                    <comment id="23516" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: Forget it, my current patch is broken.&lt;/p&gt;</comment>
                    <comment id="23517" author="importer" created="Tue, 24 Aug 2010 04:23:00 -0700">&lt;p&gt;cgrand said: My current patch is broken because of #352, what is the rational for #352?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-259] clojure.lang.Reflector.invokeMatchingMethod is not complete (rejects pontentially valid method invocations)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-259</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;There exists invoke expressions on instances, where Java is able to perform the call, yet clojure is not reflectively.&lt;br/&gt;
The problem is when the declaringClass of the found method is not public then the call to getAsMethodOfPublicBase uses the found method or searching for classes/interfaces that contain/define this method yet are declared publicly.&lt;/p&gt;

&lt;p&gt;This restricts the possible search space. I suggest that if target is not null (e.g. is not a static method), the target.getClass() should be used instead as a root for getAsMethodOfPublicBase.&lt;br/&gt;
This fixes my issue.&lt;/p&gt;</description>
                <environment/>
            <key id="13656">CLJ-259</key>
            <summary>clojure.lang.Reflector.invokeMatchingMethod is not complete (rejects pontentially valid method invocations)</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Feb 2010 20:05:00 -0800</created>
                <updated>Tue, 24 Aug 2010 13:12:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="23449" author="importer" created="Tue, 24 Aug 2010 13:12:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/259"&gt;http://www.assembla.com/spaces/clojure/tickets/259&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23450" author="importer" created="Tue, 24 Aug 2010 13:12:00 -0700">&lt;p&gt;richhickey said: How about some sample case that demonstrates the problem?&lt;/p&gt;</comment>
                    <comment id="23451" author="importer" created="Tue, 24 Aug 2010 13:12:00 -0700">&lt;p&gt;hiredman said: &lt;b&gt;Related&lt;/b&gt; association with ticket #126 was added&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-252] Support typed non-primitive fields in deftype</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-252</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Right now hints are accepted but not used as field type.&lt;/p&gt;</description>
                <environment/>
            <key id="13649">CLJ-252</key>
            <summary>Support typed non-primitive fields in deftype</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Jan 2010 03:52:00 -0800</created>
                <updated>Tue, 24 Aug 2010 04:07:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23419" author="importer" created="Tue, 24 Aug 2010 04:07:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/252"&gt;http://www.assembla.com/spaces/clojure/tickets/252&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-250] debug builds</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-250</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This ticket includes two patches: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;a patch to set  &lt;tt&gt;&lt;b&gt;assert&lt;/b&gt;&lt;/tt&gt; when clojure.lang.RT loads, based on the presence of system property clojure.debug&lt;/li&gt;
	&lt;li&gt;expand error messages in assert to include &lt;tt&gt;local-bindings&amp;lt;/code&amp;gt; (a new macro which wraps the implicit &amp;lt;code&amp;gt;&amp;amp;env&lt;/tt&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Things to consider before approving these patches:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;should there be an easy Clojure-level way to query if debug is enabled? (checking assert isn't the same, as debug should eventually drive other features)&lt;/li&gt;
	&lt;li&gt;assertions will now be off by default &amp;#8211; this is a change!&lt;/li&gt;
	&lt;li&gt;is the addition of the name &lt;tt&gt;local-bindings&lt;/tt&gt; to clojure.core cool?&lt;/li&gt;
&lt;/ol&gt;
</description>
                <environment/>
            <key id="13647">CLJ-250</key>
            <summary>debug builds</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stu">Stuart Halloway</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Jan 2010 15:40:00 -0800</created>
                <updated>Tue, 23 Aug 2011 15:38:28 -0700</updated>
                                    <version>Release 1.2</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="23417" author="importer" created="Tue, 24 Aug 2010 04:05:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/250"&gt;http://www.assembla.com/spaces/clojure/tickets/250&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
add-clojure-debug-flag.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aUWn50c64r35E-eJe5aVNr/download/aUWn50c64r35E-eJe5aVNr"&gt;https://www.assembla.com/spaces/clojure/documents/aUWn50c64r35E-eJe5aVNr/download/aUWn50c64r35E-eJe5aVNr&lt;/a&gt;&lt;br/&gt;
assert-report-locals.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aUWqLSc64r35E-eJe5aVNr/download/aUWqLSc64r35E-eJe5aVNr"&gt;https://www.assembla.com/spaces/clojure/documents/aUWqLSc64r35E-eJe5aVNr/download/aUWqLSc64r35E-eJe5aVNr&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26008" author="stu" created="Tue, 7 Dec 2010 18:23:13 -0800">&lt;p&gt;Ignore the old patches. Considering the following implementation, please review and then move ticket to waiting on Stu:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;RT will check system property &lt;tt&gt;"clojure.debug"&lt;/tt&gt;, default to false&lt;/li&gt;
	&lt;li&gt;property will set the root binding for the current &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt;, plus a new &lt;tt&gt;&amp;#42;debug&amp;#42;&lt;/tt&gt; flag. (Debug builds can and will drive other things than just asserts.)&lt;/li&gt;
	&lt;li&gt;does Compile.java need to push &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt; or &lt;tt&gt;&amp;#42;debug&amp;#42;&lt;/tt&gt; as thread local bindings, or can they be root-bound only when compiling clojure?&lt;/li&gt;
	&lt;li&gt;will add &lt;tt&gt;&amp;#42;debug&amp;#42;&lt;/tt&gt; binding to &lt;tt&gt;clojure.main/with-bindings&lt;/tt&gt;. Anywhere else?&lt;/li&gt;
	&lt;li&gt;build.xml should not have to change &amp;#8211; system properties will flow through (and build.xml may not be around much longer anyway)&lt;/li&gt;
	&lt;li&gt;once we agree on the approach, I will ping maven plugin and lein owners so that they flow the setting through&lt;/li&gt;
	&lt;li&gt;better assertion messages will be a separate ticket&lt;/li&gt;
	&lt;li&gt;what is the interaction between &amp;#42;debug&amp;#42; and &amp;#42;unchecked-math&amp;#42;? Change checks to &lt;tt&gt;(and &amp;#42;unchecked-math&amp;#42; (not &amp;#42;debug&amp;#42;))&lt;/tt&gt;}?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="26012" author="richhickey" created="Wed, 8 Dec 2010 09:00:04 -0800">&lt;p&gt;#3 - root bound only&lt;br/&gt;
#4 - should &lt;b&gt;not&lt;/b&gt; be in with-bindings for same reason as #3 - we don't want people to set! &amp;#42;debug&amp;#42; nor &amp;#42;assert&amp;#42;&lt;br/&gt;
#8 - yes, wrapping that in a helper fn&lt;/p&gt;

&lt;p&gt;#6 - my biggest reservation is that this isn't yet informed by maven best practices&lt;/p&gt;</comment>
                    <comment id="26013" author="stuart.sierra" created="Wed, 8 Dec 2010 12:09:49 -0800">&lt;p&gt;System properties can be passed through Maven, so I do not anticipate this being a problem.&lt;/p&gt;

&lt;p&gt;However, I would prefer &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt; to remain true by default.&lt;/p&gt;</comment>
                    <comment id="26015" author="cemerick" created="Thu, 9 Dec 2010 05:19:33 -0800">&lt;p&gt;SS is correct about this approach not posing any issue for Maven.  In addition, the build could easily be set up to always emit two jars, one "normal", one "debug".&lt;/p&gt;

&lt;p&gt;I'd suggest that, while &lt;tt&gt;clojure.debug&lt;/tt&gt; might have broad effect, additional properties should be available to provide fine-grained control over each of the additional "debug"-related parameterizations that might become available in the future.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I'd like to raise a couple of potentially tangential concerns (after now thinking about assertions for a bit in the above context), some or all of which may simply be a result of my lack of understanding in various areas.&lt;/p&gt;

&lt;p&gt;Looking at where &lt;tt&gt;assert&lt;/tt&gt; is used in &lt;tt&gt;core.clj&lt;/tt&gt; (only two places AFAICT: validating arguments to &lt;tt&gt;derive&lt;/tt&gt; and checking pre- and post-conditions in &lt;tt&gt;fn&lt;/tt&gt;), it would seem unwise to make it &lt;tt&gt;false&lt;/tt&gt; by default.  i.e. non-&lt;tt&gt;Named&lt;/tt&gt; values would be able to get into hierarchies, and pre- and post-conditions would simply be ignored.&lt;/p&gt;

&lt;p&gt;It's my understanding that assertions (talking here of the JVM construct, from which Clojure reuses &lt;tt&gt;AssertionError&lt;/tt&gt;) should not be used to validate arguments to public API functions, or used to validate any aspect of a function's normal operation (i.e. &lt;a href="http://download.oracle.com/javase/1.4.2/docs/guide/lang/assert.html#usage"&gt;"where not to use assertions"&lt;/a&gt;).  That would imply that &lt;tt&gt;derive&lt;/tt&gt; should throw &lt;tt&gt;IllegalArugmentException&lt;/tt&gt; when necessary, and fn pre- and post-conditions should perhaps throw &lt;tt&gt;IllegalStateException&lt;/tt&gt; &amp;#8211; or, in any case, something other than &lt;tt&gt;AssertionError&lt;/tt&gt; via &lt;tt&gt;assert&lt;/tt&gt;.  This would match up far better with most functions in core using &lt;tt&gt;assert-args&lt;/tt&gt; rather than &lt;tt&gt;assert&lt;/tt&gt;, the former throwing &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; rather than &lt;tt&gt;AssertionError&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;That leads me to the question: is &lt;tt&gt;assert&lt;/tt&gt; (and &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt;) intended to be a Clojure construct, or a quasi-interop form?&lt;/p&gt;

&lt;p&gt;If the former, then it can roughly have whatever semantics we want, but then it seems like it should not be throwing &lt;tt&gt;AssertionError&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;If the latter, then &lt;tt&gt;AssertionError&lt;/tt&gt; is appropriate on the JVM, but then we need to take care that assertions can be enabled and disabled at runtime (without having to switch around different builds of Clojure), ideally using the host-defined switches (e.g. &lt;tt&gt;-ea&lt;/tt&gt; and friends) and likely not anything like &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt;. I don't know if this is possible or practical at this point (I presume this would require nontrivial compiler changes).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully the above is not water under the bridge at this point.  Thank you in advance for your forbearance. &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/wink.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</comment>
                    <comment id="26016" author="richhickey" created="Thu, 9 Dec 2010 06:08:07 -0800">&lt;p&gt;Thanks for the useful input Chas. Nothing is concluded yet. I think we should step back and look at the objective here, before moving forward with a solution. Being a dynamic language, there are many things we might want to validate about our programs, where the cost of checking is something we are unwilling to pay in production.&lt;/p&gt;

&lt;p&gt;Being a macro, assert has the nice property that, should &amp;#42;assert&amp;#42; not be true during compilation, it generates nil, no conditional test at all. Thus right now it is more like static conditional compilation.&lt;/p&gt;

&lt;p&gt;Java assert does have runtime toggle-ability, via &amp;#45;ea as you say. I haven't looked at the bytecode generated for Java asserts, but it might be possible for Clojure assert to do something similar, if the runtime overhead is negligible. It is quite likely that HotSpot has special code for eliding the assertion bytecode given a single check of some flag. I'm just not sure that flag is &lt;a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html#desiredAssertionStatus()"&gt;Class.desiredAssertionStatus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whether this turns into changes in assert or pre/post conditions, best practices etc is orthogonal and derived. Currently we don't have a facility to run without the checks. We need to choose between making them disappear during compilation (debug build) or runtime (track &amp;#45;ea) or both. Then we can look at how that is reflected in assert/pre-post and re-examine existing use of both. The "where not to use assertions" doc deals with them categorically, but in not considering their cost, seems unrealistic IMO. &lt;/p&gt;

&lt;p&gt;I'd appreciate it if someone could look into how assert is generated and optimized by Java itself.&lt;/p&gt;</comment>
                    <comment id="26018" author="cemerick" created="Thu, 9 Dec 2010 15:04:52 -0800">&lt;p&gt;Bytecode issues continue to be above my pay grade, unfortunately…&lt;/p&gt;

&lt;p&gt;A few additional thoughts in response that you may or may not be juggling already:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;assert&lt;/tt&gt; being a macro makes total sense for what it's doing.  Trouble is, "compile-time" is a tricky concept in Clojure: there's code-loading-time, AOT-compile-time, and transitively-AOT-compile-time.  Given that, it's entirely possible for an application deployed to a production environment that contains a patchwork of code or no code produced by &lt;tt&gt;assert&lt;/tt&gt; usages in various libraries and namespaces depending upon when those libs and ns' were loaded, AOT-compiled, or their dependents AOT-compiled, and the value of &lt;tt&gt;&amp;#42;assert&amp;#42;&lt;/tt&gt; at each of those times.  Of course, this is the case for all such macros whose results are dependent upon context-dependent state (I think this was a big issue with &lt;tt&gt;clojure.contrib.logging&lt;/tt&gt;, making it only usable with log4j for a while).&lt;/p&gt;

&lt;p&gt;What's really attractive about the JVM assertion mechanism is that it can be parameterized for a given runtime on a per-package basis, if desired.  Reimplementing that concept so that &lt;tt&gt;assert&lt;/tt&gt; can be &lt;tt&gt;&amp;#42;ns&amp;#42;&lt;/tt&gt;-sensitive seems like it'd be straightforward, but the compile-time complexity already mentioned remains, and the idea of having two independently-controlled assertion facilities doesn't sound fun.&lt;/p&gt;

&lt;p&gt;I know nearly nothing about the CLR, but it would appear that it doesn't provide for anything like runtime-controllable assertions.&lt;/p&gt;</comment>
                    <comment id="26068" author="stu" created="Wed, 29 Dec 2010 13:17:44 -0800">&lt;p&gt;The best (dated) evidence I could find says that the compiler sets a special class static final field &lt;tt&gt;$assertionsDisabled&lt;/tt&gt; based on the return of &lt;tt&gt;desiredAssertionStatus&lt;/tt&gt;. HotSpot doesn't do anything special with this, dead code elimination simply makes it go away. The code indeed compiles this way:&lt;/p&gt;

&lt;p&gt;   11:	getstatic	#6; //Field $assertionsDisabled:Z&lt;br/&gt;
   14:	ifne	33&lt;br/&gt;
   17:	lload_1&lt;br/&gt;
   18:	lconst_0&lt;br/&gt;
   19:	lcmp&lt;br/&gt;
   20:	ifeq	33&lt;br/&gt;
   23:	new	#7; //class java/lang/AssertionError&lt;br/&gt;
   26:	dup&lt;br/&gt;
   27:	ldc	#8; //String X should be zero&lt;br/&gt;
   29:	invokespecial	#9; //Method java/lang/AssertionError."&amp;lt;init&amp;gt;":(Ljava/lang/Object;)V&lt;br/&gt;
   32:	athrow&lt;/p&gt;

&lt;p&gt;Even if we were 100% sure that assertion removal was total, I would still vote for a separate Clojure-level switch, for the following reasons:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I have a real and pressing need to disable some assertions, and I don't need the Java interop at all. Arguably others will be in the same boat.&lt;/li&gt;
	&lt;li&gt;there will be multiple debugging facilities over time, and having a top-level &lt;b&gt;debug&lt;/b&gt; switch is convenient for Clojure users.&lt;/li&gt;
	&lt;li&gt;Java dis/enabling via command line flags is still possible as a separate feature. We could add this later as a (small) breaking change to our assert, or have a separate java-assert interop form. I am on the fence about which way to go here.&lt;/li&gt;
	&lt;li&gt;I believe it is perfectly fine to throw an &lt;tt&gt;AssertionError&lt;/tt&gt; from a non-Java-assertion-form. We don't believe in a world of a static exception hierarchy, and an assertion in production is a critical failure no matter what you call it. Even Scala does it &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt; &lt;a href="http://daily-scala.blogspot.com/2010/03/assert-require-assume.html"&gt;http://daily-scala.blogspot.com/2010/03/assert-require-assume.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Rich: awaiting your blessing to move forward on this.&lt;/p&gt;</comment>
                    <comment id="26100" author="richhickey" created="Fri, 7 Jan 2011 07:42:47 -0800">&lt;p&gt;The compiler sets $assertionsDisabled when, in static init code? Is there special support in the classloader for it? Is there a link to the best dated evidence you found?&lt;/p&gt;</comment>
                    <comment id="26101" author="stu" created="Fri, 7 Jan 2011 07:51:27 -0800">&lt;ol&gt;
	&lt;li&gt;Yes, in static init code&lt;/li&gt;
	&lt;li&gt;There is no special support in the classloader, per Brian Goetz (private correspondence) last week. But dead code elimination is great: "The run-time cost of disabled assertions should indeed be zero for compiled code"&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="26102" author="stu" created="Fri, 7 Jan 2011 07:57:17 -0800">&lt;p&gt;Link: Google "java assert shirazi". (Not posting link because I can't tell in 10 secs whether it includes my session information.)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>richhickey</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-248] Add support for subsets and submaps to sorted Sets/Maps</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-248</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently we can have a subseq of a sorted-set|map-by, but this returns a seq and&lt;br/&gt;
not a Set or Map.&lt;br/&gt;
Implementing the interfaces java.util.SortedSet and java.util.SortedMap would give&lt;br/&gt;
us support for calling .subSet and .subMap.&lt;/p&gt;</description>
                <environment/>
            <key id="13645">CLJ-248</key>
            <summary>Add support for subsets and submaps to sorted Sets/Maps</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Jan 2010 03:52:00 -0800</created>
                <updated>Tue, 24 Aug 2010 04:05:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23413" author="importer" created="Tue, 24 Aug 2010 04:05:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/248"&gt;http://www.assembla.com/spaces/clojure/tickets/248&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23414" author="importer" created="Tue, 24 Aug 2010 04:05:00 -0700">&lt;p&gt;awizzard said: Another nice addition could be &lt;a href="http://java.sun.com/javase/6/docs/api/java/util/NavigableMap.html"&gt;java.util.NavigableMap&lt;/a&gt;, though this is available only since Java 6.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-233] better error reporting of nonexistent var</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-233</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;simple improvement to error message when referencing a var that doesn't exist.&lt;/p&gt;</description>
                <environment/>
            <key id="13630">CLJ-233</key>
            <summary>better error reporting of nonexistent var</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 31 Dec 2009 09:08:00 -0800</created>
                <updated>Wed, 29 Sep 2010 03:29:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23363" author="importer" created="Wed, 29 Sep 2010 03:29:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/233"&gt;http://www.assembla.com/spaces/clojure/tickets/233&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23364" author="importer" created="Wed, 29 Sep 2010 03:29:00 -0700">&lt;p&gt;chouser@n01se.net said: Stuart, I don't see a patch attached.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-213] Invariants and the STM</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-213</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;(ticket requested here &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/119311e89fa46806/4903ce25ff6deaa6#4903ce25ff6deaa6"&gt;http://groups.google.com/group/clojure/browse_thread/thread/119311e89fa46806/4903ce25ff6deaa6#4903ce25ff6deaa6&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The general idea is to declare invariants inside a transaction and, when at commit time an invariant doesn't hold anymore, the transaction retries.&lt;br/&gt;
So it can both act as a kind of soft ensure or to specify actions that "partially commute".&lt;br/&gt;
Thus it would enable coarser refs.&lt;/p&gt;

&lt;p&gt;See the attached file for quick prototype.&lt;/p&gt;

&lt;p&gt;User code would looks like:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(invariant (@world :key))
(commute world update-in [:key] val-transform-fn)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This means the commute will occur only if (@world :key) returns the same value in-transaction and at commit point.&lt;/p&gt;</description>
                <environment/>
            <key id="13610">CLJ-213</key>
            <summary>Invariants and the STM</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 04:29:00 -0800</created>
                <updated>Tue, 24 Aug 2010 05:23:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23280" author="importer" created="Tue, 24 Aug 2010 05:23:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/213"&gt;http://www.assembla.com/spaces/clojure/tickets/213&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
invariants.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/dd4kUS3MWr3QvMeJe5aVNr/download/dd4kUS3MWr3QvMeJe5aVNr"&gt;https://www.assembla.com/spaces/clojure/documents/dd4kUS3MWr3QvMeJe5aVNr/download/dd4kUS3MWr3QvMeJe5aVNr&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-211] Support arbitrary functional destructuring via -&gt; and -&gt;&gt;</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-211</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Support arbitrary functional destructuring, that is the use of&lt;br/&gt;
any function in any destructuring form to help unpack data in&lt;br/&gt;
arbitrary ways.&lt;/p&gt;

&lt;p&gt;The discussion began here:&lt;br/&gt;
&lt;a href="http://clojure-log.n01se.net/date/2009-11-17.html#09:31c"&gt;http://clojure-log.n01se.net/date/2009-11-17.html#09:31c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The attached patch implements the spec described here:&lt;br/&gt;
&lt;a href="http://clojure-log.n01se.net/date/2009-11-17.html#10:50a"&gt;http://clojure-log.n01se.net/date/2009-11-17.html#10:50a&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;That is, the following examples would now work:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (let &lt;span class="error"&gt;&amp;#91;(-&amp;gt; str a) 1&amp;#93;&lt;/span&gt; a)&lt;br/&gt;
"1"&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (let [&lt;span class="error"&gt;&amp;#91;a (-&amp;gt; str b) c&amp;#93;&lt;/span&gt; &lt;span class="error"&gt;&amp;#91;1 2&amp;#93;&lt;/span&gt;] (list a b c))&lt;br/&gt;
(1 "2" nil)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (let [(-&amp;gt;&amp;gt; (map int) &lt;span class="error"&gt;&amp;#91;a b&amp;#93;&lt;/span&gt;) "ab"] (list a b))&lt;br/&gt;
(97 98)&lt;/p&gt;</description>
                <environment/>
            <key id="13608">CLJ-211</key>
            <summary>Support arbitrary functional destructuring via -&gt; and -&gt;&gt;</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Nov 2009 08:43:00 -0800</created>
                <updated>Fri, 10 Dec 2010 06:49:03 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23273" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/211"&gt;http://www.assembla.com/spaces/clojure/tickets/211&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
destructuring-fns.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aHWQ_W06Kr3O89eJe5afGb/download/aHWQ_W06Kr3O89eJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/aHWQ_W06Kr3O89eJe5afGb/download/aHWQ_W06Kr3O89eJe5afGb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23274" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;chouser@n01se.net said: [&lt;a href="file:aHWQ_W06Kr3O89eJe5afGb"&gt;file:aHWQ_W06Kr3O89eJe5afGb&lt;/a&gt;]: &lt;span class="error"&gt;&amp;#91;PATCH&amp;#93;&lt;/span&gt; Support -&amp;gt; and -&amp;gt;&amp;gt; in destructuring forms.&lt;/p&gt;</comment>
                    <comment id="23275" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;cgrand said: I think the current patch suffers from the problem described here &lt;a href="http://groups.google.com/group/clojure-dev/msg/80ba7fad2ff04708"&gt;http://groups.google.com/group/clojure-dev/msg/80ba7fad2ff04708&lt;/a&gt; too.&lt;/p&gt;</comment>
                    <comment id="23276" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;richhickey said: so, don't use syntax-quote, just use clojure.core/-&amp;gt;&lt;/p&gt;</comment>
                    <comment id="23277" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;chouser@n01se.net said: Only -&amp;gt; and -&amp;gt;&amp;gt; are actually legal here anyway &amp;#8211; if you've locally bound foo to -&amp;gt; there's not really any good reason to think (fn &lt;span class="error"&gt;&amp;#91;(foo inc a)&amp;#93;&lt;/span&gt; a) should work.  And if you've redefined -&amp;gt; or -&amp;gt;&amp;gt; to mean something else in your ns, do we need to catch that at compile time, or is it okay to emit the rearranged code and see what happens?&lt;/p&gt;

&lt;p&gt;In short, would '#{&lt;del&gt;&amp;gt; -&amp;gt;&amp;gt; clojure.core/&lt;/del&gt;&amp;gt; clojure.core/-&amp;gt;&amp;gt;} be sufficient?&lt;/p&gt;</comment>
                    <comment id="23278" author="importer" created="Tue, 28 Sep 2010 04:57:00 -0700">&lt;p&gt;cgrand said: Only -&amp;gt; and -&amp;gt;&amp;gt; are legal here but what if they are aliased or shadowed? Instead of testing the symboil per se I would check, if:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the symbol is not in &amp;amp;env&lt;/li&gt;
	&lt;li&gt;the symbol resolve to #'clojure.core/&lt;del&gt;&amp;gt; or  #'clojure.core/&lt;/del&gt;&amp;gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(when-not (&amp;amp;env (first b)) (#{#'clojure.core/-&amp;gt; #'clojure.core/-&amp;gt;&amp;gt;} (resolve (first b))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but it requires to change destructure's sig to pass the env around&lt;/p&gt;</comment>
                    <comment id="26002" author="stu" created="Fri, 3 Dec 2010 11:03:07 -0800">&lt;p&gt;Rich: Are you assigned to this by accident? If so, please deassign yourself.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-200] Extend cond to support inline let, much like for</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-200</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I find it occasionally very useful to do a few tests in a cond, then introduce some new symbols (for both clarity and efficiency) that can be referenced in later tests (or matching expressions).  This parallels similar functionality inside the for macro, where the :let keyword is matched against a vector of symbol bindings and forms an implicit let around the remainder of the comprehension.&lt;/p&gt;

&lt;p&gt;I'll be adding a patch for this shortly.&lt;/p&gt;</description>
                <environment/>
            <key id="13597">CLJ-200</key>
            <summary>Extend cond to support inline let, much like for</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sun, 18 Oct 2009 16:15:00 -0700</created>
                <updated>Tue, 24 Aug 2010 11:51:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23224" author="importer" created="Tue, 24 Aug 2010 11:51:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/200"&gt;http://www.assembla.com/spaces/clojure/tickets/200&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23225" author="importer" created="Tue, 24 Aug 2010 11:51:00 -0700">&lt;p&gt;hlship said: Trickier than I thought because cond is really wired into other fundamentals, like let.&lt;/p&gt;</comment>
                    <comment id="23226" author="importer" created="Tue, 24 Aug 2010 11:51:00 -0700">&lt;p&gt;cgrand said: Howard, what do you think of &lt;a href="http://gist.github.com/432712"&gt;http://gist.github.com/432712&lt;/a&gt; ?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-190] enhance with-open to be extensible with a new close multimethod</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-190</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Discussion: &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/8e4e56f6fc65cc8e/618a893a5b2a5410"&gt;http://groups.google.com/group/clojure/browse_thread/thread/8e4e56f6fc65cc8e/618a893a5b2a5410&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently, with-open calls .close when it's finished.  I'd like it to have a (defmulti close type) so it's behavior is extensible.  A standard method could be defined for java.io.Closeable and a :default method with no type hint.  I've come across a few cases where some external library defines what is essentially a close method but names it shutdown or disable, etc., and adding my own "defmethod close" would be much easier than rewriting with-open.  This would also allow people to eliminate reflection for classes like sql Connection that were created before Closeable.&lt;/p&gt;</description>
                <environment/>
            <key id="13587">CLJ-190</key>
            <summary>enhance with-open to be extensible with a new close multimethod</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sun, 13 Sep 2009 09:31:00 -0700</created>
                <updated>Fri, 23 Dec 2011 04:50:59 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="23185" author="importer" created="Tue, 24 Aug 2010 02:30:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/190"&gt;http://www.assembla.com/spaces/clojure/tickets/190&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
clojure-190-with-open.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/ca27R6Ojur3PQ0eJe5afGb/download/ca27R6Ojur3PQ0eJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/ca27R6Ojur3PQ0eJe5afGb/download/ca27R6Ojur3PQ0eJe5afGb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23186" author="importer" created="Tue, 24 Aug 2010 02:30:00 -0700">&lt;p&gt;mikehinchey said: [&lt;a href="file:ca27R6Ojur3PQ0eJe5afGb"&gt;file:ca27R6Ojur3PQ0eJe5afGb&lt;/a&gt;]: fix adds close method and tests&lt;/p&gt;</comment>
                    <comment id="23187" author="importer" created="Tue, 24 Aug 2010 02:30:00 -0700">&lt;p&gt;mikehinchey said: Note, I only defined methods for :default (reflection of .close) and Closeable, not sql or the numerous other classes in java that should be Closeable but are not.  Maybe clojure.contrib.sql and other such libraries should define related close methods.&lt;/p&gt;</comment>
                    <comment id="23188" author="importer" created="Tue, 24 Aug 2010 02:30:00 -0700">&lt;p&gt;richhickey said: I want to hold off on this until scopes are in&lt;/p&gt;</comment>
                    <comment id="27494" author="tsdh" created="Fri, 23 Dec 2011 04:50:59 -0800">&lt;p&gt;Probably better implemented using a protocol.  See &lt;a href="http://dev.clojure.org/jira/browse/CLJ-308"&gt;http://dev.clojure.org/jira/browse/CLJ-308&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-163] Enhance = and == docs</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-163</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Enhance = and == docs as far as numbers handling is concerned (make them self referenced, make clear what == offers beyond = -except that it will only work for numbers)&lt;/p&gt;</description>
                <environment/>
            <key id="13560">CLJ-163</key>
            <summary>Enhance = and == docs</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="laurentpetit">Laurent Petit</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Jul 2009 22:18:00 -0700</created>
                <updated>Tue, 24 Aug 2010 11:04:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23050" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/163"&gt;http://www.assembla.com/spaces/clojure/tickets/163&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
fixbug163.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/bH0XMCFjur3PLMeJe5aVNr/download/bH0XMCFjur3PLMeJe5aVNr"&gt;https://www.assembla.com/spaces/clojure/documents/bH0XMCFjur3PLMeJe5aVNr/download/bH0XMCFjur3PLMeJe5aVNr&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23051" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;laurentpetit said: [&lt;a href="file:bH0XMCFjur3PLMeJe5aVNr"&gt;file:bH0XMCFjur3PLMeJe5aVNr&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23052" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;richhickey said: I don't want to recommend, in = doc, that people should prefer == for any case. People should always prefer =. If there is a perf, difference we can make that go away. Then the only difference with == is that it will fail on non-numbers, and that should be the only reason to choose it.&lt;/p&gt;</comment>
                    <comment id="23053" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#94, #96, #104, #119, #163)&lt;/p&gt;</comment>
                    <comment id="23054" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;laurentpetit said: Richn, by "will fail on non-numbers", do you mean "should throw an exception" (and thus the patch must change the code), or just as it works today :&lt;/p&gt;

&lt;p&gt;(== :a :a)&lt;br/&gt;
false&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;</comment>
                    <comment id="23055" author="importer" created="Tue, 24 Aug 2010 11:04:00 -0700">&lt;p&gt;richhickey said: I've fixed the code so == on non-numbers throws&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-153] Suggest adding set-precision! API to accompany with-precision</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-153</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Ticket #137 makes &lt;tt&gt;&lt;b&gt;math-context&lt;/b&gt;&amp;lt;/code&amp;gt; settable at the REPL. However, &amp;lt;code&amp;gt;&lt;b&gt;math-context&lt;/b&gt;&lt;/tt&gt; is not a public name in Clojure.&lt;/p&gt;

&lt;p&gt;The related public function is &lt;tt&gt;with-precision&amp;lt;/code&amp;gt; which works by pushing a new binding for &amp;lt;code&amp;gt;&lt;b&gt;math-context&lt;/b&gt;&amp;lt;/code&amp;gt;. This ticket suggests adding &amp;lt;code&amp;gt;set-precision!&amp;lt;/code&amp;gt; to Clojure's public API. Its effect would be the same as &amp;lt;code&amp;gt;with-precision&amp;lt;/code&amp;gt;, but accomplished by using &amp;lt;code&amp;gt;set!&amp;lt;/code&amp;gt; on the current &amp;lt;code&amp;gt;&lt;b&gt;math-context&lt;/b&gt;&lt;/tt&gt; binding rather than by pushing a new binding.&lt;/p&gt;

&lt;p&gt;Chouser suggests that we also add a doc string for &lt;tt&gt;&lt;b&gt;math-context&lt;/b&gt;&amp;lt;/code&amp;gt; noting that it is private and pointing the user to &amp;lt;code&amp;gt;with-precision&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;set-precision!&lt;/tt&gt;. I agree.&lt;/p&gt;</description>
                <environment/>
            <key id="13550">CLJ-153</key>
            <summary>Suggest adding set-precision! API to accompany with-precision</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Jul 2009 17:58:00 -0700</created>
                <updated>Mon, 23 Aug 2010 22:55:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="23012" author="importer" created="Mon, 23 Aug 2010 22:55:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/153"&gt;http://www.assembla.com/spaces/clojure/tickets/153&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-150] Doc for array-map should mention its characteristics/caveats</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-150</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Doc for array-map should mention its characteristics: preserves order of keys, linear O&lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/thumbs_down.gif" height="19" width="19" align="absmiddle" alt="" border="0"/&gt; search so appropriate only for small maps, operations on array-maps return hash-maps.&lt;/p&gt;</description>
                <environment/>
            <key id="13547">CLJ-150</key>
            <summary>Doc for array-map should mention its characteristics/caveats</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Jul 2009 13:11:00 -0700</created>
                <updated>Tue, 24 Aug 2010 02:54:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22998" author="importer" created="Tue, 24 Aug 2010 02:54:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/150"&gt;http://www.assembla.com/spaces/clojure/tickets/150&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-148] Poor reporting of symbol conflicts when using (ns)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-148</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I have a module that includes pprint and my own utils.&lt;/p&gt;

&lt;p&gt;When com.howard.lewisship.cascade.dom/write was changed from private to public I get the following error:&lt;/p&gt;

&lt;p&gt;java.lang.IllegalStateException: write already refers to: #'clojure.contrib.pprint/write in namespace: com.howardlewisship.cascade.test-views (test_views.clj:0)&lt;/p&gt;

&lt;p&gt;(ns com.howardlewisship.cascade.test-views ; line 15&lt;br/&gt;
  (:use&lt;br/&gt;
   (clojure.contrib test-is pprint duck-streams)&lt;br/&gt;
   (app1 views fragments)&lt;br/&gt;
   (com.howardlewisship.cascade config dom view-manager)&lt;br/&gt;
   com.howardlewisship.cascade.internal.utils))&lt;/p&gt;

&lt;p&gt;That line number is wrong but better yet, identifying the true conflict (com.howard.lewisship.cascade.dom/write) would be even more important.&lt;/p&gt;</description>
                <environment/>
            <key id="13545">CLJ-148</key>
            <summary>Poor reporting of symbol conflicts when using (ns)</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 9 Jul 2009 22:08:00 -0700</created>
                <updated>Tue, 28 Jun 2011 16:42:50 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22990" author="importer" created="Tue, 24 Aug 2010 01:54:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/148"&gt;http://www.assembla.com/spaces/clojure/tickets/148&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22991" author="importer" created="Tue, 24 Aug 2010 01:54:00 -0700">&lt;p&gt;scgilardi said: It's saying that the symbol com.howardlewisship.cascade.test-views/write already resolves to #���clojure.contrib.pprint/write, so you can't def a new write in com.howardlewisship.cascade.test-views.&lt;/p&gt;

&lt;p&gt;What do you propose for an alternate wording of the error message here?&lt;/p&gt;</comment>
                    <comment id="26430" author="rosejn" created="Thu, 12 May 2011 07:49:03 -0700">&lt;p&gt;I think the issue is that only one side of the conflict is reported in the error, so if you get this kind of error in the middle of a large project it can be hard to figure out which namespace is conflicting.  Take a toy example:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (ns foo)&lt;br/&gt;
foo=&amp;gt; (def foobar 42)&lt;br/&gt;
foo=&amp;gt; (ns bar)&lt;br/&gt;
bar=&amp;gt; (def foobar 0)&lt;br/&gt;
bar=&amp;gt; (ns problem)&lt;br/&gt;
problem=&amp;gt; (refer 'foo)&lt;br/&gt;
problem=&amp;gt; (refer 'bar)&lt;br/&gt;
java.lang.IllegalStateException: foobar already refers to: #'foo/foobar in namespace: problem (NO_SOURCE_FILE:0)&lt;/p&gt;

&lt;p&gt;In this case it would be best if the error said something like:&lt;/p&gt;

&lt;p&gt;"Conflict referring to #'bar/foobar in #&amp;lt;Namespace problem&amp;gt; because foobar already refers to: #'foo/foobar."&lt;/p&gt;

&lt;p&gt;This way the error message clearly identifies the location of the conflict, and the locations of the two conflicting vars.&lt;/p&gt;

&lt;p&gt;Hopefully this helps clarify.  I think I see where to fix it in warnOrFailOnReplace on line 88 of src/jvm/clojure/lang/Namespace.java, and this reminds me I need to send in a CA so I can pitch in next time...&lt;/p&gt;</comment>
                    <comment id="26539" author="aaron" created="Tue, 28 Jun 2011 16:42:50 -0700">&lt;p&gt;It looks like the true conflict is in test-views, not in dom. A small example of the line number breakage showing the problem on master (1.3) would be very helpful.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-140] Single :tag for type hints conflates value's type with type of return value from an invoke</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-140</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The value of a Var can be operated on directly, or, if it is a fn, it can be invoked and the resulting value operated on.  :tag metadata on a Var is used to provide a type hint to the compiler to avoid reflection.  Having a single metadata key for this two distinct uses makes it possible (even easy, if unlikely) to create a situation where type-hinting the value causes a ClassCastException on an operation on the invocation return value, or the reverse.  The only obvious solution is two use different keys for the two uses.&lt;/p&gt;</description>
                <environment/>
            <key id="13537">CLJ-140</key>
            <summary>Single :tag for type hints conflates value's type with type of return value from an invoke</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Jul 2009 19:55:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:51:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22956" author="importer" created="Tue, 24 Aug 2010 01:51:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/140"&gt;http://www.assembla.com/spaces/clojure/tickets/140&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10008">None</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-130] Namespace metadata lost in AOT compile</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-130</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;For example, the namespace @clojure.contrib.def@ has metadata for doc and author.&lt;/p&gt;

&lt;p&gt;We see this when we load the file directly from source:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
 tom@goya:~/src/clj$ java -cp clojure/clojure.jar:clojure-contrib/src clojure.lang.Repl&lt;br/&gt;
 Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
 user=&amp;gt; (load "clojure/contrib/def")&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; (find-ns 'clojure.contrib.def)     &lt;br/&gt;
 #&amp;lt;Namespace clojure.contrib.def&amp;gt;&lt;br/&gt;
 user=&amp;gt; ^(find-ns 'clojure.contrib.def)&lt;br/&gt;
 {:author "Stephen C. Gilardi", :doc "def.clj provides variants of def that make including doc strings and\nmaking private definitions more succinct."}&lt;br/&gt;
 user=&amp;gt; &lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;But if we load the file from the jar where it's been compiled, the metadata is lost:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
 tom@goya:~/src/clj$ java -cp clojure/clojure.jar:clojure-contrib/clojure-contrib.jar clojure.lang.Repl&lt;br/&gt;
 Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
 user=&amp;gt; (use 'clojure.contrib.def)&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; (find-ns 'clojure.contrib.def)&lt;br/&gt;
 #&amp;lt;Namespace clojure.contrib.def&amp;gt;&lt;br/&gt;
 user=&amp;gt; ^(find-ns 'clojure.contrib.def)&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; &lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;Even if we use @load@, we don't see metadata on the item:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
 tom@goya:~/src/clj$ java -cp clojure/clojure.jar:clojure-contrib/clojure-contrib.jar clojure.lang.Repl&lt;br/&gt;
 Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
 user=&amp;gt; (load "clojure/contrib/def")&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; (find-ns 'clojure.contrib.def)&lt;br/&gt;
 #&amp;lt;Namespace clojure.contrib.def&amp;gt;&lt;br/&gt;
 user=&amp;gt; ^(find-ns 'clojure.contrib.def)&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; &lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;


&lt;p&gt;The jar isn't the problem, for if we use the slim jar (without the AOT&lt;br/&gt;
class files), we see that the metadata is fine: &lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
 tom@goya:~/src/clj$ java -cp clojure/clojure.jar:clojure-contrib/clojure-contrib-slim.jar clojure.lang.Repl&lt;br/&gt;
 Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
 user=&amp;gt; (use 'clojure.contrib.def)&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; (find-ns 'clojure.contrib.def)&lt;br/&gt;
 #&amp;lt;Namespace clojure.contrib.def&amp;gt;&lt;br/&gt;
 user=&amp;gt; ^(find-ns 'clojure.contrib.def)&lt;br/&gt;
 {:author "Stephen C. Gilardi", :doc "def.clj provides variants of def that make including doc strings and\nmaking private definitions more succinct."}&lt;br/&gt;
 user=&amp;gt; &lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;This seems to be true usually, but not always. For example the&lt;br/&gt;
metadata on the pretty print namespace is just fine from the AOT version:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
 tom@goya:~/src/clj$ java -cp clojure/clojure.jar:clojure-contrib/clojure-contrib.jar clojure.lang.Repl&lt;br/&gt;
 Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
 user=&amp;gt; (use 'clojure.contrib.pprint)&lt;br/&gt;
 nil&lt;br/&gt;
 user=&amp;gt; (find-ns 'clojure.contrib.pprint)&lt;br/&gt;
 #&amp;lt;Namespace clojure.contrib.pprint&amp;gt;&lt;br/&gt;
 user=&amp;gt; ^(find-ns 'clojure.contrib.pprint)&lt;br/&gt;
 {:author "Tom Faulhaber", :doc "This module comprises two elements:\n1) A pretty printer for Clojure data structures, implemented in the function \"pprint\"\n2) A Common Lisp compatible format function, implemented as \"cl-format\" because\n   Clojure is using the name \"format\" for its own format.\n\nComplete documentation is available on the wiki at the contrib google code site.", :see-also [&lt;span class="error"&gt;&amp;#91;&amp;quot;PrettyPrinting&amp;quot; &amp;quot;Documentation for the pretty printer&amp;quot;&amp;#93;&lt;/span&gt; &lt;span class="error"&gt;&amp;#91;&amp;quot;CommonLispFormat&amp;quot; &amp;quot;Documentation for Common Lisp format function&amp;quot;&amp;#93;&lt;/span&gt;]}&lt;br/&gt;
 user=&amp;gt; &lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;</description>
                <environment/>
            <key id="13527">CLJ-130</key>
            <summary>Namespace metadata lost in AOT compile</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Jun 2009 22:47:00 -0700</created>
                <updated>Fri, 3 Dec 2010 08:48:15 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="22905" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/130"&gt;http://www.assembla.com/spaces/clojure/tickets/130&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22906" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#127, #128, #129, #130)&lt;/p&gt;</comment>
                    <comment id="22907" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;juergenhoetzel said: This is still a issue on &lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Clojure 1.2.0-master-SNAPSHOT&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any progress, hints? I prefer interactive documentiation via slime/repl&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-129] Add documentation to sorted-set-by detailing how the provided comparator may change set membership semantics</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-129</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;To start, let's look at some simple default sorted-set behaviour (which uses PersistentHashMap via PersistentHashSet, and therefore uses equality/hashCode to determine identity):&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (sorted-set [1 2] [-5 10] [1 5])
#{[-5 10] [1 2] [1 5]}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

sorted-set-by uses PersistentTreeMap via PersistentTreeSet though, which implies that the comparator provided to sorted-set-by will be used to determine identity, and therefore member in the set.  This can lead to (IMO) non-intuitive behaviour:

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
user=&amp;gt; (sorted-set-by #(&amp;gt; (first %) (first %2)) [1 2] [-5 10] [1 5])
#{[1 2] [-5 10]}&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that because the provided comparison fn determines that &lt;span class="error"&gt;&amp;#91;1 2&amp;#93;&lt;/span&gt; and &lt;span class="error"&gt;&amp;#91;1 5&amp;#93;&lt;/span&gt; have the same sort order, the latter value is considered identical to the former, and not included in the set.  This behaviour could be very handy, but is also likely to cause confusion when what the user almost certainly wants is to maintain the membership semantics of the original set (e.g. relying upon equality/hashCode), but only modify the ordering.&lt;/p&gt;

&lt;p&gt;(BTW, yes, I know there's far easier ways to get the order I'm indicating above over a set of vectors thanks to vectors being comparable via the compare fn.  The examples are only meant to be illustrative.  The same non-intuitive result would occur, with no easy fallback (like the 'compare' fn when working with vectors) when the members of the set are non-Comparable Java object, and the comparator provided to sorted-set-by is defining a sort over some values returned by method calls into those objects.)&lt;/p&gt;

&lt;p&gt;I'd be happy to change the docs for sorted-set-by, but I suspect that there are others who could encapsulate what's going on here more correctly and more concisely than I.&lt;/p&gt;</description>
                <environment/>
            <key id="13526">CLJ-129</key>
            <summary>Add documentation to sorted-set-by detailing how the provided comparator may change set membership semantics</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="cemerick">Chas Emerick</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Jun 2009 14:14:00 -0700</created>
                <updated>Tue, 24 Aug 2010 05:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22903" author="importer" created="Tue, 24 Aug 2010 05:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/129"&gt;http://www.assembla.com/spaces/clojure/tickets/129&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22904" author="importer" created="Tue, 24 Aug 2010 05:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#127, #128, #129, #130)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-127] DynamicClassLoader's call to ClassLoader.getSystemClassLoader is prohibited in some environments</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-127</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently, clojure.lang.DynamicClassLoader's constructor has the&lt;br/&gt;
following call to super():&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;&lt;span class="code-keyword"&gt;super&lt;/span&gt;(EMPTY_URLS,
      (&lt;span class="code-object"&gt;Thread&lt;/span&gt;.currentThread().getContextClassLoader() == &lt;span class="code-keyword"&gt;null&lt;/span&gt; ||
        &lt;span class="code-object"&gt;Thread&lt;/span&gt;.currentThread().getContextClassLoader() == &lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.getSystemClassLoader()) ?
          &lt;span class="code-object"&gt;Compiler&lt;/span&gt;.class.getClassLoader() : &lt;span class="code-object"&gt;Thread&lt;/span&gt;.currentThread().getContextClassLoader());&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That call to ClassLoader.getSystemClassLoader() is forbidden by Google&lt;br/&gt;
AppEngine's security policies. That restricts you from being able to&lt;br/&gt;
load any resources from the classpath that haven't been AOT-compiled.&lt;br/&gt;
I've verified that just removing that removing the " ||&lt;br/&gt;
Thread.currentThread().getContextClassLoader() ==&lt;br/&gt;
ClassLoader.getSystemClassLoader()" does in fact result in something&lt;br/&gt;
that works in GAE (as far as my needs go). Unfortunately, I'm not sure&lt;br/&gt;
whether that breaks anything, which, presumably, it does.&lt;/p&gt;</description>
                <environment/>
            <key id="13524">CLJ-127</key>
            <summary>DynamicClassLoader's call to ClassLoader.getSystemClassLoader is prohibited in some environments</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Jun 2009 04:54:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:45:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22885" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/127"&gt;http://www.assembla.com/spaces/clojure/tickets/127&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22886" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;jmcconnell said: I'd be happy to take this up with the GAE folks if it winds up looking like this is something they should probably allow or if we need any further information from them on their policies.&lt;/p&gt;</comment>
                    <comment id="22887" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#127, #128, #129, #130)&lt;/p&gt;</comment>
                    <comment id="22888" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;mikehinchey said: GAE made some changes a few weeks ago, maybe changed this because I'm able to load from .clj files now (not the servlet, of course, which must be gen-class).&lt;/p&gt;</comment>
                    <comment id="22889" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #42, #113, #2, #20, #94, #96, #104, #119, #124, #127, #149, #162)&lt;/p&gt;</comment>
                    <comment id="22890" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;mattrevelle said: J. McConnell, was this issue resolved by a change in GAE policy?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-126] abstract superclass with non-public accessibility</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-126</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The following code works in Java 6 but not in Java 5:&lt;/p&gt;

&lt;p&gt;(def Clojure 1.1.0-alpha-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (def s (new StringBuilder "aaa"))&lt;br/&gt;
#'user/s&lt;br/&gt;
user=&amp;gt; (. s setCharAt (int 0) (char \a))&lt;br/&gt;
java.lang.Exception: Unable to resolve symbol: setCharAt in this context&lt;/p&gt;

&lt;p&gt;This was discussed on the Clojure mailing list and Stephen C. Gillardi came up with the following conclusion:&lt;/p&gt;

&lt;p&gt;_StringBuilder extends AbstractStringBuilder (though the JavaDoc docs lie and say it extends Object). AbstractStringBuilder has default accessibility (not public, protected, or private) which makes the class inaccessible to code outside the java.lang package. In both Java SE 5 and Java SE 6, StringBuilder does not contain a .setCharAt method definition. It relies on the inherited public method in AbstractStringBuilder. (I downloaded the source code for both versions from Sun to check.)&lt;/p&gt;

&lt;p&gt;In Java SE 5, when Clojure checks whether or not .setCharAt on StringBuilder is public, it finds that it's a public method of a non-public base class and throws the exception you saw. (It looks like you're using a version of Clojure older than 18 May 2009 (Clojure svn r1371). Versions later than that print the more detailed message I saw.)&lt;/p&gt;

&lt;p&gt;In Java SE 6, Clojure's checks for accessibility of this method succeed and the method call works.&lt;/p&gt;

&lt;p&gt;I'm not sure whether or not Clojure could be modified to make this method call work in Java 5. Google searches turn up discussion that this pattern of using an undocumented abstract superclass with non-public accessibility is not common in the JDK._ &lt;/p&gt;

&lt;p&gt;This ticket is being filed in the event that Clojure can handle these types of situations somehow.&lt;/p&gt;</description>
                <environment/>
            <key id="13523">CLJ-126</key>
            <summary>abstract superclass with non-public accessibility</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 15:57:00 -0700</created>
                <updated>Tue, 24 Aug 2010 02:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22882" author="importer" created="Tue, 24 Aug 2010 02:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/126"&gt;http://www.assembla.com/spaces/clojure/tickets/126&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22883" author="importer" created="Tue, 24 Aug 2010 02:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22884" author="importer" created="Tue, 24 Aug 2010 02:45:00 -0700">&lt;p&gt;hiredman said: &lt;b&gt;Related&lt;/b&gt; association with ticket #259 was added&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-124] GC  Issue 120: Determine mechanism for controlling automatic shutdown of Agents, with a default policy and mechanism for changing that policy as needed</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-124</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by cemer...@snowtide.com, Jun 01, 2009

There has been intermittent chatter over the past months from a couple of
people on the group (e.g.
http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/browse_thread/thread/409054e3542adc1f)
&lt;/span&gt;and in #clojure about some clojure scripts hanging, either &lt;span class="code-keyword"&gt;for&lt;/span&gt; a constant
time (usually reported as a minute or so with no CPU util) or seemingly
forever (or until someone kills the process).

I just hit a similar situation in our compilation process, which invokes
clojure.lang.Compile from ant.  The build process &lt;span class="code-keyword"&gt;for&lt;/span&gt; &lt;span class="code-keyword"&gt;this&lt;/span&gt; particular
project had taken 15 second or so, but after adding a couple of pmap calls,
that build time jumped to ~1:15, with roughly zero CPU utilization over the
course of that last minute.

Adding a call to Agent.shutdown() in the &lt;span class="code-keyword"&gt;finally&lt;/span&gt; block in
clojure.lang.Compile/main resolved the problem; a patch including &lt;span class="code-keyword"&gt;this&lt;/span&gt;
change is attached.  I wouldn't suspect anyone would have any issues with
such a change.

-----
In general, it doesn't seem like everyone should keep tripping over &lt;span class="code-keyword"&gt;this&lt;/span&gt;
problem in different directions.  It's a very difficult thing to debug &lt;span class="code-keyword"&gt;if&lt;/span&gt;
you're not attuned to how clojure's concurrency primitives work under the
hood, and I would bet that newer users would be particularly affected.

After discussion in #clojure, rhickey suggested adding a
*auto-shutdown-agents* &lt;span class="code-keyword"&gt;var&lt;/span&gt;, which:

- &lt;span class="code-keyword"&gt;if&lt;/span&gt; &lt;span class="code-keyword"&gt;true&lt;/span&gt; when exiting one of the main entry points (clojure.main, or the
legacy script/repl entry points), Agent.shutdown() would be called,
allowing &lt;span class="code-keyword"&gt;for&lt;/span&gt; the clean exit of the application

- would be bound by &lt;span class="code-keyword"&gt;default&lt;/span&gt; to &lt;span class="code-keyword"&gt;true&lt;/span&gt;

- could be easily set to &lt;span class="code-keyword"&gt;false&lt;/span&gt; &lt;span class="code-keyword"&gt;for&lt;/span&gt; anyone with an advanced use-&lt;span class="code-keyword"&gt;case&lt;/span&gt; that
requires agents to remain active after the main thread of the application
exits.

This would obviously not help anyone initializing clojure from a different
entry point, but &lt;span class="code-keyword"&gt;this&lt;/span&gt; may represent the best compromise between
least-surprise and maximal functionality &lt;span class="code-keyword"&gt;for&lt;/span&gt; advanced users.

------

In addition to the above, it perhaps might be worthwhile to change the
keepalive values used to create the Threadpools used by c.l.Actor's
Executors.  Currently, Actor uses a &lt;span class="code-keyword"&gt;default&lt;/span&gt; thread pool executor, which
results in a 60s keepalive.  Lowering &lt;span class="code-keyword"&gt;this&lt;/span&gt; to something much smaller (1s?
5s?) would additionally minimize the impact of Agent's threadpools on Java
applications that embed clojure directly (and would therefore not benefit
from *auto-shutdown-agents* as currently conceived, leading to puzzling
'hanging' behaviour).  I'm not in a position to determine what impact &lt;span class="code-keyword"&gt;this&lt;/span&gt;
would have on performance due to thread churn, but it would at least
minimize what would be perceived as undesirable behaviour by users that are
less familiar with the implementation details of Agent and code that
depends on it.

Comment 1  by cemer...@snowtide.com, Jun 01, 2009

Just FYI, I'd be happy to provide patches &lt;span class="code-keyword"&gt;for&lt;/span&gt; either of the suggestions mentioned
above...&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13521">CLJ-124</key>
            <summary>GC  Issue 120: Determine mechanism for controlling automatic shutdown of Agents, with a default policy and mechanism for changing that policy as needed</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="1" iconUrl="http://dev.clojure.org/jira/images/icons/priority_blocker.gif">Blocker</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="cemerick">Chas Emerick</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 21:24:00 -0700</created>
                <updated>Mon, 11 Jul 2011 19:34:03 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>3</votes>
                        <watches>5</watches>
                        <comments>
                    <comment id="22862" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/124"&gt;http://www.assembla.com/spaces/clojure/tickets/124&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
compile-agent-shutdown.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/a56S2ow4ur3O2PeJe5afGb/download/a56S2ow4ur3O2PeJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/a56S2ow4ur3O2PeJe5afGb/download/a56S2ow4ur3O2PeJe5afGb&lt;/a&gt;&lt;br/&gt;
124-compilation.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aqn0IGxZSr3RUGeJe5aVNr/download/aqn0IGxZSr3RUGeJe5aVNr"&gt;https://www.assembla.com/spaces/clojure/documents/aqn0IGxZSr3RUGeJe5aVNr/download/aqn0IGxZSr3RUGeJe5aVNr&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22863" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;oranenj said: [&lt;a href="file:a56S2ow4ur3O2PeJe5afGb"&gt;file:a56S2ow4ur3O2PeJe5afGb&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="22864" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22865" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;cemerick said: (In [&lt;span class="error"&gt;&amp;#91;r:fa3d24973fc415b35ae6ec8d84b61ace76bd4133&amp;#93;&lt;/span&gt;]) Add a call to Agent.shutdown() at the end of clojure.lang.Compile/main Refs #124&lt;/p&gt;

&lt;p&gt;Signed-off-by: Chouser &amp;lt;chouser@n01se.net&amp;gt;&lt;/p&gt;

&lt;p&gt;Branch: master&lt;/p&gt;</comment>
                    <comment id="22866" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: I'm closing this ticket to because the attached patch solves a specific problem.  I agree that the idea of an &lt;b&gt;auto-shutdown-agents&lt;/b&gt; var sounds like a positive compromise.  If Rich wants a ticket to track that issue, I think it'd be best to open a new ticket (and perhaps mention this one there) rather than use this ticket to track further changes.&lt;/p&gt;</comment>
                    <comment id="22867" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;scgilardi said: With both Java 5 and Java 6 on Mac OS X 10.5 Leopard I'm getting an error when compiling with this change present.&lt;/p&gt;

&lt;p&gt;Java 1.5.0_19&lt;br/&gt;
Java 1.6.0_13&lt;/p&gt;

&lt;p&gt;For example, when building clojure using "ant" from within my clone of the clojure repo:&lt;/p&gt;

&lt;p&gt;&lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt; java.security.AccessControlException: access denied (java.lang.RuntimePermission modifyThread)&lt;br/&gt;
     &lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt;  at java.security.AccessControlContext.checkPermission(AccessControlContext.java:264)&lt;br/&gt;
     &lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt;  at java.security.AccessController.checkPermission(AccessController.java:427)&lt;br/&gt;
     &lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt;  at java.util.concurrent.ThreadPoolExecutor.shutdown(ThreadPoolExecutor.java:894)&lt;br/&gt;
     &lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt;  at clojure.lang.Agent.shutdown(Agent.java:34)&lt;br/&gt;
     &lt;span class="error"&gt;&amp;#91;java&amp;#93;&lt;/span&gt;  at clojure.lang.Compile.main(Compile.java:71)&lt;/p&gt;

&lt;p&gt;I reproduced this on two Mac OS X 10.5 machines. I'm not aware of having any enhanced security policies along these lines on my machines. The compile goes fine for me with Java 1.6.0_0 on an Ubuntu box.&lt;/p&gt;</comment>
                    <comment id="22868" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: I had only tested it on my ubuntu box &amp;#8211; looks like that was openjdk 1.6.0_0.  I'll test again with sun-java5 and sun-java6.&lt;/p&gt;</comment>
                    <comment id="22869" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: 1.6.0_13 worked fine for me on ubuntu, but 1.5.0_18 generated an the exception Steve pasted.  Any suggestions?  Should this patch be backed out until someone has a fix?&lt;/p&gt;</comment>
                    <comment id="22870" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;achimpassen said: [&lt;a href="file:aqn0IGxZSr3RUGeJe5aVNr"&gt;file:aqn0IGxZSr3RUGeJe5aVNr&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="22871" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: With Achim's patch, clojure compiles for me on ubuntu using java 1.5.0_18 from sun, and still works on 1.6.0_13 sun and 1.6.0_0 openjdk.  I don't know anything about ant or the security error, but this is looking good to me.&lt;/p&gt;</comment>
                    <comment id="22872" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;achimpassen said: It works for me on 1.6.0_13 and 1.5.0_19 (32 and 64 bit) on OS X 10.5.7.&lt;/p&gt;</comment>
                    <comment id="22873" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: (In [&lt;span class="error"&gt;&amp;#91;r:895b39dabc17b3fd766fdbac3b0757edb0d4b60d&amp;#93;&lt;/span&gt;]) Rev fa3d2497 causes compile to fail on some VMs &amp;#8211; back it out. Refs #124&lt;/p&gt;

&lt;p&gt;Branch: master&lt;/p&gt;</comment>
                    <comment id="22874" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;mikehinchey said: I got the same compile error on both 1.5.0_11 and 1.6.0_14 on Windows.  Achim's patch fixes both.&lt;/p&gt;

&lt;p&gt;See the note for "permissions" on &lt;a href="http://ant.apache.org/manual/CoreTasks/java.html"&gt;http://ant.apache.org/manual/CoreTasks/java.html&lt;/a&gt; .  I assume ThreadPoolExecutor.shutdown is the problem, it would shutdown the main Ant thread, so Ant disallows that.  Forking avoids the permissions limitation.&lt;/p&gt;

&lt;p&gt;In addition, since the build error still resulted in "BUILD SUCCESSFUL", I think failonerror="true" should also be added to the java call so the build would totally fail for such an error.&lt;/p&gt;</comment>
                    <comment id="22875" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;chouser@n01se.net said: I don't know if the &amp;lt;java fork=true&amp;gt; patch is a good idea or not, or if there's a better way to solve the original problem.&lt;/p&gt;

&lt;p&gt;Chas, I'm kicking back to you, but I guess if you don't want it you can reassign to "nobody".&lt;/p&gt;</comment>
                    <comment id="22876" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #42, #113, #2, #20, #94, #96, #104, #119, #124, #127, #149, #162)&lt;/p&gt;</comment>
                    <comment id="22877" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;shoover said: I'd like to suggest an alternate approach. There are already well-defined and intuitive ways to block on agents and futures. Why not deprecate shutdown-agents and force users to call await and deref if they really want to block? In the pmap situation one would have to evaluate the pmap form.&lt;/p&gt;

&lt;p&gt;The System.exit problem goes away if you configure the threadpools to use daemon threads (call new ThreadPoolExecutor and pass a thread factory that creates threads and sets daemon to true). That way the user has an explicit means of blocking and System.exit won't hang.&lt;/p&gt;</comment>
                    <comment id="22878" author="importer" created="Mon, 23 Aug 2010 22:45:00 -0700">&lt;p&gt;alexdmiller said: I blogged about these issues at:&lt;br/&gt;
&lt;a href="http://tech.puredanger.com/2010/06/08/clojure-agent-thread-pools/"&gt;http://tech.puredanger.com/2010/06/08/clojure-agent-thread-pools/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;agent thread pool threads should be named (see ticket &lt;a href="https://www.assembla.com/spaces/clojure/tickets/378-set-thread-names-on-agent-thread-pools"&gt;#378&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;agent thread pools must be daemon threads by default&lt;/li&gt;
	&lt;li&gt;having ways to specify an customized executor pool for an agent send/send-off is essential to customize threading behavior&lt;/li&gt;
	&lt;li&gt;(shutdown-agents) should be either deprecated or made less dangerous&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="26565" author="ataggart" created="Mon, 11 Jul 2011 19:33:24 -0700">&lt;p&gt;Rich, what is the intention behind using non-daemon threads in the agent pools?&lt;/p&gt;

&lt;p&gt;If it is because daemon threads could terminate before their work is complete, would it be acceptable to &lt;a href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)"&gt;add a shutdown hook&lt;/a&gt; to ensure against such premature termination?  Such a shutdown hook could call &lt;tt&gt;Agent.shutdown()&lt;/tt&gt;, then &lt;a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ExecutorService.html#awaitTermination(long, java.util.concurrent.TimeUnit)"&gt;&lt;tt&gt;awaitTermination()&lt;/tt&gt;&lt;/a&gt; on the pools.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10007">Ok</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>richhickey</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-121] GC  Issue 117: FAQ Page has formatting errors</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-121</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by miki.tebeka, May 13, 2009

The FAQ page (http:&lt;span class="code-comment"&gt;//code.google.com/p/clojure/wiki/FAQ) has several
&lt;/span&gt;formatting errors:

* &lt;span class="code-quote"&gt;"How &lt;span class="code-keyword"&gt;do&lt;/span&gt; I call a Java method that takes a variable number of arguments?"&lt;/span&gt;
is missing a space to make it a header.
* The link to SICP showing the URL&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13518">CLJ-121</key>
            <summary>GC  Issue 117: FAQ Page has formatting errors</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 15:20:00 -0700</created>
                <updated>Fri, 3 Dec 2010 09:58:22 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22851" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/121"&gt;http://www.assembla.com/spaces/clojure/tickets/121&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22852" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="25998" author="stu" created="Fri, 3 Dec 2010 09:56:14 -0800">&lt;p&gt;Can I move the FAQ over the Confluence, and then change the old Google code page to link over?&lt;/p&gt;</comment>
                    <comment id="25999" author="richhickey" created="Fri, 3 Dec 2010 09:58:08 -0800">&lt;p&gt;Yes, thanks&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-118] GC Issue 114:  version.properties in branch/1.0 is inaccurate</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-118</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by hlship, May 04, 2009

The version.properties in the 1.0 branch generates snapshot releases.
Ideally, there should be a tags/1.0 branch that locks down the 1.0 release.
Context: trying to build a 1.0 release artifact &lt;span class="code-keyword"&gt;for&lt;/span&gt; the Maven repository.

Comment 1 by richhickey, May 04, 2009

Do you believe &lt;span class="code-keyword"&gt;this&lt;/span&gt; advice was erroneous?

http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/msg/cb46994561dbc732
&lt;/span&gt;
Comment 2 by hlship, May 05, 2009

I'm bothered that the 1.0 release is a 1.0 release, but not really.  Either its a
&lt;span class="code-keyword"&gt;final&lt;/span&gt; release or its not. Saying its still a snapshot when you've broadcasted to the
world that its &lt;span class="code-keyword"&gt;final&lt;/span&gt; seems very odd to me.

On the mailing list, I espoused the &lt;span class="code-quote"&gt;"Apache Way"&lt;/span&gt;, which is to not get hung up on a
&lt;span class="code-quote"&gt;"1.0.0"&lt;/span&gt; number, but keep releasing.  If &lt;span class="code-quote"&gt;"1.0.2"&lt;/span&gt; has bugs, fix them and release
&lt;span class="code-quote"&gt;"1.0.3"&lt;/span&gt;.  If that is &lt;span class="code-keyword"&gt;finally&lt;/span&gt; stable, announce &lt;span class="code-quote"&gt;"Clojure 1.0 is version 1.0.3"&lt;/span&gt;. Let the
release prove itself valid.

Older Tapestry releases were based on the &lt;span class="code-quote"&gt;"line in the sand"&lt;/span&gt; approach ... and always
ended up requiring a flurry of dot release bug fixes.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13515">CLJ-118</key>
            <summary>GC Issue 114:  version.properties in branch/1.0 is inaccurate</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 12:17:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22814" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/118"&gt;http://www.assembla.com/spaces/clojure/tickets/118&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22815" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-115] GC  Issue 111: Enable naming an array parameter for areduce</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-115</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by bo...@boriska.com, Apr 28, 2009

Currently there is no way to access anonymous array parameter of areduce.

Consider:

(areduce (.. &lt;span class="code-object"&gt;System&lt;/span&gt; getProperties values toArray) 
     i r 0 (some_expression))
some_expression has no way to access the array.

Per Rich:
--------------------
Yes, areduce would be nicer &lt;span class="code-keyword"&gt;if&lt;/span&gt; it looked like a binding set:

(areduce [aname anarray, ret init] expr)
(areduce [aname anarray, ret init, start-idx  start-n] expr)
(areduce [aname anarray, ret init, start-idx  start-n, end-idx end-n]
expr) 
--------------------

This was discussed here:
http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/tree/browse_frm/thread/40597a8ac322bc37/8cf6b17328ea7e8b?rnum=1&amp;amp;_done=%2Fgroup%2Fclojure%2Fbrowse_frm%2Fthread%2F40597a8ac322bc37%2F8cf6b17328ea7e8b%3Ftvc%3D1%26pli%3D1%26#doc_9ea7e3c5d500ed3c&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13512">CLJ-115</key>
            <summary>GC  Issue 111: Enable naming an array parameter for areduce</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 14:11:00 -0700</created>
                <updated>Tue, 24 Aug 2010 03:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22803" author="importer" created="Tue, 24 Aug 2010 03:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/115"&gt;http://www.assembla.com/spaces/clojure/tickets/115&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22804" author="importer" created="Tue, 24 Aug 2010 03:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-113] GC Issue 109:  RT.load's "don't load if already loaded" mechanism breaks ":reload-all"</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-113</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by scgilardi, Apr 24, 2009

What (small set of) steps will reproduce the problem?

&lt;span class="code-quote"&gt;"require"&lt;/span&gt; and &lt;span class="code-quote"&gt;"use"&lt;/span&gt; support a &lt;span class="code-quote"&gt;":reload-all"&lt;/span&gt; flag that is intended to  
cause the specified libs to be reloaded along with all libs on which  
they directly or indirectly depend. This is implemented by temporarily  
binding a &lt;span class="code-quote"&gt;"loaded-libs"&lt;/span&gt; &lt;span class="code-keyword"&gt;var&lt;/span&gt; to the empty set and then loading the  
specified libs.

AOT compilation added another &lt;span class="code-quote"&gt;"already loaded"&lt;/span&gt; mechanism to  
clojure.lang.RT.load() which is currently not sensitive to a "reload-
all" being in progress and breaks its operation in the following &lt;span class="code-keyword"&gt;case&lt;/span&gt;:

        A, B, and C are libs
        A depends on B. (via :require in its ns form)
        B depends on C. (via :require in its ns form)
        B has been compiled (B.class is on classpath)

        At the repl I &lt;span class="code-quote"&gt;"require"&lt;/span&gt; A which loads A, B, and C (either from
class files or clj files)
        I modify C.clj
        At the repl I &lt;span class="code-quote"&gt;"require"&lt;/span&gt; A with the :reload-all flag, intending to  
pick up the changes to C
        C is not reloaded because RT.load() skips loading B: B.class
exists, is already loaded, and B.clj hasn't changed since it was compiled.


What is the expected output? What &lt;span class="code-keyword"&gt;do&lt;/span&gt; you see instead?

I expect :reload-all to be effective. It isn't.

What version are you using?

svn 1354, 1.0.0RC1

Was &lt;span class="code-keyword"&gt;this&lt;/span&gt; discussed on the group? If so, please provide a link to the
discussion:

http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/browse_frm/thread/9bbc290321fd895f/e6a967250021462a#e6a967250021462a
&lt;/span&gt;
Please provide any additional information below.

I'll upload a patch soon that creates a &lt;span class="code-quote"&gt;"*reload-all*"&lt;/span&gt; &lt;span class="code-keyword"&gt;var&lt;/span&gt; with a  
root binding of nil and code to bind it to &lt;span class="code-keyword"&gt;true&lt;/span&gt; when the current  
thread has a :reload-all call pending. When *reload-all* is &lt;span class="code-keyword"&gt;true&lt;/span&gt;,  
RT.load() will (re)load all libs from their &lt;span class="code-quote"&gt;".clj"&lt;/span&gt; files even &lt;span class="code-keyword"&gt;if&lt;/span&gt;  
they're already loaded.

The fix &lt;span class="code-keyword"&gt;for&lt;/span&gt; &lt;span class="code-keyword"&gt;this&lt;/span&gt; may need to be coordinated with a fix &lt;span class="code-keyword"&gt;for&lt;/span&gt; issue #3.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13510">CLJ-113</key>
            <summary>GC Issue 109:  RT.load's "don't load if already loaded" mechanism breaks ":reload-all"</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="scgilardi">Stephen C. Gilardi</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 12:07:00 -0700</created>
                <updated>Tue, 9 Aug 2011 18:31:28 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22796" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/113"&gt;http://www.assembla.com/spaces/clojure/tickets/113&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22797" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22798" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #42, #113, #2, #20, #94, #96, #104, #119, #124, #127, #149, #162)&lt;/p&gt;</comment>
                    <comment id="26713" author="hiredman" created="Mon, 8 Aug 2011 17:40:02 -0700">&lt;p&gt;seems like the code that is emitted in the static init for namespace classes could be emitted into a init_ns() static method and the static init could call init_ns(). then RT.load could call init_ns() to get the behavior of reloading an AOT compiled namespace. &lt;/p&gt;</comment>
                    <comment id="26715" author="hiredman" created="Tue, 9 Aug 2011 18:31:28 -0700">&lt;p&gt;looking at the compiler it looks like most of what I mentioned above is already implemented, just need RT to reflectively call load() on the namespace class in the right place&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-112] GC  Issue 108: All Clojure interfaces should specify CharSequence instead of String when possible</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-112</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by redchin, Apr 20, 2009

rhickey: unlink: then just use a map {:escaped &lt;span class="code-keyword"&gt;true&lt;/span&gt; :val &lt;span class="code-quote"&gt;"foo"&lt;/span&gt;}

unlink: What I meant is, everything in between would want to see something 
&lt;span class="code-object"&gt;String&lt;/span&gt;-y, not caring whether it's a &lt;span class="code-object"&gt;String&lt;/span&gt; or MyString.

hiredman: unlink: &lt;span class="code-keyword"&gt;if&lt;/span&gt; you use something that &lt;span class="code-keyword"&gt;implements&lt;/span&gt; CharSequence and 
IMeta (I think it's IMeta) you get something that is basically a &lt;span class="code-object"&gt;String&lt;/span&gt;, 
but with metadata

rhickey: what hiredman said

hiredman: ideally most things would not specify &lt;span class="code-object"&gt;String&lt;/span&gt; but CharSequence in 
their &lt;span class="code-keyword"&gt;interface&lt;/span&gt;

hiredman: but somehow I doubt that is &lt;span class="code-keyword"&gt;case&lt;/span&gt;

unlink: ok.

unlink: Good to know.

rhickey: hiredman: unfortunately that's not &lt;span class="code-keyword"&gt;true&lt;/span&gt; of some of Clojure - could 
you enter an issue &lt;span class="code-keyword"&gt;for&lt;/span&gt; it please - use CharSequence when possible?&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13509">CLJ-112</key>
            <summary>GC  Issue 108: All Clojure interfaces should specify CharSequence instead of String when possible</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 12:06:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22794" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/112"&gt;http://www.assembla.com/spaces/clojure/tickets/112&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22795" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-107] GC Issue 103: bit-count function</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-107</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by a...@thened.net, Apr 08, 2009

I posted &lt;span class="code-keyword"&gt;this&lt;/span&gt; small patch to the mailing list last week but received no
feedback, so I'm attaching it here to make sure it doesn't get lost.  I
have submitted a CA.

http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/browse_thread/thread/4345f76a12bac6fe/
&lt;/span&gt;
The &lt;span class="code-keyword"&gt;new&lt;/span&gt; function bit-count returns the count of 1-bits in a number, like
C's popcount or Common Lisp's logcount.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13504">CLJ-107</key>
            <summary>GC Issue 103: bit-count function</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 11:59:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22781" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/107"&gt;http://www.assembla.com/spaces/clojure/tickets/107&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
bit-count.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/dqone2w4er3RbzeJe5afGb/download/dqone2w4er3RbzeJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/dqone2w4er3RbzeJe5afGb/download/dqone2w4er3RbzeJe5afGb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22782" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;oranenj said: [&lt;a href="file:dqone2w4er3RbzeJe5afGb"&gt;file:dqone2w4er3RbzeJe5afGb&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="22783" author="importer" created="Tue, 24 Aug 2010 01:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-99] GC Issue 95:    max-key and min-key evaluate k multiple times for arguments</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-99</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by H.Duerer, Mar 13, 2009

max-key or min-key will evaluate (k value) multiple times &lt;span class="code-keyword"&gt;for&lt;/span&gt; arguments &lt;span class="code-keyword"&gt;if&lt;/span&gt;
more than 2 arguments are passed.

This is undesirable &lt;span class="code-keyword"&gt;if&lt;/span&gt; k is expensive to calculate.

Something like the code below would avoid these &lt;span class="code-object"&gt;double&lt;/span&gt; calculations (at the
price of generating more ephemeral garbage)

(defn max-key
  &lt;span class="code-quote"&gt;"Returns the x &lt;span class="code-keyword"&gt;for&lt;/span&gt; which (k x), a number, is greatest."&lt;/span&gt;
  ([k x] x)
  ([k x y] (&lt;span class="code-keyword"&gt;if&lt;/span&gt; (&amp;gt; (k x) (k y)) x y))
  ([k x y &amp;amp; more]
     (second (reduce (fn [x y] (&lt;span class="code-keyword"&gt;if&lt;/span&gt; (&amp;gt; (first x) (first y)) x y))
                     (map #(vector (k %) %) (cons x (cons y more)))))))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13496">CLJ-99</key>
            <summary>GC Issue 95:    max-key and min-key evaluate k multiple times for arguments</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 13:49:00 -0700</created>
                <updated>Tue, 24 Aug 2010 03:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="22760" author="importer" created="Tue, 24 Aug 2010 03:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/99"&gt;http://www.assembla.com/spaces/clojure/tickets/99&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22761" author="importer" created="Tue, 24 Aug 2010 03:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-84] GC Issue 81:    compile gen-class fail when class returns self</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-84</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by davidhaub, Feb 14, 2009

When attempting to compile the following program, clojure fails with a
ClassNotFoundException.  It occurs because one of the methods returns the
same class that is being generated.  If the returnMe method below is
changed to &lt;span class="code-keyword"&gt;return&lt;/span&gt; an &lt;span class="code-object"&gt;Object&lt;/span&gt;, the compile succeeds.

Beware when testing! If the classpath contains a class file (say from a
prior successful build when the returnMe method was changed to &lt;span class="code-keyword"&gt;return&lt;/span&gt; an
object), the compile will succeed.  Always clear out the
clojure.compile.path prior to compiling.

;badgenclass.clj
(ns badgenclass
  (:gen-class
     :state state
     :methods
     [[returnMe [] badgenclass]]
     :init init))
(defn -init []
  [[] nil])

(defn -returnMe [&lt;span class="code-keyword"&gt;this&lt;/span&gt;]
  &lt;span class="code-keyword"&gt;this&lt;/span&gt;)

#!/bin/sh
rm -rf classes
mkdir classes
java -cp lib/clojure.jar:classes:. -Dclojure.compile.path=classes \
clojure.lang.Compile badgenclass


Comment 1 by chouser, Mar 07, 2009

Attached is a patch that accepts strings or symbols &lt;span class="code-keyword"&gt;for&lt;/span&gt; parameter and &lt;span class="code-keyword"&gt;return&lt;/span&gt; class
names, and generates the appropriate bytecode without calling &lt;span class="code-object"&gt;Class&lt;/span&gt;/forName.  It
fixes &lt;span class="code-keyword"&gt;this&lt;/span&gt; issue, but because 'ns' doesn't resolve :gen-class's arguments, class
names aren't checked as early anymore.  :gen-class-created classes with invalid
parameter or &lt;span class="code-keyword"&gt;return&lt;/span&gt; types can even be instantiated, and no error will be reported
until the broken method is called.

One possible alternative would be to call &lt;span class="code-object"&gt;Class&lt;/span&gt;/forName on any symbols given, but
allow strings to use the method given by &lt;span class="code-keyword"&gt;this&lt;/span&gt; patch.  To &lt;span class="code-keyword"&gt;return&lt;/span&gt; your own type, you'd
need a method defined like:

  [returnMe [] &lt;span class="code-quote"&gt;"badgenclass"&lt;/span&gt;]

Any thoughts?&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13481">CLJ-84</key>
            <summary>GC Issue 81:    compile gen-class fail when class returns self</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="richhickey">Rich Hickey</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 20:30:00 -0700</created>
                <updated>Fri, 10 Dec 2010 07:30:52 -0800</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22702" author="importer" created="Tue, 28 Sep 2010 15:09:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/84"&gt;http://www.assembla.com/spaces/clojure/tickets/84&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
genclass-allow-unresolved-classname.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/cWS6Aww30r3RbzeJe5afGb/download/cWS6Aww30r3RbzeJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/cWS6Aww30r3RbzeJe5afGb/download/cWS6Aww30r3RbzeJe5afGb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22703" author="importer" created="Tue, 28 Sep 2010 15:09:00 -0700">&lt;p&gt;oranenj said: [&lt;a href="file:cWS6Aww30r3RbzeJe5afGb"&gt;file:cWS6Aww30r3RbzeJe5afGb&lt;/a&gt;]: on comment 1&lt;/p&gt;</comment>
                    <comment id="22704" author="importer" created="Tue, 28 Sep 2010 15:09:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="25904" author="stu" created="Sat, 30 Oct 2010 09:58:08 -0700">&lt;p&gt;The approach take in the initial patch (delaying resolution of symbols into classes) is fine: gen-class makes no promise about when this happens, and the dynamic approach feels more consistent with Clojure. I think the proposed (but not implemented) use of string/symbol to control when class names are resolved is a bad idea: magical and not implied by the types.&lt;/p&gt;

&lt;p&gt;Needed:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;update the patch to apply cleanly&lt;/li&gt;
	&lt;li&gt;consider whether totype could live in clojure.reflect.java. (Beware load order dependencies.)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="25910" author="chouser@n01se.net" created="Sat, 30 Oct 2010 19:29:59 -0700">&lt;p&gt;Wow, 18-month-old patch, back to haunt me for Halloway'een&lt;/p&gt;

&lt;p&gt;So what does it mean that the assignee is Rich, but it's waiting on me?&lt;/p&gt;</comment>
                    <comment id="25915" author="stu" created="Mon, 1 Nov 2010 07:17:22 -0700">&lt;p&gt;I am using Approval = Incomplete plus Waiting On = Someone to let submitters know that there is feedback waiting, and that they can move the ticket forward by acting on it. The distinction is opportunity to contribute (something has been provided to let you move forward) vs. expectation of contribution. &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>chouser@n01se.net</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-77] GC Issue 74:    Clojure compiler emits too-large classfiles (results in ClassFormatError)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-77</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by cemer...@snowtide.com, Feb 10, 2009

The jvm has certain implementation limits around the maximum size of
classfiles, literal strings, method length, etc; however, in certain
circumstances, the Clojure compiler can currently emit classfiles that
violate some of those limitations, causing an error later when the
classfile is loaded.

While test coverage would necessarily detect &lt;span class="code-keyword"&gt;this&lt;/span&gt; sort of problem on a
project-by-project basis when one's tests attempted to load a project's
classfiles, it seems like Clojure should &lt;span class="code-keyword"&gt;do&lt;/span&gt; the following to ensure failure
as quickly as possible:

- &lt;span class="code-keyword"&gt;throw&lt;/span&gt; an exception immediately &lt;span class="code-keyword"&gt;if&lt;/span&gt;, &lt;span class="code-keyword"&gt;while&lt;/span&gt; compiling a lib, it is detected
that the resulting classfile(s) would violate any classfile implementation
limits.  Ideally, the exception's message would detail what file and on
which line number the offending form is (e.g. &lt;span class="code-keyword"&gt;if&lt;/span&gt; a method's bytecode would
be too &lt;span class="code-object"&gt;long&lt;/span&gt;).  I can imagine that doing &lt;span class="code-keyword"&gt;this&lt;/span&gt; may not be straightforward; a
reasonable stop-gap would be &lt;span class="code-keyword"&gt;for&lt;/span&gt; the compiler to immediately attempt to
load the generated classfile in order to ensure up-front failure.

- emit a warning &lt;span class="code-keyword"&gt;if&lt;/span&gt; any clojure form is read that would, upon being
compiled, require violating any of the classfile implementation limits; I
suspect that *most* people looking to generate classfiles would be doing so
in a &lt;span class="code-quote"&gt;"build"&lt;/span&gt; environment (rather than loading some code, tinkering, and
then using clojure.core/compile), but &lt;span class="code-keyword"&gt;for&lt;/span&gt; those that aren't, I can imagine
there being a good deal of frustration around seeing that loading and using
some code successfully would eventually produce unusable classfiles.

I've appended a sample stack trace emitted by java when it attempted to
load a too-&lt;span class="code-object"&gt;long&lt;/span&gt; method implementation (which was produced by embedding a
large list literal in a compiled lib).

Exception in thread &lt;span class="code-quote"&gt;"main"&lt;/span&gt; java.lang.ClassFormatError: Invalid method  
Code length 105496 in class file com/foo/MyClass__init
         at java.lang.&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.defineClass1(Native Method)
         at java.lang.&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.defineClass(&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.java:675)
         at  
java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
         at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
         at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
         at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
         at java.security.AccessController.doPrivileged(Native Method)
         at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
         at java.lang.&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.loadClass(&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.java:316)
         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:
288)
         at java.lang.&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.loadClass(&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.java:251)
         at java.lang.&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.loadClassInternal(&lt;span class="code-object"&gt;ClassLoader&lt;/span&gt;.java:
374)
         at java.lang.&lt;span class="code-object"&gt;Class&lt;/span&gt;.forName0(Native Method)
         at java.lang.&lt;span class="code-object"&gt;Class&lt;/span&gt;.forName(&lt;span class="code-object"&gt;Class&lt;/span&gt;.java:247)
         at clojure.lang.RT.loadClassForName(RT.java:1512)
         at clojure.lang.RT.load(RT.java:394)
         at clojure.lang.RT.load(RT.java:374)
         at clojure.core$load__4911$fn__4913.invoke(core.clj:3623)
         at clojure.core$load__4911.doInvoke(core.clj:3622)
         at clojure.lang.RestFn.invoke(RestFn.java:413)
         at clojure.core$load_one__4863.invoke(core.clj:3467)
         at clojure.core$compile__4918$fn__4920.invoke(core.clj:3633)
         at clojure.core$compile__4918.invoke(core.clj:3632)
         at clojure.lang.Var.invoke(Var.java:336)
         at clojure.lang.Compile.main(Compile.java:56)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13474">CLJ-77</key>
            <summary>GC Issue 74:    Clojure compiler emits too-large classfiles (results in ClassFormatError)</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 14:16:00 -0700</created>
                <updated>Tue, 24 Aug 2010 04:45:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22678" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/77"&gt;http://www.assembla.com/spaces/clojure/tickets/77&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22679" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-69] GC Issue 66: Add "keyset" to Clojure; make .keySet for APersistentMap return IPersistentSet</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-69</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by wolfe.a.jason, Feb 04, 2009

Describe the feature/change.

Add &lt;span class="code-quote"&gt;"keyset"&lt;/span&gt; to Clojure; make .keySet &lt;span class="code-keyword"&gt;for&lt;/span&gt; APersistentMap &lt;span class="code-keyword"&gt;return&lt;/span&gt; an
IPersistentSet

Was &lt;span class="code-keyword"&gt;this&lt;/span&gt; discussed on the group? If so, please provide a link to the
discussion:

http:&lt;span class="code-comment"&gt;//groups.google.com/group/clojure/browse_thread/thread/66e708e477ae992f/ff3d8d588068b60e?hl=en#ff3d8d588068b60e
&lt;/span&gt;
-----------------------------------------------------

A patch is attached.  Some notes:

I chose to add a &lt;span class="code-quote"&gt;"keyset"&lt;/span&gt; function, rather than change the existing &lt;span class="code-quote"&gt;"keys"&lt;/span&gt;,
so as to avoid breaking anything.

The corresponding RT.keyset function just calls .keySet on the argument.
I would have liked to have &lt;span class="code-quote"&gt;"keyset"&lt;/span&gt; &lt;span class="code-keyword"&gt;return&lt;/span&gt; an IPersistentSet even when
passed a (non-Clojure) java.util.Map, but &lt;span class="code-keyword"&gt;this&lt;/span&gt; seems impossible to &lt;span class="code-keyword"&gt;do&lt;/span&gt; in
sublinear time because of essentially the same limitation mentioned in the
above thread (the Map &lt;span class="code-keyword"&gt;interface&lt;/span&gt; does not support getKey() or entryAt()) --
assuming, again, that &lt;span class="code-quote"&gt;"get"&lt;/span&gt; is supposed to &lt;span class="code-keyword"&gt;return&lt;/span&gt; the actual (identical?)
key in a set, and not just an .equal key.

I then changed the implementation of .keySet &lt;span class="code-keyword"&gt;for&lt;/span&gt; APersistentMap to
essentially copy APersistentSet.  A more concise alternative would have
been to extend APersistentSet and override the .get method, but that made
me a bit nervous (since &lt;span class="code-keyword"&gt;if&lt;/span&gt; APeristentSet changed &lt;span class="code-keyword"&gt;this&lt;/span&gt; could &lt;span class="code-keyword"&gt;break&lt;/span&gt;). 

Anyway, &lt;span class="code-keyword"&gt;this&lt;/span&gt; is my first patch &lt;span class="code-keyword"&gt;for&lt;/span&gt; the Java side of Clojure, and I'm not
yet solid on the conventions and aesthetics, so
comments/questions/criticisms/requests &lt;span class="code-keyword"&gt;for&lt;/span&gt; revisions are very welcome.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13466">CLJ-69</key>
            <summary>GC Issue 66: Add "keyset" to Clojure; make .keySet for APersistentMap return IPersistentSet</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Jun 2009 22:55:00 -0700</created>
                <updated>Fri, 10 Dec 2010 06:48:40 -0800</updated>
                                    <version>Approved Backlog</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22640" author="importer" created="Tue, 28 Sep 2010 05:00:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/69"&gt;http://www.assembla.com/spaces/clojure/tickets/69&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
keyset.patch - &lt;a href="https://www.assembla.com/spaces/clojure/documents/dKgE6mw3Gr3O2PeJe5afGb/download/dKgE6mw3Gr3O2PeJe5afGb"&gt;https://www.assembla.com/spaces/clojure/documents/dKgE6mw3Gr3O2PeJe5afGb/download/dKgE6mw3Gr3O2PeJe5afGb&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22641" author="importer" created="Tue, 28 Sep 2010 05:00:00 -0700">&lt;p&gt;oranenj said: [&lt;a href="file:dKgE6mw3Gr3O2PeJe5afGb"&gt;file:dKgE6mw3Gr3O2PeJe5afGb&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="22642" author="importer" created="Tue, 28 Sep 2010 05:00:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="26003" author="stu" created="Fri, 3 Dec 2010 11:12:52 -0800">&lt;p&gt;patch not in correct format&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10006">Incomplete</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-64] GC  Issue 61:    Make Clojure datatype Java Serializable</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-64</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by straszheimjeffrey, Jan 30, 2009

I mentioned &lt;span class="code-keyword"&gt;this&lt;/span&gt; on Google Groups.

Currently the core Clojure datatypes are not Java Serializable.  This means
that they cannot easily be streamed as binary objects.  Also, it will be
difficult to use them with certain Java features like RMI.

Comment 1 by rob.nikander, Mar 11, 2009

I voted &lt;span class="code-keyword"&gt;for&lt;/span&gt; &lt;span class="code-keyword"&gt;this&lt;/span&gt; because I'm experimenting with using Clojure &lt;span class="code-keyword"&gt;for&lt;/span&gt; web apps.  Tomcat barfs trying to serialize 
objects in the session, like clojure.lang.Cons.

Comment 2 by cjkent, Mar 25, 2009

I'm experimenting with Clojure and Wicket.  Any Wicket page classes containing maps
that use Keywords as keys can't be saved to the session because Keyword isn't
serializable.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13461">CLJ-64</key>
            <summary>GC  Issue 61:    Make Clojure datatype Java Serializable</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 21:38:00 -0700</created>
                <updated>Tue, 24 Aug 2010 12:44:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22625" author="importer" created="Tue, 24 Aug 2010 12:44:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/64"&gt;http://www.assembla.com/spaces/clojure/tickets/64&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22626" author="importer" created="Tue, 24 Aug 2010 12:44:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22627" author="importer" created="Tue, 24 Aug 2010 12:44:00 -0700">&lt;p&gt;cemerick said: A patch has been submitted (via ticket #174) to add Serializable support to c.l.Keyword.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-47] GC Issue 43: Dead code in generated bytecode</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-47</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by Levente.Santha, Jan 11, 2009
The bug was described in detail in &lt;span class="code-keyword"&gt;this&lt;/span&gt; thread: http:&lt;span class="code-comment"&gt;//groups.google.com/
&lt;/span&gt;group/clojure/browse_thread/thread/81ba15d7e9130441

For clojure.core$last__2954.invoke the correct bytecode would be (notice 
the removed &lt;span class="code-quote"&gt;"&lt;span class="code-keyword"&gt;goto&lt;/span&gt;    65"&lt;/span&gt; after &lt;span class="code-quote"&gt;"41:  &lt;span class="code-keyword"&gt;goto&lt;/span&gt;    0"&lt;/span&gt;):

&lt;span class="code-keyword"&gt;public&lt;/span&gt; java.lang.&lt;span class="code-object"&gt;Object&lt;/span&gt; invoke(java.lang.&lt;span class="code-object"&gt;Object&lt;/span&gt;)   &lt;span class="code-keyword"&gt;throws&lt;/span&gt; 
java.lang.Exception;
  Code:
   0:   getstatic       #22; &lt;span class="code-comment"&gt;//Field const__0:Lclojure/lang/Var;
&lt;/span&gt;   3:   invokevirtual   #37; &lt;span class="code-comment"&gt;//Method clojure/lang/Var.get:()Ljava/lang/
&lt;/span&gt;&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   6:   checkcast       #39; &lt;span class="code-comment"&gt;//class clojure/lang/IFn
&lt;/span&gt;   9:   aload_1
   10:  invokeinterface #41,  2; &lt;span class="code-comment"&gt;//InterfaceMethod clojure/lang/IFn.invoke:
&lt;/span&gt;(Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   15:  dup
   16:  ifnull  44
   19:  getstatic       #47; &lt;span class="code-comment"&gt;//Field java/lang/&lt;span class="code-object"&gt;Boolean&lt;/span&gt;.FALSE:Ljava/lang/
&lt;/span&gt;&lt;span class="code-object"&gt;Boolean&lt;/span&gt;;
   22:  if_acmpeq       45
   25:  getstatic       #22; &lt;span class="code-comment"&gt;//Field const__0:Lclojure/lang/Var;
&lt;/span&gt;   28:  invokevirtual   #37; &lt;span class="code-comment"&gt;//Method clojure/lang/Var.get:()Ljava/lang/
&lt;/span&gt;&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   31:  checkcast       #39; &lt;span class="code-comment"&gt;//class clojure/lang/IFn
&lt;/span&gt;   34:  aload_1
   35:  invokeinterface #41,  2; &lt;span class="code-comment"&gt;//InterfaceMethod clojure/lang/IFn.invoke:
&lt;/span&gt;(Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   40:  astore_1
   41:  &lt;span class="code-keyword"&gt;goto&lt;/span&gt;    0
   44:  pop
   45:  getstatic       #26; &lt;span class="code-comment"&gt;//Field const__1:Lclojure/lang/Var;
&lt;/span&gt;   48:  invokevirtual   #37; &lt;span class="code-comment"&gt;//Method clojure/lang/Var.get:()Ljava/lang/
&lt;/span&gt;&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   51:  checkcast       #39; &lt;span class="code-comment"&gt;//class clojure/lang/IFn
&lt;/span&gt;   54:  aload_1
   55:  aconst_null
   56:  astore_1
   57:  invokeinterface #41,  2; &lt;span class="code-comment"&gt;//InterfaceMethod clojure/lang/IFn.invoke:
&lt;/span&gt;(Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;)Ljava/lang/&lt;span class="code-object"&gt;Object&lt;/span&gt;;
   62:  areturn

Our JIT reported incorrect stack size along the basic block introduced by 
the unneeded &lt;span class="code-keyword"&gt;goto&lt;/span&gt;.
The bug was present in SVN rev 1205.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13444">CLJ-47</key>
            <summary>GC Issue 43: Dead code in generated bytecode</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 13:18:00 -0700</created>
                <updated>Fri, 8 Oct 2010 08:21:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22584" author="importer" created="Fri, 8 Oct 2010 08:21:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/47"&gt;http://www.assembla.com/spaces/clojure/tickets/47&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22585" author="importer" created="Fri, 8 Oct 2010 08:21:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22586" author="importer" created="Fri, 8 Oct 2010 08:21:00 -0700">&lt;p&gt;aredington said: This appears to still be a problem with the generated bytecode in 1.3.0. Examining the bytecode for last, the problem has moved to invokeStatic:&lt;/p&gt;

&lt;p&gt;&amp;lt;pre&amp;gt;&lt;br/&gt;
public static java.lang.Object invokeStatic(java.lang.Object)   throws java.lang.Exception;&lt;br/&gt;
  Code:&lt;br/&gt;
   0: aload_0&lt;br/&gt;
   1: invokestatic #50; //Method clojure/core$next.invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;&lt;br/&gt;
   4: dup&lt;br/&gt;
   5: ifnull 25&lt;br/&gt;
   8: getstatic #56; //Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;&lt;br/&gt;
   11: if_acmpeq 26&lt;br/&gt;
   14: aload_0&lt;br/&gt;
   15: invokestatic #50; //Method clojure/core$next.invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;&lt;br/&gt;
   18: astore_0&lt;br/&gt;
   19: goto 0&lt;br/&gt;
   22: goto 30&lt;br/&gt;
   25: pop&lt;br/&gt;
   26: aload_0&lt;br/&gt;
   27: invokestatic #59; //Method clojure/core$first.invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;&lt;br/&gt;
   30: areturn&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;/p&gt;

&lt;p&gt;Line number 22 is an unreachable goto given the prior goto on line 19.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-42] GC Issue 38: When using AOT compilation, "load"ed files are not reloaded on (require :reload 'name.space)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-42</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by m...@kotka.de, Jan 07, 2009
What (small set of) steps will reproduce the problem?

1. Create a file src/foo.clj

cat &amp;gt;src/foo.clj &amp;lt;&amp;lt;EOF
(ns foo (:load &lt;span class="code-quote"&gt;"bar"&lt;/span&gt;))
EOF

2. Create a file src/bar.clj

cat &amp;gt;src/bar.clj &amp;lt;&amp;lt;EOF
(clojure.core/in-ns 'foo)
(def x 8)
EOF

3. Start Clojure Repl: java -cp src:classes clojure.main -r

4. Compile the namespace.

user=&amp;gt; (compile 'foo)
foo

5. Require the namespace
user=&amp;gt; (require :reload-all :verbose 'foo)
(clojure.core/load &lt;span class="code-quote"&gt;"/foo"&lt;/span&gt;)
(clojure.core/load &lt;span class="code-quote"&gt;"/bar"&lt;/span&gt;)

What is the expected output? What &lt;span class="code-keyword"&gt;do&lt;/span&gt; you see instead?

6. Re-Require the namespace

user=&amp;gt; (require :reload-all :verbose 'foo)
(clojure.core/load &lt;span class="code-quote"&gt;"/foo"&lt;/span&gt;)

Only the &lt;span class="code-quote"&gt;"master"&lt;/span&gt; file is loaded, but not the bar file.
Expected would have been to also load the bar file.
Changes to bar.clj are not reflected, and depending
on the setting (eg. using multimethods in foo from
a different namespace) code may be corrupted.

What version are you using?

SVN rev. 1195&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13439">CLJ-42</key>
            <summary>GC Issue 38: When using AOT compilation, "load"ed files are not reloaded on (require :reload 'name.space)</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                        <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="scgilardi">Stephen C. Gilardi</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 13:15:00 -0700</created>
                <updated>Tue, 24 Aug 2010 04:44:00 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22573" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/42"&gt;http://www.assembla.com/spaces/clojure/tickets/42&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22574" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="22575" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#42, #71)&lt;/p&gt;</comment>
                    <comment id="22576" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #42, #113, #2, #20, #94, #96, #104, #119, #124, #127, #149, #162)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-21] GC Issue 17: arity checking during compilation</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-21</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by richhickey, Dec 17, 2008
Use available metadata to check calls when possible&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13418">CLJ-21</key>
            <summary>GC Issue 17: arity checking during compilation</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 20:59:00 -0700</created>
                <updated>Tue, 24 Aug 2010 12:44:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22519" author="importer" created="Tue, 24 Aug 2010 12:44:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/21"&gt;http://www.assembla.com/spaces/clojure/tickets/21&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-19] GC Issue 15: JavaDoc for interfaces</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-19</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by richhickey, Dec 17, 2008
Add JavaDoc to those interfaces supported &lt;span class="code-keyword"&gt;for&lt;/span&gt; &lt;span class="code-keyword"&gt;public&lt;/span&gt; use - IFn,
IPersistentCollection etc.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13416">CLJ-19</key>
            <summary>GC Issue 15: JavaDoc for interfaces</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 12:58:00 -0700</created>
                <updated>Tue, 24 Aug 2010 04:44:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22508" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/19"&gt;http://www.assembla.com/spaces/clojure/tickets/19&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22509" author="importer" created="Tue, 24 Aug 2010 04:44:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-15] GC Issue 11: incremental hashcode calculation for collections</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-15</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by richhickey, Dec 17, 2008
So hachCode can be &lt;span class="code-keyword"&gt;final&lt;/span&gt;, more efficient to calc as you go.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13412">CLJ-15</key>
            <summary>GC Issue 11: incremental hashcode calculation for collections</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                        <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 09:55:00 -0700</created>
                <updated>Tue, 24 Aug 2010 01:44:00 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="22495" author="importer" created="Tue, 24 Aug 2010 01:44:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/15"&gt;http://www.assembla.com/spaces/clojure/tickets/15&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>

<item>
            <title>[CLJ-2] Scopes</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-2</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Add the scope system for dealing with resource lifetime management&lt;/p&gt;</description>
                <environment/>
            <key id="13399">CLJ-2</key>
            <summary>Scopes</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="richhickey">Rich Hickey</assignee>
                                <reporter username="importer">Assembla Importer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Jun 2009 11:35:00 -0700</created>
                <updated>Thu, 8 Mar 2012 02:01:38 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="22464" author="importer" created="Tue, 24 Aug 2010 09:43:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/2"&gt;http://www.assembla.com/spaces/clojure/tickets/2&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22465" author="importer" created="Tue, 24 Aug 2010 09:43:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #42, #113, #2, #20, #94, #96, #104, #119, #124, #127, #149, #162)&lt;/p&gt;</comment>
                    <comment id="26566" author="stu" created="Tue, 12 Jul 2011 06:26:23 -0700">&lt;p&gt;Patch demonstrates idea, not ready for prime time.&lt;/p&gt;</comment>
                    <comment id="27496" author="tsdh" created="Fri, 23 Dec 2011 05:37:53 -0800">&lt;p&gt;I think the decision of having to specify either a Closeable resource or a close function for an existing non-Closeable resource in with-open is quite awkward, because they have completely different meaning.&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;  (let [foo (open-my-custom-resource "foo.bar")]
    (with-open [r (reader "foo.txt")
                foo #(.terminate foo)]
      (do-stuff r foo)))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think a CloseableResource protocol that can be extended to custom types as implemented in the patch to &lt;a href="#CLJ-308"&gt;CLJ-308&lt;/a&gt; is somewhat easier to use.  Extend it once, and then you can use open-my-custom-resource in with-open just like reader/writer and friends...&lt;/p&gt;

&lt;p&gt;That said, Scopes can still be useful, but I'd vote for handling the "how should that resource be closed" question by a protocol.  Then the with-open helper can simply add&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(swap! *scope* conj (fn [] (clojure.core.protocols/close ~(bindings 0))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;and cleanup-scope only needs to apply each fn without having to distinguish Closeables from fns.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10275" name="scopes-spike.patch" size="4258" author="stu" created="Tue, 12 Jul 2011 06:26:23 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                                                                                            </customfields>
    </item>
</channel>
</rss>