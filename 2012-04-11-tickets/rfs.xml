<!--
RSS generated by JIRA (4.4#649-r158309) at Wed Apr 11 16:40:55 CDT 2012

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://dev.clojure.org/jira/sr/jira.issueviews:searchrequest-xml/10305/SearchRequest-10305.xml?tempMax=1000&field=key&field=summary
-->
<!-- If you wish to do custom client-side styling of RSS, uncomment this:
<?xml-stylesheet href="http://dev.clojure.org/jira/styles/jiraxml2html.xsl" type="text/xsl"?>
-->
<rss version="0.92">
    <channel>
        <title>Ready for Screening (Clojure JIRA)</title>
        <link>http://dev.clojure.org/jira/secure/IssueNavigator.jspa?requestId=10305</link>
        <description>Has a patch of "Code" or "Code and Test", and Approval is anything other than Incomplete, Screened, Accepted, or OK.

Screener should look at it and decide whether to decline the patch (by changing Patch attribute to None), accept it as screened (by changing Approval attribute to Screened), or if the "patch" was a suggestion to decline the ticket as a whole and you agree, close it as declined.</description>
                <language>en-us</language>
                        <issue start="0" end="62" total="62"/>
                <build-info>
            <version>4.4</version>
            <build-number>649</build-number>
            <build-date>25-07-2011</build-date>
        </build-info>
<item>
            <title>[CLJ-970] extend/implement parameterized types (generics)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-970</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When extending parameterized types, class files can track the original signatures of the superclass and super interfaces so that the original types can be obtained at run time.  This runtime reflection is used in some Java frameworks, and implementing it in Clojure can enable interop.  See &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/5efd692804df3f47/1336e591c2eedfa1"&gt;http://groups.google.com/group/clojure/browse_thread/thread/5efd692804df3f47/1336e591c2eedfa1&lt;/a&gt; for examples of this request.&lt;/p&gt;

&lt;p&gt;This proposal checks the :parameters keyword in type meta information.  If a parameter is found, it is added to the class signature.&lt;/p&gt;</description>
                <environment/>
            <key id="15324">CLJ-970</key>
            <summary>extend/implement parameterized types (generics)</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jim.blomo">Jim Blomo</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Apr 2012 23:33:49 -0700</created>
                <updated>Mon, 9 Apr 2012 23:33:49 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                    <attachment id="11033" name="clojure-parameterized-generics.diff" size="5236" author="jim.blomo" created="Mon, 9 Apr 2012 23:33:49 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-966] Add support for marker protocols</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-966</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The attached patch adds support to marker protocols, for example&lt;/p&gt;

&lt;p&gt;(defprotocol Sequential&lt;br/&gt;
"marker protocol indicating a sequential type")&lt;/p&gt;</description>
                <environment/>
            <key id="15316">CLJ-966</key>
            <summary>Add support for marker protocols</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bronsa">Nicola Mometto</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Apr 2012 05:16:52 -0700</created>
                <updated>Sat, 7 Apr 2012 11:20:28 -0700</updated>
                                                                            <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28086" author="jonase" created="Sat, 7 Apr 2012 11:20:28 -0700">&lt;p&gt;Marker protocols are supported and used in ClojureScript.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11029" name="marker-protocols.diff" size="4971" author="bronsa" created="Thu, 5 Apr 2012 05:16:52 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-967] java.io/do-copy can still garble multibyte characters on IBM JDK 1.5 and 1.6</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-967</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Same issue as &lt;a href="http://dev.clojure.org/jira/browse/CLJ-886" title="java.io/do-copy can garble multibyte characters"&gt;&lt;del&gt;CLJ-886&lt;/del&gt;&lt;/a&gt;, but while the patch applied for that issue fixes the problem for many OS/JDK combos, there appear to be differences in how surrogate pair characters are handled in some OS/JDK combos.  In particular, at least Linux + IBM JDK 1.5 and Linux + IBM JDK 1.6 still fail the tests checked in for do-copy.&lt;/p&gt;</description>
                <environment>At least Linux + IBM JDK 1.5, and Linux + IBM JDK 1.6</environment>
            <key id="15318">CLJ-967</key>
            <summary>java.io/do-copy can still garble multibyte characters on IBM JDK 1.5 and 1.6</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Sat, 7 Apr 2012 07:25:55 -0700</created>
                <updated>Sat, 7 Apr 2012 07:32:47 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28085" author="jafingerhut" created="Sat, 7 Apr 2012 07:32:23 -0700">&lt;p&gt;clj-886-improved-fix-for-ibm-jdks-patch2.txt dated Apr 7 2012 makes the tests pass with Linux + IBM JDK 1.5, as well as these other combos tested:&lt;/p&gt;

&lt;p&gt;Linux + Oracle JDK 1.7&lt;br/&gt;
Linux + IBM JDK 1.5&lt;br/&gt;
Mac OS X 10.6.8 + Oracle/Apple JDK 1.6&lt;/p&gt;

&lt;p&gt;There are still failing tests for Linux + IBM JDK 1.6.  This patch currently skips the failing tests whenever the java.vendor is "IBM Corporation" and java.version is "1.6.0", so that "ant" succeeds.  It is easy enough to modify the patch so that the failing tests are kept as a bright shining reminder.  Let me know if that would be preferred &amp;#8211; it just involves removing the function ibm-jdk16, and simplifying where it is called after replacing it with false.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11030" name="clj-886-improved-fix-for-ibm-jdks-patch2.txt" size="7827" author="jafingerhut" created="Sat, 7 Apr 2012 07:32:23 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-965] clojure.org/patches should have link to JIRA workflow wiki page added, and most content removed</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-965</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure-dev/browse_frm/thread/12e90e460aec29cb"&gt;http://groups.google.com/group/clojure-dev/browse_frm/thread/12e90e460aec29cb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Relevant text supporting this suggestion copied below:&lt;/p&gt;

&lt;p&gt;&lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href="http://dev.clojure.org/display/design/JIRA+workflow"&gt;http://dev.clojure.org/display/design/JIRA+workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only a few have permission to edit this page:&lt;/p&gt;

&lt;p&gt;&lt;span class="error"&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href="http://clojure.org/patches"&gt;http://clojure.org/patches&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have carefully reviewed the content of those two side by side, section by section, and it seems to me that they are either identical, or &lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt; is more up to date.&lt;/p&gt;

&lt;p&gt;I am not proposing getting rid of &lt;span class="error"&gt;&amp;#91;2&amp;#93;&lt;/span&gt;, but instead do this:&lt;/p&gt;

&lt;p&gt;Keep the first section headed "Submitting patches to Clojure and Clojure Contrib" exactly as it is now.&lt;/p&gt;

&lt;p&gt;Immediately under the heading "So You Have an Idea...", put a single link, perhaps with one sentence or phrase, that points at &lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.  Delete all other text from there down on &lt;span class="error"&gt;&amp;#91;2&amp;#93;&lt;/span&gt;.  You will lose nothing worth saving, and you will save future confusion as what is now &lt;span class="error"&gt;&amp;#91;2&amp;#93;&lt;/span&gt; gets more and more stale. &lt;/p&gt;</description>
                <environment/>
            <key id="15315">CLJ-965</key>
            <summary>clojure.org/patches should have link to JIRA workflow wiki page added, and most content removed</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                        <label>documentation</label>
                    </labels>
                <created>Wed, 4 Apr 2012 12:29:14 -0700</created>
                <updated>Wed, 4 Apr 2012 12:32:55 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28069" author="jafingerhut" created="Wed, 4 Apr 2012 12:32:55 -0700">&lt;p&gt;I am probably abusing the "Patch" attribute of this ticket.  I've set it to Code to indicate that it is ready for screening/action, not that it actually has a patch.  I suppose if you take a very broad view of patch, one that includes the English text describing the suggested web page changes to clojure.org/patches in the description, then it does have a patch.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-308] protocol-ize with-open</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-308</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Good use (and documentation example) of protocols: make with-open aware of a Closable protocol for APIs that use a different close convention. See &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/86c87e1fc4b1347c"&gt;http://groups.google.com/group/clojure/browse_thread/thread/86c87e1fc4b1347c&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="13705">CLJ-308</key>
            <summary>protocol-ize with-open</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="1" iconUrl="http://dev.clojure.org/jira/images/icons/priority_blocker.gif">Blocker</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Apr 2010 15:07:00 -0700</created>
                <updated>Mon, 2 Apr 2012 10:11:36 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="23685" author="importer" created="Tue, 24 Aug 2010 14:39:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/308"&gt;http://www.assembla.com/spaces/clojure/tickets/308&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27491" author="tsdh" created="Fri, 23 Dec 2011 03:11:06 -0800">&lt;p&gt;Added a CloseableResource protocol and extended it on java.io.Closeable (implemented by all Readers, Writers, Streams, Channels, Sockets).  Use it in with-open.&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="27495" author="tsdh" created="Fri, 23 Dec 2011 05:14:55 -0800">&lt;p&gt;Seems to be related to Scopes (&lt;a href="http://dev.clojure.org/jira/browse/CLJ-2"&gt;http://dev.clojure.org/jira/browse/CLJ-2&lt;/a&gt;).&lt;/p&gt;</comment>
                    <comment id="27913" author="tsdh" created="Thu, 8 Mar 2012 01:59:24 -0800">&lt;p&gt;Updated patch.&lt;/p&gt;</comment>
                    <comment id="28067" author="jafingerhut" created="Mon, 2 Apr 2012 10:11:36 -0700">&lt;p&gt;Patch 0001-Added-ClosableResource-protocol-for-with-open.patch dated 08/Mar/12 applies, builds, and tests cleanly on latest master as of Apr 2 2012.  Tassilo has signed a CA.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10986" name="0001-Added-ClosableResource-protocol-for-with-open.patch" size="2708" author="tsdh" created="Thu, 8 Mar 2012 01:59:24 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-964] test-clojure/rt.clj has undeclared dependency on clojure.set</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-964</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;In test-clojure/rt.clj, the test last-var-wins-for-core evaluates #'clojure.set/subset?.  This fails unless clojure.set has been loaded.  In the normal run of the test suite, this dependency is satisfied by test-clojure/core-set being loaded first.&lt;/p&gt;</description>
                <environment/>
            <key id="15311">CLJ-964</key>
            <summary>test-clojure/rt.clj has undeclared dependency on clojure.set</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="dmiller">David Miller</reporter>
                        <labels>
                        <label>test</label>
                    </labels>
                <created>Sat, 31 Mar 2012 11:40:16 -0700</created>
                <updated>Sat, 31 Mar 2012 18:47:55 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28066" author="jafingerhut" created="Sat, 31 Mar 2012 18:47:35 -0700">&lt;p&gt;clj-964-add-require-of-clojure-set-patch1.txt dated March 31, 2012 applies cleanly as of latest master.  It simply adds a require of clojure.set to test_clojure/rt.clj.  I verified that if that test was the only one, it does fail without the require, and passes with it.  I also verified that every other test file succeeds on its own without any further changes.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11028" name="clj-964-add-require-of-clojure-set-patch1.txt" size="679" author="jafingerhut" created="Sat, 31 Mar 2012 18:47:35 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-873] Allow the function / to be referred to in namespaces other than clojure.core</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-873</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The attached patch gives the programmer the option of referring to the division function in namespaces other than just clojure.core.  For example,&lt;/p&gt;

&lt;p&gt;(ns foo&lt;br/&gt;
  (:require &lt;span class="error"&gt;&amp;#91;cljs.core :as core&amp;#93;&lt;/span&gt;))&lt;br/&gt;
(apply core// '(1 2 3))&lt;/p&gt;

&lt;p&gt;The above lines do not compile without this patch.&lt;/p&gt;</description>
                <environment/>
            <key id="15000">CLJ-873</key>
            <summary>Allow the function / to be referred to in namespaces other than clojure.core</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chrismgray">Chris Gray</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Nov 2011 07:48:56 -0800</created>
                <updated>Fri, 30 Mar 2012 11:11:39 -0700</updated>
                                    <version>Release 1.1</version>
                <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>2</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27274" author="chrismgray" created="Thu, 10 Nov 2011 07:50:19 -0800">&lt;p&gt;I have signed the CA and it is in the mail. &lt;/p&gt;</comment>
                    <comment id="27329" author="chrismgray" created="Sun, 20 Nov 2011 16:21:20 -0800">&lt;p&gt;My CA has now been applied.  This patch is quite simple &amp;#8211; can someone have a look at it please?&lt;/p&gt;</comment>
                    <comment id="27437" author="alexmiller" created="Fri, 9 Dec 2011 07:34:21 -0800">&lt;p&gt;FYI, I have run into this in actual code as well (implementing a query language function library).  &lt;/p&gt;</comment>
                    <comment id="27863" author="jafingerhut" created="Fri, 24 Feb 2012 18:00:48 -0800">&lt;p&gt;clj-873-namespace-divides-patch.txt is same as Chris's, just updated to apply cleanly to latest master as of Feb 24, 2012.&lt;/p&gt;

&lt;p&gt;The test he added does fail without the code fix, and passes with it.  He is now on the list of contributors.&lt;/p&gt;</comment>
                    <comment id="28059" author="chrismgray" created="Fri, 30 Mar 2012 11:11:39 -0700">&lt;p&gt;A short further discussion of this patch appeared here: &lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/f095980802a82747/b723726c77c1ec64"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/f095980802a82747/b723726c77c1ec64&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I assume this bug is what is referred to in Clojurescript's core.cljs, where it says ";; FIXME: waiting on cljs.core//"&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10964" name="clj-873-namespace-divides-patch.txt" size="2665" author="jafingerhut" created="Fri, 24 Feb 2012 18:00:48 -0800"/>
                    <attachment id="10692" name="namespace-divides.diff" size="2810" author="chrismgray" created="Thu, 10 Nov 2011 07:48:56 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-937] cl-format prints ratio arguments with bad format for E, F, G directives</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-937</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;user=&amp;gt; (use 'clojure.pprint)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (cl-format false "~e" 4/5)&lt;br/&gt;
"4./5E+2"&lt;br/&gt;
user=&amp;gt; (cl-format false "~f" 4/5)&lt;br/&gt;
"4/5.0"&lt;br/&gt;
user=&amp;gt; (cl-format false "~g" 4/5)&lt;br/&gt;
"4/5.    "&lt;/p&gt;

&lt;p&gt;Patch changes cl-format so that when E, F, or G directive is used, the corresponding arg is coerced from a clojure.lang.Ratio to a double before formatting.&lt;/p&gt;</description>
                <environment/>
            <key id="15241">CLJ-937</key>
            <summary>cl-format prints ratio arguments with bad format for E, F, G directives</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Feb 2012 18:38:14 -0800</created>
                <updated>Thu, 29 Mar 2012 18:48:58 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28054" author="tomfaulhaber" created="Thu, 29 Mar 2012 18:48:58 -0700">&lt;p&gt;I have reviewed this patch and recommend that it be applied.&lt;/p&gt;

&lt;p&gt;(This one has actually been on my to do list for about 4 years. Thanks, Andy!)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10938" name="cl-format-efg-coerce-ratios-to-doubes-patch1.txt" size="3810" author="jafingerhut" created="Tue, 21 Feb 2012 18:38:14 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-963] Support pretty printing namespace declarations under code-dispatch</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-963</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently when you print code with an (ns ) declaration in it, the ns declaration comes out kind of messy. This patch makes that beautiful. &lt;/p&gt;</description>
                <environment>all</environment>
            <key id="15307">CLJ-963</key>
            <summary>Support pretty printing namespace declarations under code-dispatch</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="tomfaulhaber">Tom Faulhaber</assignee>
                                <reporter username="tomfaulhaber">Tom Faulhaber</reporter>
                        <labels>
                        <label>patch,</label>
                    </labels>
                <created>Thu, 29 Mar 2012 18:38:10 -0700</created>
                <updated>Thu, 29 Mar 2012 18:38:10 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                    <attachment id="11026" name="pprint-ns-patch.diff" size="9569" author="tomfaulhaber" created="Thu, 29 Mar 2012 18:38:11 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-881] Problem with the "cl-format" function from the clojure.pprint</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-881</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Let's see the following scenario:&lt;/p&gt;

&lt;p&gt;vdim@home:~/clojure$ git log -1&lt;br/&gt;
commit ba930d95fc3a4a78c5bd6756ea483c9dac681618&lt;br/&gt;
Author: Rich Hickey &amp;lt;richhickey@gmail.com&amp;gt;&lt;br/&gt;
Date:   Sun Oct 30 10:44:55 2011 -0400&lt;/p&gt;

&lt;p&gt;    inline equiv in variadic =&lt;br/&gt;
vdim@home:~/clojure$ rlwrap java -cp clojure-1.4.0-master-SNAPSHOT.jar clojure.main&lt;br/&gt;
Clojure 1.4.0-master-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (use 'clojure.pprint)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (cl-format nil "~12,10F" 1.00000000074)&lt;br/&gt;
"1.0000000007"&lt;br/&gt;
user=&amp;gt; (cl-format nil "~12,10F" 1.00000000076)&lt;br/&gt;
NumberFormatException For input string: "10000000007"  java.lang.NumberFormatException.forInputString (NumberFormatException.java:65)&lt;br/&gt;
user=&amp;gt;&lt;/p&gt;


&lt;p&gt;The exception is caused from round-str function (cl-format.clj) where&lt;br/&gt;
my number (100000000076) is coerced to an Integer (see line with Integer/valueOf code&lt;br/&gt;
into this function).&lt;/p&gt;

&lt;p&gt;Is this normal behaviour?&lt;/p&gt;

&lt;p&gt;See patch with tests and my suggestion for solving this problem.&lt;/p&gt;</description>
                <environment>Linux 2.6.31-22-generic #61-Ubuntu SMP Wed Jul 28 01:57:06 UTC 2010 i686 GNU/Linux</environment>
            <key id="15020">CLJ-881</key>
            <summary>Problem with the "cl-format" function from the clojure.pprint</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="vdim">Vyacheslav Dimitrov</reporter>
                        <labels>
                    </labels>
                <created>Sun, 20 Nov 2011 00:47:16 -0800</created>
                <updated>Thu, 29 Mar 2012 18:15:36 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27313" author="vdim" created="Sun, 20 Nov 2011 00:49:03 -0800">&lt;p&gt;Also I can create pull request if any.&lt;/p&gt;</comment>
                    <comment id="27706" author="jafingerhut" created="Sun, 12 Feb 2012 00:29:18 -0800">&lt;p&gt;I've modified Vyacheslav's patch so that it is in the proper format.  I also changed his implementation of function inc-s so that it should allocate a bit less memory, and removed an addition of a redundant test case that is in his patch.  There is a bug he has found here, and I've verified that this patch fixes it.&lt;/p&gt;</comment>
                    <comment id="28014" author="jafingerhut" created="Mon, 26 Mar 2012 15:04:41 -0700">&lt;p&gt;clj-881-cl-format-exception-patch2.txt Mar 26, 2012 applies cleanly to latest master, and fixes the problem in the same way as my Feb 12, 2012 patch (since deleted to avoid confusion).  I am the author, and have signed a CA.&lt;/p&gt;</comment>
                    <comment id="28053" author="tomfaulhaber" created="Thu, 29 Mar 2012 18:15:36 -0700">&lt;p&gt;This patch looks good to me. I recommend we apply it.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11010" name="clj-881-cl-format-exception-patch2.txt" size="3112" author="jafingerhut" created="Mon, 26 Mar 2012 15:04:41 -0700"/>
                    <attachment id="10710" name="patchfile" size="2743" author="vdim" created="Sun, 20 Nov 2011 00:47:16 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-962] Vectors returned by subvec allow access at negative indices</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-962</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Google group thread: &lt;a href="https://mail.google.com/mail/?shva=1#label/clojure/1365e058eaf0d5fa"&gt;https://mail.google.com/mail/?shva=1#label/clojure/1365e058eaf0d5fa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vectors returned by subvec correctly disallow access to elements after their end, but not before their beginning.&lt;/p&gt;

&lt;p&gt;Clojure 1.3.0&lt;br/&gt;
user=&amp;gt; (def v1 (vec (range 100)))&lt;br/&gt;
#'user/v1&lt;br/&gt;
user=&amp;gt; (def v2 (subvec v1 50 52))&lt;br/&gt;
#'user/v2&lt;br/&gt;
user=&amp;gt; (v2 3)&lt;br/&gt;
IndexOutOfBoundsException   clojure.lang.APersistentVector$SubVector.nth (APersistentVector.java:526)&lt;br/&gt;
user=&amp;gt; (v2 -48)&lt;br/&gt;
2&lt;/p&gt;</description>
                <environment/>
            <key id="15304">CLJ-962</key>
            <summary>Vectors returned by subvec allow access at negative indices</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Mar 2012 07:55:00 -0700</created>
                <updated>Thu, 29 Mar 2012 08:13:23 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="28044" author="jafingerhut" created="Thu, 29 Mar 2012 08:12:53 -0700">&lt;p&gt;One-line simple fix.  clj-962-subvec-nth-throws-on-negative-index-patch1.txt dated March 29, 2012 applies, builds, and tests cleanly on latest master.  Includes a few new tests that exhibit the problem.  One author has signed CA.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11023" name="clj-962-subvec-nth-throws-on-negative-index-patch1.txt" size="1480" author="jafingerhut" created="Thu, 29 Mar 2012 08:12:53 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-960] Capture :column metadata (needed for ClojureScript source maps)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-960</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I've begun working on implementing SourceMaps for ClojureScript. For an overview of SourceMaps, see: &lt;a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&lt;/a&gt; For discussion of the feature in ClojureScript, see: &lt;a href="https://groups.google.com/d/topic/clojure-dev/zgmXO2iM1JQ/discussion"&gt;https://groups.google.com/d/topic/clojure-dev/zgmXO2iM1JQ/discussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to produce accurate source maps, I need column information in addition to line information from the Clojure reader.&lt;/p&gt;

&lt;p&gt;I've made the necessary enhancement to LispReader, etc. but have some cleanup and testing left to do. I'd also like a sanity check from the core team before attaching a formal patch. You can find my work in progress here: &lt;a href="https://github.com/brandonbloom/clojure/compare/columns"&gt;https://github.com/brandonbloom/clojure/compare/columns&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="15297">CLJ-960</key>
            <summary>Capture :column metadata (needed for ClojureScript source maps)</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bbloom">Brandon Bloom</reporter>
                        <labels>
                        <label>patch,</label>
                    </labels>
                <created>Mon, 26 Mar 2012 22:56:10 -0700</created>
                <updated>Mon, 26 Mar 2012 22:56:10 -0700</updated>
                                                                            <due/>
                    <votes>1</votes>
                        <watches>3</watches>
                                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-763] Do not use hash-map constructor in destructuring to avoid multiple key check.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-763</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;What I did:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defn number-to-string
  [&amp;amp; {fmt :format locale :locale :or {locale (Locale/getDefault)}}]
  (fn [v]
    (&lt;span class="code-object"&gt;String&lt;/span&gt;/format locale fmt (to-array [v]))))

(defn &lt;span class="code-object"&gt;double&lt;/span&gt;-to-string
  [&amp;amp; options]
  (apply number-to-string :format &lt;span class="code-quote"&gt;"%f"&lt;/span&gt; options))

(def us-number (&lt;span class="code-object"&gt;double&lt;/span&gt;-to-string :locale Locale/US))
(def legacy-number (&lt;span class="code-object"&gt;double&lt;/span&gt;-to-string :format &lt;span class="code-quote"&gt;"% 3.2f"&lt;/span&gt;))

(us-number 3.14159)
(legacy-number 3.14159)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I expected:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;&lt;span class="code-quote"&gt;"3.14159"&lt;/span&gt;
&lt;span class="code-quote"&gt;"  3,14"&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I got:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;java.lang.IllegalArgumentException: Duplicate key: :format&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;tt&gt;into&lt;/tt&gt; or a combination of &lt;tt&gt;reduce&lt;/tt&gt; and &lt;tt&gt;assoc&lt;/tt&gt; instead of &lt;tt&gt;hash-map&lt;/tt&gt; would allow this without breaking things.&lt;/p&gt;

&lt;p&gt;If this is a desired modification, I can provide a patch. (CA is filed.)&lt;/p&gt;</description>
                <environment>Clojure versions 1.2 and above</environment>
            <key id="14379">CLJ-763</key>
            <summary>Do not use hash-map constructor in destructuring to avoid multiple key check.</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mbrandmeyer">Meikel Brandmeyer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Mar 2011 02:23:43 -0700</created>
                <updated>Mon, 26 Mar 2012 16:43:18 -0700</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26326" author="mbrandmeyer" created="Mon, 21 Mar 2011 11:43:59 -0700">&lt;p&gt;Build map in destructuring step by step instead of calling hash-map.&lt;/p&gt;</comment>
                    <comment id="28018" author="jafingerhut" created="Mon, 26 Mar 2012 16:43:02 -0700">&lt;p&gt;clj-763-destructuring-allow-dup-keys-patch2.txt dated Mar 26, 2012 applies cleanly to latest master and passes all tests, including a new one added based upon Meikel's report that fails without his fix.  Supersedes his earlier patch 0001-Avoid-duplicate-key-check-in-destructuring.patch of Mar 21, 2011.  Meikel and I have both signed CAs.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10158" name="0001-Avoid-duplicate-key-check-in-destructuring.patch" size="1382" author="mbrandmeyer" created="Mon, 21 Mar 2011 11:43:59 -0700"/>
                    <attachment id="11014" name="clj-763-destructuring-allow-dup-keys-patch2.txt" size="2084" author="jafingerhut" created="Mon, 26 Mar 2012 16:43:02 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-948] It would be very useful to be able to annotate the constructors of classes created with gen-class</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-948</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;gen-class currently provides a way to annotate methods, but not constructors.&lt;/p&gt;

&lt;p&gt;when interoperating with java code that uses google juice heavily the ability to annotate constructors is required.&lt;/p&gt;</description>
                <environment/>
            <key id="15266">CLJ-948</key>
            <summary>It would be very useful to be able to annotate the constructors of classes created with gen-class</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="chouser@n01se.net">Chouser</assignee>
                                <reporter username="hiredman">Kevin Downey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Mar 2012 05:59:13 -0800</created>
                <updated>Mon, 26 Mar 2012 15:52:20 -0700</updated>
                                                                            <due/>
                    <votes>1</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27921" author="jafingerhut" created="Fri, 9 Mar 2012 07:15:37 -0800">&lt;p&gt;clj-948-annotate-gen-class-constructors-patch2.txt same as Kevin's &lt;a href="http://dev.clojure.org/jira/browse/CLJ-948" title="It would be very useful to be able to annotate the constructors of classes created with gen-class"&gt;CLJ-948&lt;/a&gt;.patch, but with slight update so it applies cleanly to latest master as of March 9, 2012.  ant builds and tests with no errors or warnings.  One author Kevin Downey has signed CA.&lt;/p&gt;</comment>
                    <comment id="27924" author="hiredman" created="Fri, 9 Mar 2012 07:27:22 -0800">&lt;p&gt;&lt;a href="http://www.s2ki.com/s2000/uploads/gallery/1288955707/gallery_99130_32179_14062581294cd627112ab1f.gif"&gt;http://www.s2ki.com/s2000/uploads/gallery/1288955707/gallery_99130_32179_14062581294cd627112ab1f.gif&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="28017" author="jafingerhut" created="Mon, 26 Mar 2012 15:52:03 -0700">&lt;p&gt;clj-948-annotate-gen-class-constructors-patch3.txt on Mar 26, 2012 is no different from previous patches, except that it applies cleanly to latest master as of that date.  One author Kevin Downey has signed a CA.  Kevin, you don't need to thank me again.  The last time gave me eye damage (only joking).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11013" name="clj-948-annotate-gen-class-constructors-patch3.txt" size="3673" author="jafingerhut" created="Mon, 26 Mar 2012 15:52:03 -0700"/>
                    <attachment id="10980" name="CLJ-948.patch" size="3656" author="hiredman" created="Tue, 6 Mar 2012 06:03:35 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-892] sort changes its argument, if a Java array</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-892</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;user&amp;gt; (let [a (to-array &lt;span class="error"&gt;&amp;#91;32 11&amp;#93;&lt;/span&gt;)] &lt;br/&gt;
        (prn (seq a))&lt;br/&gt;
        (sort a)&lt;br/&gt;
        (prn (seq a)))&lt;br/&gt;
(32 11)&lt;br/&gt;
(11 32)&lt;br/&gt;
nil&lt;/p&gt;

&lt;p&gt;Where the second line printed ought to be the same as the first.&lt;/p&gt;</description>
                <environment>java version &amp;quot;1.6.0_22&amp;quot;
&lt;br/&gt;
OpenJDK Runtime Environment (IcedTea6 1.10.4) (6b22-1.10.4-0ubuntu1~11.04.1)
&lt;br/&gt;
(clojure-version)
&lt;br/&gt;
&amp;quot;1.4.0-alpha2&amp;quot;</environment>
            <key id="15058">CLJ-892</key>
            <summary>sort changes its argument, if a Java array</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="s11001001">Stephen Compall</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Dec 2011 17:14:37 -0800</created>
                <updated>Mon, 26 Mar 2012 15:32:53 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27438" author="stu" created="Fri, 9 Dec 2011 07:37:53 -0800">&lt;p&gt;This is an enhancement request, since the docs for sort make no promise one way or the other. &lt;/p&gt;

&lt;p&gt;For performance, I prefer the current behavior, so another possibility is a clarifying doc string.&lt;/p&gt;</comment>
                    <comment id="28016" author="jafingerhut" created="Mon, 26 Mar 2012 15:32:41 -0700">&lt;p&gt;clj-892-clarify-sort-sort-by-doc-strings-patch1.txt of Mar 26, 2012 applies cleanly to latest master on that date.  Only doc string changes, to make it clear that by sort and sort-by will modify Java arrays given as arguments.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11012" name="clj-892-clarify-sort-sort-by-doc-strings-patch1.txt" size="1409" author="jafingerhut" created="Mon, 26 Mar 2012 15:32:41 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-923] Reading ratios prefixed by + is not working</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-923</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;In general Clojure's number types can be read prefixed with either a +&lt;br/&gt;
or - and this seems to work correctly for reading integers and floats.&lt;br/&gt;
In the case of ratios however things break down when ratios are&lt;br/&gt;
prefixed with a +.&lt;/p&gt;

&lt;p&gt;The ratio pattern in LispReader.java does match on ratios starting&lt;br/&gt;
with both + and - but matchNumber fails on ratios prefixed with +&lt;br/&gt;
because it ends up calling "new BigInteger(m.group(1))" and it turns&lt;br/&gt;
out the constructor for BigInteger has no problems with negative&lt;br/&gt;
numbers but it doesn't like numbers prefixed by a +.&lt;/p&gt;</description>
                <environment/>
            <key id="15159">CLJ-923</key>
            <summary>Reading ratios prefixed by + is not working</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="cosmin">Cosmin Stejerean</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Feb 2012 16:06:54 -0800</created>
                <updated>Fri, 23 Mar 2012 18:07:23 -0700</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27645" author="cosmin" created="Fri, 3 Feb 2012 16:26:09 -0800">&lt;p&gt;added patch with fix and tests&lt;/p&gt;</comment>
                    <comment id="27854" author="hiredman" created="Fri, 24 Feb 2012 14:02:26 -0800">&lt;p&gt;changes to the reader tests on master cause 0001-added-tests-for-reading-ratios-and-fixed-reading-of-.patch to no longer apply cleanly&lt;/p&gt;</comment>
                    <comment id="27856" author="jafingerhut" created="Fri, 24 Feb 2012 14:21:55 -0800">&lt;p&gt;clj-923-reading-ratios-prefixed-by-plus-patch.txt applies cleanly to latest as of Feb 24, 2012 (2:20 PM PST &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</comment>
                    <comment id="28000" author="jafingerhut" created="Fri, 23 Mar 2012 17:55:54 -0700">&lt;p&gt;clj-923-reading-ratios-prefixed-by-plus-patch2.txt still semantically same as Cosmin's original patch, except it applies, builds, and tests cleanly on latest master as of Mar 23, 2012.  Context lines around patch must have changed recently.&lt;/p&gt;</comment>
                    <comment id="28002" author="cosmin" created="Fri, 23 Mar 2012 18:07:23 -0700">&lt;p&gt;Thanks for updating the patch. I've removed the original to make it clear which one we need.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11005" name="clj-923-reading-ratios-prefixed-by-plus-patch2.txt" size="1897" author="jafingerhut" created="Fri, 23 Mar 2012 17:55:54 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-916] into loses metadata</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-916</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The into fn loses metadata.&lt;/p&gt;

&lt;p&gt;I'm seeing some team members (myself included) rely on metadata. Metadata has been incredibly useful in some cases, however the silent destruction of metadata by core clojure fns (into, walk, etc) have been a source of increasing complexity and confusion. &lt;/p&gt;

&lt;p&gt;A team member could start relying on a 3rd party library that used 'into'. Actually, the into fn could essentially be added to the code base at any time in many ways. Wrt metadata the potential for incidental complexity increases exponentially as more developers and libraries enter the mix. &lt;/p&gt;

&lt;p&gt;One of the reasons Clojure has worked for us so well is because it has greatly reduced incidental complexity.&lt;br/&gt;
IMHO the 'into metadata bug' seriously limits the usefulness of metadata and would love to see the into fn fixed in 1.4.&lt;/p&gt;



</description>
                <environment/>
            <key id="15134">CLJ-916</key>
            <summary>into loses metadata</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="markswanson">Mark Swanson</reporter>
                        <labels>
                        <label>into</label>
                        <label>metadata</label>
                        <label>walk</label>
                    </labels>
                <created>Sat, 21 Jan 2012 09:58:29 -0800</created>
                <updated>Fri, 23 Mar 2012 18:03:55 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>3</votes>
                        <watches>4</watches>
                        <comments>
                    <comment id="27899" author="jafingerhut" created="Thu, 1 Mar 2012 02:42:26 -0800">&lt;p&gt;Someone please correct this if it is wrong, but it seems that into loses metadata because it is implemented using transients, and transients lose metadata.  If true, then one way to fix this ticket is to implement metadata for transients.&lt;/p&gt;

&lt;p&gt;Are there any fundamental reasons why it would be difficult to add metadata to transients, as long as the metadata itself was immutable?&lt;/p&gt;</comment>
                    <comment id="27958" author="jafingerhut" created="Fri, 16 Mar 2012 02:57:42 -0700">&lt;p&gt;First rough cut of a patch that makes not only into, but also select-keys, clojure.set/project, and clojure.set/rename preserve metadata.  Added tests for these and many other functions.  Still some open questions about other functions not tested in comments.  This patch does not attempt to make transients preserve metadata.&lt;/p&gt;</comment>
                    <comment id="28001" author="jafingerhut" created="Fri, 23 Mar 2012 18:03:25 -0700">&lt;p&gt;clj-916-make-into-and-others-preserve-metadata-patch2.txt is semantically same patch and comments as March 16, 2012.  Merely touched up to apply cleanly to latest master as of Mar 23, 2012.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11006" name="clj-916-make-into-and-others-preserve-metadata-patch2.txt" size="7444" author="jafingerhut" created="Fri, 23 Mar 2012 18:03:25 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-850] Hinting the arg vector of a primitive-taking fn with a non-primitive type results in AbstractMethodError when invoked</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-850</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;See the following examples:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;user=&amp;gt; (defn f1 ^String [^String s] s)
#'user/f1
user=&amp;gt; (f1 "foo")
"foo"
user=&amp;gt; (defn f2 ^long [^String s ^long i] i)
#'user/f2
user=&amp;gt; (f2 "foo" 1)
1
user=&amp;gt; (defn f3 ^String [^String s ^long i] s)                                       
#'user/f3
user=&amp;gt; (f3 "foo" 1)
AbstractMethodError user$f3.invokePrim(Ljava/lang/Object;J)Ljava/lang/Object;  user/eval8 (NO_SOURCE_FILE:6)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="14677">CLJ-850</key>
            <summary>Hinting the arg vector of a primitive-taking fn with a non-primitive type results in AbstractMethodError when invoked</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ataggart">Alexander Taggart</reporter>
                        <labels>
                    </labels>
                <created>Sun, 9 Oct 2011 13:10:53 -0700</created>
                <updated>Fri, 23 Mar 2012 17:50:46 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26989" author="bsmith.occs@gmail.com" created="Sat, 15 Oct 2011 09:54:52 -0700">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-850" title="Hinting the arg vector of a primitive-taking fn with a non-primitive type results in AbstractMethodError when invoked"&gt;CLJ-850&lt;/a&gt;-test.patch added.&lt;/p&gt;</comment>
                    <comment id="27001" author="bsmith.occs@gmail.com" created="Sun, 16 Oct 2011 05:32:43 -0700">&lt;p&gt;&lt;del&gt;When the compiler tries to generates the call to the correct overload of invokePrim, it's failing to take the return type into account. I should be calling &lt;tt&gt;invokePrim(Ljava/lang/Object;J)J;&lt;/tt&gt;.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;XXX this is where I got myself confused. The &lt;tt&gt;invokePrim&lt;/tt&gt; overload it's trying to invoke is the &lt;b&gt;correct&lt;/b&gt; one. But, that apparently is no the one that's being generated. Sorry for the noise.&lt;/p&gt;</comment>
                    <comment id="27002" author="bsmith.occs@gmail.com" created="Sun, 16 Oct 2011 08:17:49 -0700">&lt;p&gt;&lt;del&gt;Here's what I think I'm seeing:&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;tt&gt;HostExpr.Parse.parse()&lt;/tt&gt; loses track of the return type, in the final else branch where method calls are handled.  This is because &lt;tt&gt;tagOf(form)&lt;/tt&gt;, where form is something like: &lt;tt&gt;(. foo invokePrim 1)&lt;/tt&gt; returns nil. (The form itself doesn't have a &lt;tt&gt;:tag&lt;/tt&gt;, but I believe &lt;tt&gt;foo&lt;/tt&gt; does, though that's the name of the appropriate &lt;tt&gt;invokePrim&lt;/tt&gt; interface (i.e. &lt;tt&gt;IFn$OLL&lt;/tt&gt;).&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;tt&gt;new InstanceMethodExpr(...)&lt;/tt&gt; then gets constructed with &lt;tt&gt;tag==null&lt;/tt&gt;, at which point we've already lost sine InstanceMethodExpr can't correctly consider overloading on the result type if it doesn't know what it is.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;It's not yet clear to me how I can get InstanceMethodExpr to consider the return type, if it knew it...&lt;/del&gt;&lt;/p&gt;





</comment>
                    <comment id="27015" author="bsmith.occs@gmail.com" created="Mon, 17 Oct 2011 22:29:22 -0700">
&lt;p&gt;There are two things going on here. I'm not sure which is the error.&lt;/p&gt;

&lt;p&gt;It looks like the return type of the generated invokePrim method is too specific. It's generated as returning String, though the IFn$LO interface specifies returning Object.&lt;/p&gt;

&lt;p&gt;The caller attempts to call invokePrim returning Object, which is what the interface IFn$LO specifies, but this doesn't work because methodSL doesn't actually implement that method. Instead it implements an overload returning String.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;methodSL.invokePrim is declared as &lt;tt&gt;(long)-&amp;gt;String&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;methodSL.invoke does invokeinterface with the correct return type WRT methodSL, but the wrong return type WRT the IFn$LO interface.&lt;/li&gt;
	&lt;li&gt;callSL.invoke does invokeinterface with the wrong return type WRT methodSL, but the correct return type WRT IFn$LO. (This is the failure we observe in the clj-850 unit test.)&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn methodSL  ^String [^long i] (str i))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;&amp;lt;&amp;lt;1&amp;gt;&amp;gt; public final java.lang.String invokePrim(long);  &amp;lt;&amp;lt;1&amp;gt;&amp;gt;
      Code:
       0:   getstatic   #25; 
            //Field const__0:Lclojure/lang/Var;
       3:   invokevirtual   #34; 
            //Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
       6:   checkcast   #36; 
            //class clojure/lang/IFn
       9:   lload_1
       10:  invokestatic    #42; 
            //Method clojure/lang/Numbers.num:(J)Ljava/lang/Number;
       13:  invokeinterface #46,  2; 
            //InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
       18:  checkcast   #48; 
            //class java/lang/String
       21:  areturn
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;      public java.lang.Object invoke(java.lang.Object);
      Code:
       0:   aload_0
       1:   aload_1
       2:   checkcast   #54; 
            //class java/lang/Number
       5:   invokestatic    #58; 
            //Method clojure/lang/RT.longCast:(Ljava/lang/Object;)J
&amp;lt;&amp;lt;2&amp;gt;&amp;gt;  8:   invokeinterface #60,  3; 
            //InterfaceMethod clojure/lang/IFn$LO.invokePrim:(J)Ljava/lang/String;
       13:  areturn
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn callSL ^String [] (methodSL 42))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;    public java.lang.Object invoke();
      Code:
       0:   getstatic   #25; 
            //Field const__0:Lclojure/lang/Var;
       3:   invokevirtual   #43; 
            //Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
       6:   checkcast   #45; 
            //class clojure/lang/IFn$LO
       9:   ldc2_w  #26; 
            //long 42l
&amp;lt;&amp;lt;3&amp;gt;&amp;gt;  12:  invokeinterface #49,  3; 
            //InterfaceMethod clojure/lang/IFn$LO.invokePrim:(J)Ljava/lang/Object;
       17:  areturn
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="27016" author="bsmith.occs@gmail.com" created="Mon, 17 Oct 2011 23:40:59 -0700">&lt;p&gt;Given &lt;tt&gt;P&lt;/tt&gt; is some primitive type, &lt;tt&gt;O&lt;/tt&gt; is type Object, and &lt;tt&gt;R&lt;/tt&gt; some subclass of Object: &lt;/p&gt;

&lt;p&gt;When Clojure generates a &lt;tt&gt;R invokePrim(P x)&lt;/tt&gt;, it also generates a &lt;tt&gt;Object invoke(Object x)&lt;/tt&gt;, which delegates to &lt;tt&gt;R invokePrim(P x)&lt;/tt&gt;. &lt;/p&gt;

&lt;p&gt;&lt;tt&gt;R invokePrim(P x)&lt;/tt&gt; &lt;em&gt;overloads&lt;/em&gt;, but does not &lt;em&gt;override&lt;/em&gt; the method of the corresponding &lt;tt&gt;Fn$PO&lt;/tt&gt; interface. &lt;/p&gt;

&lt;p&gt;If Clojure were to generate an additional &lt;tt&gt;O invokePrim(P x)&lt;/tt&gt; which delegates to &lt;tt&gt;R invokePrim(P x)&lt;/tt&gt;, it would satisfy the requirements of the &lt;tt&gt;Fn$PO&lt;/tt&gt; interface, and should fix this issue.&lt;/p&gt;</comment>
                    <comment id="27018" author="bsmith.occs@gmail.com" created="Tue, 18 Oct 2011 12:54:41 -0700">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-850" title="Hinting the arg vector of a primitive-taking fn with a non-primitive type results in AbstractMethodError when invoked"&gt;CLJ-850&lt;/a&gt;.patch fixes the issue.&lt;/p&gt;

&lt;p&gt;I consider this patch to be pretty hackish and hope that there's a cleaner way of addressing &lt;a href="http://dev.clojure.org/jira/browse/CLJ-850" title="Hinting the arg vector of a primitive-taking fn with a non-primitive type results in AbstractMethodError when invoked"&gt;CLJ-850&lt;/a&gt;. This is the first time I've tried to understand (much less change) the Clojure compiler, so don't expect genius.&lt;/p&gt;</comment>
                    <comment id="27020" author="bsmith.occs@gmail.com" created="Wed, 19 Oct 2011 03:06:03 -0700">&lt;p&gt;The patch lies slightly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clojure needs to generate an additional &lt;tt&gt;O invokePrim(P x)&lt;/tt&gt; method to&lt;br/&gt;
satisfy the interface. This also delegates to &lt;tt&gt;R invokePrim(P x)&lt;/tt&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It turns out that what I'm actually doing is generating a &lt;tt&gt;R invokePrim(P x)&lt;/tt&gt; which is a copy of &lt;tt&gt;O invokePrim(P x)&lt;/tt&gt;, instead of delgating to &lt;tt&gt;O invokePrim(P x)&lt;/tt&gt;. This works, but the resulting class file would be smaller if the patch actually did what it says it does.&lt;/p&gt;</comment>
                    <comment id="27882" author="jafingerhut" created="Mon, 27 Feb 2012 22:49:32 -0800">&lt;p&gt;clj-850-type-hinted-fn-abstractmethoderror-patch2.txt is identical to Ben's two patches combined into one, with the small modification that the new tests are added to metadata.clj instead of creating a new test file.  The patch applies cleanly to latest master as of Feb 27, 2012.  One of the new tests does fail without the change to the compiler, and succeeds with it.  I can't vouch for the correctness of the change myself, not knowing enough about the compiler internals to judge.&lt;/p&gt;</comment>
                    <comment id="27999" author="jafingerhut" created="Fri, 23 Mar 2012 17:50:25 -0700">&lt;p&gt;Same comments as made on Feb 27, 2012, except the patch clj-850-type-hinted-fn-abstractmethoderror-patch3.txt applies cleanly to latest master as of Mar 23, 2012.  Updated because previous patch (now removed) no longer applied cleanly.  git patches often fail to apply if context lines near changes are modified.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10411" name="CLJ-850.patch" size="2531" author="bsmith.occs@gmail.com" created="Tue, 18 Oct 2011 12:54:41 -0700"/>
                    <attachment id="10400" name="CLJ-850-test.patch" size="2482" author="bsmith.occs@gmail.com" created="Sat, 15 Oct 2011 09:54:52 -0700"/>
                    <attachment id="11004" name="clj-850-type-hinted-fn-abstractmethoderror-patch3.txt" size="3761" author="jafingerhut" created="Fri, 23 Mar 2012 17:50:25 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-757] Empty transient maps/sets return wrong value for .contains</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-757</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;As explained in &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/496ffc7fb9058699/6e9d8152b6fd6365?show_docid=6e9d8152b6fd6365"&gt;http://groups.google.com/group/clojure/browse_thread/thread/496ffc7fb9058699/6e9d8152b6fd6365?show_docid=6e9d8152b6fd6365&lt;/a&gt;, (.contains (transient #{}) :some-key) returns true instead of false. (contains? #{} :some-key) works properly, but the plain .contains method does not.&lt;/p&gt;

&lt;p&gt;The issue is in TransientHashMap.doValAt(key, notFound), and the attached patch is a simple fix with test.&lt;/p&gt;</description>
                <environment/>
            <key id="14373">CLJ-757</key>
            <summary>Empty transient maps/sets return wrong value for .contains</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="amalloy">Alan Malloy</reporter>
                        <labels>
                    </labels>
                <created>Mon, 14 Mar 2011 13:53:28 -0700</created>
                <updated>Fri, 23 Mar 2012 16:30:59 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26349" author="stu" created="Tue, 5 Apr 2011 18:59:02 -0700">&lt;p&gt;IIRC there are broader issues around lookup from transients. Should we look at this patch alone, or step back and review?&lt;/p&gt;</comment>
                    <comment id="26669" author="richhickey" created="Fri, 29 Jul 2011 05:44:13 -0700">&lt;p&gt;take the patch if it fixes the problem&lt;/p&gt;</comment>
                    <comment id="27809" author="jafingerhut" created="Thu, 23 Feb 2012 00:55:39 -0800">&lt;p&gt;clj-757-fix-behavior-of-empty-transient-maps-patch2.txt is an update of Alan's original patch, with no changes other than those required to apply cleanly to latest master as of Feb 22, 2012.  Compiles fine and runs without test errors, and does fix the behavior of the one new unit test included.&lt;/p&gt;</comment>
                    <comment id="27997" author="jafingerhut" created="Fri, 23 Mar 2012 16:30:59 -0700">&lt;p&gt;Approval was changed from Test to Incomplete when it was waiting on Rich's feedback.  He did give his feedback, but Approval never changed back to Test.  Doing that now in hopes it makes the ticket more accurately categorized by filters.  Feel free to give me a stern warning for mucking with the Approval field if I'm out of line here.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10147" name="0001-Fix-behavior-of-empty-transient-maps.patch" size="1309" author="amalloy" created="Mon, 14 Mar 2011 13:53:29 -0700"/>
                    <attachment id="10943" name="clj-757-fix-behavior-of-empty-transient-maps-patch2.txt" size="1483" author="jafingerhut" created="Thu, 23 Feb 2012 00:55:39 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10013">Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-958] Make APersistentVector.iterator slightly more efficient</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-958</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The attached patch uses a sequence to create an iterator for persistent vectors.  It should be slightly more efficient for PersistentVector objects than repeatedly calling nth (for reasons that I outline in the commit message).  &lt;/p&gt;</description>
                <environment/>
            <key id="15290">CLJ-958</key>
            <summary>Make APersistentVector.iterator slightly more efficient</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chrismgray">Chris Gray</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Mar 2012 11:28:07 -0700</created>
                <updated>Fri, 23 Mar 2012 11:28:07 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="11003" name="0001-Make-APersistentVector.iterator-slightly-more-effici.patch" size="1394" author="chrismgray" created="Fri, 23 Mar 2012 11:28:07 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-842] clojure.pprint uses the old-style metadata.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-842</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I was looking through the implementation of clojure.pprint.* and found that it still uses the old-style metadata to mark vars as private - ^{:private true} instead of ^:private.&lt;/p&gt;

&lt;p&gt;I have migrated the metadata to the new style in the attached trivial patch, which can be used in case this is deemed to be an issue.&lt;/p&gt;

&lt;p&gt;FWIW, there are some other namespaces which use the old-style metadata as well; I am willing to fix those as well.&lt;/p&gt;</description>
                <environment/>
            <key id="14646">CLJ-842</key>
            <summary>clojure.pprint uses the old-style metadata.</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ghoseb">Baishampayan Ghose</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Sep 2011 00:35:36 -0700</created>
                <updated>Fri, 23 Mar 2012 00:44:32 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="10372" name="0001-Migrate-the-metadata-in-clojure.pprint.-to-the-new-s.patch" size="16175" author="ghoseb" created="Mon, 26 Sep 2011 00:35:36 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-867] Records of different types with the same data have the same hashcodes, even though they are not considered to be equal</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-867</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Records which contain the same field values are not considered to be equal, but the record type is not currently included in the hash.  This means that if an heterogenous map contains records of different types, where the fields aren't necessarily distinct, there is a high likelyhood of hash collisions.&lt;/p&gt;

&lt;p&gt;I propose that the record type should be included in the hash code algorithm for records.  There should be no expectation that unequal records of different types should have the same hash-code.&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (hash (-&amp;gt;A 1))&lt;br/&gt;
1013911913&lt;br/&gt;
user=&amp;gt; (hash (-&amp;gt;B 1))&lt;br/&gt;
1013911913&lt;br/&gt;
user=&amp;gt; (= (&lt;del&gt;&amp;gt;A 1) (&lt;/del&gt;&amp;gt;B 1))&lt;br/&gt;
false&lt;/p&gt;


&lt;p&gt;This issue also affects ClojureScript.  But see &lt;a href="#CLJS-97"&gt;CLJS-97&lt;/a&gt;, as ClojureScript also has an issue with record equality.&lt;/p&gt;</description>
                <environment/>
            <key id="14910">CLJ-867</key>
            <summary>Records of different types with the same data have the same hashcodes, even though they are not considered to be equal</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="djpowell">David Powell</reporter>
                        <labels>
                    </labels>
                <created>Sun, 30 Oct 2011 04:39:17 -0700</created>
                <updated>Fri, 23 Mar 2012 00:41:35 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27186" author="djpowell" created="Sun, 30 Oct 2011 05:27:32 -0700">&lt;p&gt;Potential patch to xor the hash of the record symbol name with the current hash obtained from the data&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10593" name="0001-CLJ-867-Incorporate-the-record-name-into-the-hash-co.patch" size="1478" author="djpowell" created="Sun, 30 Oct 2011 05:27:32 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-897] deftype error message is misleading not useful</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-897</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If you forget to include the argument vector for deftype, i.e.&lt;/p&gt;

&lt;p&gt;(deftype second-request-handler&lt;br/&gt;
  HttpServer.RequestHandler&lt;br/&gt;
  (canRespond &lt;span class="error"&gt;&amp;#91;this request&amp;#93;&lt;/span&gt; true)&lt;br/&gt;
  (getResponse &lt;span class="error"&gt;&amp;#91;this request&amp;#93;&lt;/span&gt; nil))&lt;/p&gt;

&lt;p&gt;which should be...&lt;/p&gt;

&lt;p&gt;(deftype second-request-handler []&lt;br/&gt;
  HttpServer.RequestHandler&lt;br/&gt;
  (canRespond &lt;span class="error"&gt;&amp;#91;this request&amp;#93;&lt;/span&gt; true)&lt;br/&gt;
  (getResponse &lt;span class="error"&gt;&amp;#91;this request&amp;#93;&lt;/span&gt; nil))&lt;/p&gt;

&lt;p&gt;I get the error message..&lt;/p&gt;

&lt;p&gt;Don't know how to create ISeq from: clojure.lang.Symbol (main.clj:1)&lt;/p&gt;

&lt;p&gt;When in fact the error is coming from (second-request-handler.clj:3). Can this error message be improved and give the actually location of the error?&lt;/p&gt;</description>
                <environment>OS X</environment>
            <key id="15071">CLJ-897</key>
            <summary>deftype error message is misleading not useful</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mylesmegyesi">Myles Megyesi</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Dec 2011 06:46:44 -0800</created>
                <updated>Fri, 23 Mar 2012 00:40:46 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27490" author="tsdh" created="Fri, 23 Dec 2011 02:28:59 -0800">&lt;p&gt;The problem is that deftype and defrecord use destructuring in the argument vector, so the error pops up before the macro is actually running.&lt;/p&gt;

&lt;p&gt;The attached patch removes the destructuring form (but keeps the nice syntax in :arglists) and adds a vector? check to validate-fields.&lt;/p&gt;

&lt;p&gt;All tests pass, and the example above now errors with "AssertionError No fields vector given."&lt;/p&gt;</comment>
                    <comment id="27987" author="jafingerhut" created="Fri, 23 Mar 2012 00:40:46 -0700">&lt;p&gt;Changing Patch attribute to "Code".&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10753" name="0001-Fix-CLJ-897-Don-t-use-descructuring-in-defrecord-def.patch" size="1908" author="tsdh" created="Fri, 23 Dec 2011 02:28:59 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-925] rand-nth throws on empty list</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-925</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;rand-nth throws when given an empty list.&lt;/p&gt;

&lt;p&gt;Solution is to either call seq on parameter, or to supply nil as a not-found parameter in call to nth. Patch fir latter fix included.&lt;/p&gt;</description>
                <environment/>
            <key id="15201">CLJ-925</key>
            <summary>rand-nth throws on empty list</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="wagjo">Jozef Wagner</reporter>
                        <labels>
                    </labels>
                <created>Sun, 5 Feb 2012 05:06:03 -0800</created>
                <updated>Fri, 23 Mar 2012 00:38:58 -0700</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27986" author="jafingerhut" created="Fri, 23 Mar 2012 00:38:58 -0700">&lt;p&gt;Changing Patch attribute to value "Code", since I've been told that is what it ought to be for a ticket with a patch ready for screening.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10891" name="patch.diff" size="685" author="wagjo" created="Sun, 5 Feb 2012 05:06:03 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-884] Reflector error messages can be improved when no matching method is found.</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-884</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When accessing a java method with an arity mismatch or a mismatched parameter type, Reflector.java returns the following error on REPL:&lt;br/&gt;
IllegalArgumentException No matching method found: xyz for class com.abc.MyClass&lt;/p&gt;

&lt;p&gt;eventhough method xyz might exist on MyClass, but was being called with the wrong number of arguments.&lt;/p&gt;

&lt;p&gt;Attached is a patch that fixes that problem.&lt;/p&gt;
</description>
                <environment>All</environment>
            <key id="15031">CLJ-884</key>
            <summary>Reflector error messages can be improved when no matching method is found.</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rahulpilani">Rahul Pilani</reporter>
                        <labels>
                    </labels>
                <created>Sun, 27 Nov 2011 13:56:51 -0800</created>
                <updated>Thu, 22 Mar 2012 23:14:18 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27984" author="jafingerhut" created="Thu, 22 Mar 2012 18:47:21 -0700">&lt;p&gt;diff.patch of Nov 27, 2011 does not apply cleanly to latest master version of Clojure code (using "patch -p1 &amp;lt; diff.patch", at least).  It is preferred by Clojure team that patches are in git format-patch format.  Instructions for producing such a patch are given at &lt;a href="http://clojure.org/patches"&gt;http://clojure.org/patches&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rahul, are you planning to sign a Clojure Contributor Agreement?  Without that, this code cannot be included in Clojure, unless a contributor reimplements it on their own.&lt;/p&gt;</comment>
                    <comment id="27985" author="jafingerhut" created="Thu, 22 Mar 2012 23:14:18 -0700">&lt;p&gt;In private communication with the patch author today, he expressed an interest in submitting a signed CA so this patch can be considered for inclusion in Clojure.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10718" name="diff.patch" size="4785" author="rahulpilani" created="Sun, 27 Nov 2011 13:56:51 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-957] Typehints for variadic methods in deftype fail to compile</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-957</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When a method defined by a protocol has multiple typehinted signatures, it is impossible to implement them using deftype because deftype throws away the typehints.  The compiler then looks for the proper signatures (i.e. with typehints) and throws an exception when it can't find them.&lt;/p&gt;</description>
                <environment/>
            <key id="15289">CLJ-957</key>
            <summary>Typehints for variadic methods in deftype fail to compile</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chrismgray">Chris Gray</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Mar 2012 15:24:31 -0700</created>
                <updated>Thu, 22 Mar 2012 15:41:46 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27982" author="chrismgray" created="Thu, 22 Mar 2012 15:41:46 -0700">&lt;p&gt;Clojure-dev discussion started here: &lt;a href="http://groups.google.com/group/clojure-dev/browse_thread/thread/1f106a21ec1ce3de"&gt;http://groups.google.com/group/clojure-dev/browse_thread/thread/1f106a21ec1ce3de&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11002" name="0001-Allow-for-typehinting-of-method-signatures-in-deftyp.patch" size="3242" author="chrismgray" created="Thu, 22 Mar 2012 15:24:31 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-207] for macro does not allow :let clause in first position</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-207</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I like to try and keep my level of nesting under control, and this&lt;br/&gt;
often involves hiding or re-structuring the let macro. The for macro&lt;br/&gt;
can implicitly assemble a let macro for you, but with a limitation&lt;br/&gt;
that the :let clause can't be first:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;1:5 user=&amp;gt; (for [:let [z [:foo :bar]] x z] (name x))
java.lang.IllegalStateException: Can't pop empty vector (repl-1:5)
1:6 user=&amp;gt; (for [x [:foo :bar] :let [z (name x)]] z)
("foo" "bar")
1:7 user=&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is this limitation intentional?  Could the error message be improved?&lt;/p&gt;

&lt;p&gt;Here's what I wanted to write:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn add-script-links-for-imported-javascript-libraries
       [env dom-nodes]
       (extend-dom dom-nodes [:html :head] :top
               (template-for [:let [aggregation (-&amp;gt; env :cascade :resource-aggregation)
                                         libraries (@aggregation :libraries)]
                                   asset-map libraries
                                   :let [path (to-asset-path env asset-map)]]
                       :script { :type "text/javascript" :src path } [ linebreak ])))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(the formatting is probably scrambled)&lt;/p&gt;

&lt;p&gt;But I had to juggle it to this:&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn add-script-links-for-imported-javascript-libraries
       [env dom-nodes]
       (let [aggregation (-&amp;gt; env :cascade :resource-aggregation)
              libraries (@aggregation :libraries)]
               (extend-dom dom-nodes [:html :head] :top
                       (template-for [asset-map libraries
                                           :let [path (to-asset-path env asset-map)]]
                               :script { :type "text/javascript" :src path } [ linebreak ]))))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course there are any number of ways to write this, but I prefer the&lt;br/&gt;
first option, as it does less of a job of obscuring what the main&lt;br/&gt;
point of the function is: a call to extend-dom.&lt;/p&gt;</description>
                <environment/>
            <key id="13604">CLJ-207</key>
            <summary>for macro does not allow :let clause in first position</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Sun, 25 Oct 2009 07:22:00 -0700</created>
                <updated>Thu, 22 Mar 2012 10:53:14 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="23248" author="importer" created="Tue, 24 Aug 2010 04:56:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/207"&gt;http://www.assembla.com/spaces/clojure/tickets/207&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27981" author="tsdh" created="Thu, 22 Mar 2012 09:21:41 -0700">&lt;p&gt;The attached patch implements that feature and also adds tests for it.  The new tests and all other tests still pass.&lt;/p&gt;

&lt;p&gt;The patch exploits the fact that&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(for [:let [a 1, b [1 2]], c [1 2 3]] ...)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is equivalent to&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(for [a [1], b [[1 2]], c [1 2 3]] ...)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and thus transforms the former binding vector to the latter.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="11001" name="0001-Implement-CLJ-207-let-as-first-for-binding-form.patch" size="2062" author="tsdh" created="Thu, 22 Mar 2012 09:21:41 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-952] bigdec does not properly convert a clojure.lang.BigInt</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-952</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;bigdec handles java.math.BigInteger when converting to java.math.BigDecimal, but it does not handle clojure.lang.BigInt.  Instead it treats a clojure.lang.BigInt as a Number, by casting it to long.  This causes the following error:&lt;/p&gt;

&lt;p&gt;Clojure 1.4.0-beta3&lt;br/&gt;
user=&amp;gt; (bigdec (inc (bigint Long/MAX_VALUE)))&lt;br/&gt;
IllegalArgumentException Value out of range for long: 9223372036854775808  clojure.lang.RT.longCast (RT.java:1123)&lt;/p&gt;</description>
                <environment/>
            <key id="15274">CLJ-952</key>
            <summary>bigdec does not properly convert a clojure.lang.BigInt</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pjstadig">Paul Stadig</reporter>
                        <labels>
                    </labels>
                <created>Mon, 12 Mar 2012 12:21:41 -0700</created>
                <updated>Wed, 21 Mar 2012 09:52:41 -0700</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>2</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27974" author="jafingerhut" created="Wed, 21 Mar 2012 08:55:30 -0700">&lt;p&gt;Add a case to bigdec to handle BigInts.  Also eliminate a reflection warning in the ratio case while we are in there.  Paul's failing case has been added to tests, fails before the fix, and passes after.  Attempted to make it as run-time efficient as possible by creating a new BigInt/toBigDecimal, patterned after the existing BigInt/toBigInteger.&lt;/p&gt;</comment>
                    <comment id="27975" author="pjstadig" created="Wed, 21 Mar 2012 09:51:50 -0700">&lt;p&gt;I was originally thinking of something like &lt;tt&gt;(BigDecimal. (.toBigInteger ^clojure.lang.BigInt x))&lt;/tt&gt;.  Adding a &lt;tt&gt;toBigDecimal&lt;/tt&gt; method to &lt;tt&gt;clojure.lang.BigInt&lt;/tt&gt; saves some object allocations and such.  Probably more of a micro optimization, but it works.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Clojure 1.4.0-master-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (bigdec (inc (bigint Long/MAX_VALUE)))&lt;br/&gt;
9223372036854775808M&lt;/p&gt;

&lt;p&gt;Thanks, Andy!&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10999" name="clj-952-make-bigdec-work-on-bigints-patch1.txt" size="2145" author="jafingerhut" created="Wed, 21 Mar 2012 08:55:30 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-939] Exceptions thrown in the top level ns form are reported without file or line number</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-939</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If there is an error in the `ns` form, an exception is thrown, which is not caught in `load`.&lt;/p&gt;

&lt;p&gt;For example, with an invalid :only clause;&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(ns clj14.myns
  (:use
   [clojure.core :only seq]))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a &lt;tt&gt;Don't know how to create ISeq from: clojure.lang.Symbol&lt;/tt&gt; exception, with source file or line number.&lt;/p&gt;</description>
                <environment/>
            <key id="15245">CLJ-939</key>
            <summary>Exceptions thrown in the top level ns form are reported without file or line number</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Feb 2012 10:01:03 -0800</created>
                <updated>Fri, 9 Mar 2012 07:26:18 -0800</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                        <comments>
                    <comment id="27869" author="hugoduncan" created="Sat, 25 Feb 2012 06:26:57 -0800">&lt;p&gt;Corrected patch&lt;/p&gt;</comment>
                    <comment id="27923" author="jafingerhut" created="Fri, 9 Mar 2012 07:26:18 -0800">&lt;p&gt;Patch 0001-report-load-exception-with-file-and-line.diff fails build.  Patch 0002-report-load-exception-with-file-and-line.diff applies, builds, and tests cleanly as of March 9, 2012.  Hugo has signed a CA.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10958" name="0001-report-load-exceptions-with-file-and-line.diff" size="908" author="hugoduncan" created="Fri, 24 Feb 2012 10:01:03 -0800"/>
                    <attachment id="10968" name="0002-report-load-exceptions-with-file-and-line.diff" size="907" author="hugoduncan" created="Sat, 25 Feb 2012 06:26:57 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-940] Passing a non-sequence to refer :only results in uninformative exception</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-940</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Compiling the following code results in a &lt;tt&gt;Don't know how to create ISeq from: clojure.lang.Symbol&lt;/tt&gt; exception&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;code&lt;/tt&gt;&lt;br/&gt;
(ns clj14.myns&lt;br/&gt;
  (:use&lt;br/&gt;
   &lt;span class="error"&gt;&amp;#91;clojure.core :only seq&amp;#93;&lt;/span&gt;))&lt;br/&gt;
&lt;tt&gt;code&lt;/tt&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="15246">CLJ-940</key>
            <summary>Passing a non-sequence to refer :only results in uninformative exception</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Feb 2012 10:20:40 -0800</created>
                <updated>Fri, 9 Mar 2012 07:22:18 -0800</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27922" author="jafingerhut" created="Fri, 9 Mar 2012 07:22:18 -0800">&lt;p&gt;Hugo, your patch doesn't apply cleanly to latest master due to some changed lines of context around it that are from before Nov 2011, which confuses me given that your patch was created recently.  I could mechanically update it, but if you could take a look and create an updated patch yourself it would be safer.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10959" name="0001-add-exception-for-non-sequence-in-refer-only.diff" size="939" author="hugoduncan" created="Fri, 24 Feb 2012 10:20:40 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-949] let undeclared exceptions continue unchecked</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-949</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The recent modifications regarding checked exceptions have eliminated the need for several try/catch blocks. This commit removes the blocks that no longer serve a purpose.&lt;/p&gt;</description>
                <environment/>
            <key id="15269">CLJ-949</key>
            <summary>let undeclared exceptions continue unchecked</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="netguy204">Brian Taylor</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Mar 2012 17:22:15 -0800</created>
                <updated>Fri, 9 Mar 2012 07:06:22 -0800</updated>
                                    <version>Backlog</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27920" author="jafingerhut" created="Fri, 9 Mar 2012 07:06:22 -0800">&lt;p&gt;Patch 0001-let-undeclared-exceptions-continue-unchecked.patch applies cleanly to latest master as of March 9, 2012, and build and test without errors or warnings.  One author, Brian Taylor, has signed CA.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10982" name="0001-let-undeclared-exceptions-continue-unchecked.patch" size="8137" author="netguy204" created="Wed, 7 Mar 2012 17:22:15 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-934] disj! throws exception when attempting to remove multiple items in one call</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-934</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;disj! fails whenever called with multiple items to remove:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (-&amp;gt; #{5 10 15 20} transient (disj! 10 15) persistent!)&lt;br/&gt;
ClassCastException clojure.lang.PersistentHashSet$TransientHashSet cannot be cast to clojure.lang.IPersistentSet  clojure.core/disj (core.clj:1419)&lt;/p&gt;

&lt;p&gt;It is a simple one line fix to disj! Clojure source code to correct this.&lt;/p&gt;</description>
                <environment/>
            <key id="15236">CLJ-934</key>
            <summary>disj! throws exception when attempting to remove multiple items in one call</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Feb 2012 00:10:48 -0800</created>
                <updated>Fri, 9 Mar 2012 07:02:19 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27919" author="jafingerhut" created="Fri, 9 Mar 2012 07:02:01 -0800">&lt;p&gt;clj-934-transient-disj-patch2.txt fixes a problem with my previous one where it had a warning during testing because of a poorly named test that conflicted with a name in clojure.core.  This one is clean.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10987" name="clj-934-transient-disj-patch2.txt" size="1509" author="jafingerhut" created="Fri, 9 Mar 2012 07:02:01 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-910] [Patch] Allow for type-hinting the method receiver in memfn</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-910</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The attached patch copies metadata given to the method name symbol of memfn to the method receiver in the expansion.  That way, memfn is able to be used even for type-hinted calls resulting in a big performance win.&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;user&amp;gt; (time (dotimes [i 1000000] ((memfn intValue) 1)))
Reflection warning, NO_SOURCE_FILE:1 - call to intValue can't be resolved.
"Elapsed time: 2579.229115 msecs"
nil
user&amp;gt; (time (dotimes [i 1000000] ((memfn ^Number intValue) 1)))
"Elapsed time: 12.015235 msecs"
nil
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="15115">CLJ-910</key>
            <summary>[Patch] Allow for type-hinting the method receiver in memfn</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="tsdh">Tassilo Horn</reporter>
                        <labels>
                        <label>performance</label>
                        <label>reflection</label>
                    </labels>
                <created>Fri, 13 Jan 2012 04:02:28 -0800</created>
                <updated>Thu, 8 Mar 2012 01:56:27 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27912" author="tsdh" created="Thu, 8 Mar 2012 01:56:20 -0800">&lt;p&gt;Updated patch.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10985" name="0001-Make-memfn-allow-for-type-hinting-the-method-receive.patch" size="1168" author="tsdh" created="Thu, 8 Mar 2012 01:56:20 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-157] Need better error report when omitting parameter list from (fn) or (defn)</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-157</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Somehow I just forgot to define parameters for my zero argument function and it took me a long time to notice it, mostly because I had been working with a lot of macros but especially because I didn't get an error that said "You must provide a list of parameter names", but instead: "Don't know how to create ISeq from: Symbol".&lt;/p&gt;</description>
                <environment/>
            <key id="13554">CLJ-157</key>
            <summary>Need better error report when omitting parameter list from (fn) or (defn)</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="ambrosebs">Ambrose Bonnaire-Sergeant</assignee>
                                <reporter username="ambrosebs">Ambrose Bonnaire-Sergeant</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Jul 2009 08:33:00 -0700</created>
                <updated>Wed, 7 Mar 2012 17:49:51 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>6</votes>
                        <watches>4</watches>
                        <comments>
                    <comment id="23025" author="importer" created="Tue, 24 Aug 2010 04:58:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/157"&gt;http://www.assembla.com/spaces/clojure/tickets/157&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="26031" author="alexmiller" created="Wed, 15 Dec 2010 07:40:27 -0800">&lt;p&gt;I have hit this several times. Would be very nice (esp for newbs) to have a guard-rail here that detected this as a possible issue.&lt;/p&gt;</comment>
                    <comment id="26547" author="soofaloofa" created="Thu, 30 Jun 2011 07:32:12 -0700">&lt;p&gt;I've came across this as well and would welcome a more user friendly error message.&lt;/p&gt;</comment>
                    <comment id="26761" author="stuart.sierra" created="Sun, 4 Sep 2011 23:38:00 -0700">&lt;p&gt;This is an easy mistake to make - I do it myself quite often. Better error messages for this common case would be good for new users.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-157" title="Need better error report when omitting parameter list from (fn) or (defn)"&gt;CLJ-157&lt;/a&gt; could probably be subsumed into a more general patch improving error messages about the expected arguments to &lt;tt&gt;fn&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;defn&lt;/tt&gt; is a macro which expands to &lt;tt&gt;fn&lt;/tt&gt;, so a patch to &lt;tt&gt;fn&lt;/tt&gt; should fix both.&lt;/p&gt;</comment>
                    <comment id="26767" author="ambrosebs" created="Mon, 5 Sep 2011 21:43:04 -0700">&lt;p&gt;I'm working a patch for this.&lt;/p&gt;</comment>
                    <comment id="26772" author="ambrosebs" created="Wed, 7 Sep 2011 05:31:22 -0700">&lt;p&gt;Is it ok to break the behavior of these two cases?&lt;/p&gt;

&lt;p&gt;(fn a)&lt;br/&gt;
(fn)&lt;/p&gt;

&lt;p&gt;So far I am throwing an error "Parameter list missing" instead of silently returning a function with AFAICT undefined behavior.&lt;/p&gt;</comment>
                    <comment id="26778" author="ambrosebs" created="Fri, 9 Sep 2011 03:23:44 -0700">&lt;p&gt;I've attached a patch. There are some breaking changes for undefined behavior, I have detailed them in the commit message.&lt;/p&gt;</comment>
                    <comment id="26917" author="stu" created="Mon, 10 Oct 2011 05:10:05 -0700">&lt;p&gt;The trickiest thing with this kind of error reporting is guessing what the programmer was trying to do:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The greater the probability a random string is a valid program, the harder it is to report errors well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;#8211; &lt;a href="http://www.paulgraham.com/redund.html"&gt;http://www.paulgraham.com/redund.html&lt;/a&gt;&lt;br/&gt;
An example:&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(defn add (a b) (+ a b))
IllegalArgumentException Parameter declaration a should be a vector  clojure.core/assert-valid-fdecl
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here the error message is based on a guess that I was trying to use the multi-arity syntax, but I was probably using the single-arity syntax with the wrong brackets. You might split these cases out by counting the top-level forms first.&lt;/p&gt;

&lt;p&gt;I think I am cool with the change to &lt;tt&gt;(fn)&lt;/tt&gt; and &lt;tt&gt;(fn a)&lt;/tt&gt;, but I can imagine a code generator relying on this behavior as a sentinel to avoid explicit coding for a corner case. What do others think?&lt;/p&gt;

&lt;p&gt;One small thing in the code. Why the redundant boolean work here?&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(if (instance? clojure.lang.Symbol name) false true)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="26918" author="ambrosebs" created="Mon, 10 Oct 2011 05:48:33 -0700">&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(&lt;span class="code-keyword"&gt;if&lt;/span&gt; (instance? clojure.lang.Symbol name) &lt;span class="code-keyword"&gt;false&lt;/span&gt; &lt;span class="code-keyword"&gt;true&lt;/span&gt;)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It's so early in the bootstrap that both `not` and `symbol?` are not defined. That line is in the definition of `defn`. I added a comment documenting this.&lt;/p&gt;</comment>
                    <comment id="26919" author="trptcolin" created="Mon, 10 Oct 2011 07:19:49 -0700">&lt;p&gt;I run into this all the time too - thanks for doing this, Ambrose!&lt;/p&gt;

&lt;p&gt;Stuart's example is an interesting one - that could have meant at least one other thing in addition to multi-arity syntax and single-arity syntax with accidentally-list params: single-arity syntax with missing param list, and two successive body forms (where a and b are free variables). I think the error message here would still be an improvement over "Don't know how to create ISeq from: Symbol", but maybe it tries to be too specific in talking about "a". I'd tend toward being more generic and just saying "Parameter declaration should be a vector", which I think would be helpful and correct in all the intended cases we've imagined for this particular example.&lt;/p&gt;

&lt;p&gt;I think breaking (fn) / (fn a) makes sense - if there's a valid use for those I'd be interested in seeing it. Relying on ArityException in code generation seems fairly error-prone to me, but I could easily be missing something here.&lt;/p&gt;

&lt;p&gt;To the boolean point, I tend to agree with Stuart and would prefer reversing the if/else clauses to avoid it:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-none"&gt;(if (instance? clojure.lang.Symbol name)
  nil      
  (throw (IllegalArgumentException. "First argument to defn must be a symbol")))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="26921" author="ambrosebs" created="Mon, 10 Oct 2011 07:45:24 -0700">&lt;p&gt;Doh, of course Colin's suggestion is preferable.&lt;/p&gt;</comment>
                    <comment id="27271" author="ambrosebs" created="Tue, 8 Nov 2011 13:29:51 -0800">&lt;p&gt;Added a second patch to fix redundant conditional&lt;/p&gt;</comment>
                    <comment id="27272" author="ambrosebs" created="Tue, 8 Nov 2011 16:32:23 -0800">&lt;p&gt;Another breaking change to undefined behavior I didn't realize. (defn a) now throws an exception, instead of silently returning a function.&lt;/p&gt;</comment>
                    <comment id="27349" author="carinmeier" created="Sun, 27 Nov 2011 12:54:27 -0800">&lt;p&gt;I checked out the changes and tried it out successfully.  I think it is a great improvement.  My only comment is regarding the text of the error message for &lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;user=&amp;gt; (defn [x])
IllegalArgumentException First argument to defn must be a symbol  clojure.core/defn (core.clj:273)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might be helpful to newcomers to mention that the parameter is the name.  Something like, "Name argument to defn must be a symbol".&lt;/p&gt;</comment>
                    <comment id="27358" author="stuart.sierra" created="Mon, 28 Nov 2011 14:28:13 -0800">&lt;p&gt;Vetted. Moving to "Approved Backlog" because it's an enhancement we would like to have in the next release.&lt;/p&gt;</comment>
                    <comment id="27359" author="stuart.sierra" created="Mon, 28 Nov 2011 14:28:30 -0800">&lt;p&gt;Changing priority to "Minor"&lt;/p&gt;</comment>
                    <comment id="27910" author="jafingerhut" created="Wed, 7 Mar 2012 17:49:51 -0800">&lt;p&gt;clj-157-better-err-msgs-for-defn-fn-syntax-errors-patch2.txt has no substantive changes from Ambrose's two patches.  It does combine them into one commit, and unlike the older ones applies cleanly to latest master as of March 7, 2012.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10334" name="0001-Better-error-messages-for-syntax-errors-w-defn-and-f.patch" size="9744" author="ambrosebs" created="Fri, 9 Sep 2011 03:23:44 -0700"/>
                    <attachment id="10690" name="0002-Fix-redundant-conditional.patch" size="1136" author="ambrosebs" created="Tue, 8 Nov 2011 13:29:51 -0800"/>
                    <attachment id="10983" name="clj-157-better-err-msgs-for-defn-fn-syntax-errors-patch2.txt" size="9698" author="jafingerhut" created="Wed, 7 Mar 2012 17:49:51 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-945] clojure.string/capitalize can give wrong result if first char is supplementary</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-945</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When the first unicode code point of a string is supplementary (i.e. requires two 16-bit Java chars to represent in UTF-16), and that first code point is changed by converting it to upper case, clojure.string/capitalize gives the wrong answer.&lt;/p&gt;</description>
                <environment>all</environment>
            <key id="15262">CLJ-945</key>
            <summary>clojure.string/capitalize can give wrong result if first char is supplementary</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Mon, 5 Mar 2012 09:33:02 -0800</created>
                <updated>Mon, 5 Mar 2012 09:33:02 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="10978" name="capitalize-for-supplementary-chars-patch.txt" size="1586" author="jafingerhut" created="Mon, 5 Mar 2012 09:33:02 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-891] make (symbol foo "bar") work with foo being a namespace</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-891</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;I've run across the need to do (symbol &lt;b&gt;ns&lt;/b&gt; "bar") a few times, and the existing approach (symbol (name (ns-name &lt;b&gt;ns&lt;/b&gt;)) "bar") just doesn't seem like it ought to be the only way to do the job.  Includes a patch to make this work, by adding a new arity to Symbol.intern().&lt;/p&gt;

&lt;p&gt;Some discussion on this idea, here: &lt;a href="https://groups.google.com/forum/#!topic/clojure/n25aZ5HA7hc/discussion"&gt;https://groups.google.com/forum/#!topic/clojure/n25aZ5HA7hc/discussion&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="15047">CLJ-891</key>
            <summary>make (symbol foo "bar") work with foo being a namespace</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="joegallo">Joe Gallo</reporter>
                        <labels>
                    </labels>
                <created>Mon, 5 Dec 2011 08:13:58 -0800</created>
                <updated>Fri, 2 Mar 2012 14:53:07 -0800</updated>
                                                    <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27439" author="stu" created="Fri, 9 Dec 2011 07:39:43 -0800">&lt;p&gt;I am not sure I like this, but I would like a rethink of names and namespaces. Doing a lot of cross language work, it would be great to have protocols for "I have a name" and for "I have a namespace".&lt;/p&gt;

&lt;p&gt;With such protocols in place, it would also be possible to separately consider implementing symbol et al in terms of them. &lt;/p&gt;</comment>
                    <comment id="27443" author="hiredman" created="Fri, 9 Dec 2011 10:24:06 -0800">&lt;p&gt;Named being a protocol or an interface seems orthogonal to being able to create a symbol qualified with a namespace when you have a namespace in hand.&lt;/p&gt;

&lt;p&gt;I don't think the patch goes far enough, not only should (symbol &lt;b&gt;ns&lt;/b&gt; "foo") be supported, but also (symbol &lt;b&gt;ns&lt;/b&gt; 'foo), given that (symbol 'foo) works and (symbol "foo") works, (symbol 'bar 'foo) should also work, but doesn't.&lt;/p&gt;

&lt;p&gt;if Named is a protocol, and if you extend it to String, and if you make the symbol function create symbols from one or two Named things you still end up having to do (symbol (ns-name &lt;b&gt;ns&lt;/b&gt;) 'foo) or (symbol (ns-name &lt;b&gt;ns&lt;/b&gt;) "foo")&lt;/p&gt;</comment>
                    <comment id="27480" author="joegallo" created="Fri, 16 Dec 2011 14:18:02 -0800">&lt;p&gt;Stuart, I'm not opposed to the idea of separate protocols for Named and Namespaced.  Where should I go about creating a proposal to create those protocols and get them into clojure?  I'm interested in doing the leg-work, or being a part of it.  But as an outsider, I don't know what to do next &amp;#8211; creating a ticket in Jira exhausted my knowledge of the process.&lt;/p&gt;</comment>
                    <comment id="27901" author="franks" created="Fri, 2 Mar 2012 14:53:07 -0800">&lt;p&gt;The same enhancement that joe suggests for symbol, would also apply to keyword.&lt;/p&gt;

&lt;p&gt;See: &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/222e4abc16df8b20"&gt;http://groups.google.com/group/clojure/browse_thread/thread/222e4abc16df8b20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably same/similar solution applies to both issues.&lt;/p&gt;

&lt;p&gt;-FrankS.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10732" name="0001-add-Symbol.intern-arity-for-a-Namespace-and-String.patch" size="7437" author="joegallo" created="Mon, 5 Dec 2011 08:13:58 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-943] When load-lib fails, a namespace is still created</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-943</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;When requiring a namespace that doesn't compile, a namespace is still created. The attached patch removes the namespace on failure if the namespace wasn't already present on entry to load-lib. See the test case in the patch for repro instructions.&lt;/p&gt;

&lt;p&gt;This is obviously a subset of having atomic loads. Would a step further in this direction, e.g. using a swapable state object within clojure.lang.Namespace be of interest?&lt;/p&gt;</description>
                <environment/>
            <key id="15255">CLJ-943</key>
            <summary>When load-lib fails, a namespace is still created</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Mar 2012 17:30:47 -0800</created>
                <updated>Thu, 1 Mar 2012 17:30:47 -0800</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>0</watches>
                                <attachments>
                    <attachment id="10977" name="0001-Remove-namespace-if-load-lib-fails-and-namespace-did.patch" size="2899" author="hugoduncan" created="Thu, 1 Mar 2012 17:30:47 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-896] Make browse-url aware of xdg-open</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-896</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.java.browse/browse-url tests to see if it's running on Mac OS to fall back to "/usr/bin/open" in order&lt;br/&gt;
to open a URI. On most other systems it'll just falls through to open-url-in-swing instead. The attached patch&lt;br/&gt;
tests to see if freedesktop.org's "xdg-open" is present in the users path. This way browse-url will launch the&lt;br/&gt;
program associated with the URI, in my case chromium.&lt;/p&gt;</description>
                <environment>All platforms that provide xdg-open (as part of freedesktop.org) benefit from this. Fix was tested on OpenBSD.</environment>
            <key id="15069">CLJ-896</key>
            <summary>Make browse-url aware of xdg-open</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jasperla">Jasper Lievisse Adriaanse</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Dec 2011 15:29:14 -0800</created>
                <updated>Wed, 29 Feb 2012 11:47:35 -0800</updated>
                                                                            <due/>
                    <votes>2</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27885" author="jafingerhut" created="Tue, 28 Feb 2012 16:19:08 -0800">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-920" title="Adds support for FreeDesktop&amp;#39;s xdg-open in clojure.java.browse/browse-url."&gt;&lt;del&gt;CLJ-920&lt;/del&gt;&lt;/a&gt;, if not identical, at least bears a significant resemblance to this ticket.  It would be good to see if the patch for one of them fixes both issues.&lt;/p&gt;</comment>
                    <comment id="27889" author="jafingerhut" created="Wed, 29 Feb 2012 11:18:04 -0800">&lt;p&gt;clj-896-browse-url-uses-xdg-open-patch2.txt is based more on the patch attached to &lt;a href="http://dev.clojure.org/jira/browse/CLJ-920" title="Adds support for FreeDesktop&amp;#39;s xdg-open in clojure.java.browse/browse-url."&gt;&lt;del&gt;CLJ-920&lt;/del&gt;&lt;/a&gt; by Jeremy Heiler than on the earlier patch attached to this ticket.  He and I have signed CAs.&lt;/p&gt;

&lt;p&gt;I think this patch improves on both of the previous patches for &lt;a href="http://dev.clojure.org/jira/browse/CLJ-896" title="Make browse-url aware of xdg-open"&gt;CLJ-896&lt;/a&gt; and &lt;a href="http://dev.clojure.org/jira/browse/CLJ-920" title="Adds support for FreeDesktop&amp;#39;s xdg-open in clojure.java.browse/browse-url."&gt;&lt;del&gt;CLJ-920&lt;/del&gt;&lt;/a&gt;.  In particular, Jeremy's worked fine, but it caused a long slowdown in the running of tests when building Clojure.  This one does not.&lt;/p&gt;

&lt;p&gt;Tested on:&lt;/p&gt;

&lt;p&gt;Mac OS X 10.6.8&lt;br/&gt;
Windows XP SP3, both in cmd.exe and a Cygwin bash shell&lt;br/&gt;
Ubuntu 10.04 LTS&lt;/p&gt;

&lt;p&gt;It would be great if someone could test it on a BSD system.  The only possible issue I can think of is whether the output of the "which" command is different there than on the Linux system I tested.&lt;/p&gt;

&lt;p&gt;If someone wants to make a patch that doesn't use "which", but instead checks the PATH, I'd recommend they also test on Windows in cmd.exe to make sure it works correctly there.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10745" name="0001-teach-browse-url-about-xdg-open.patch" size="1948" author="jasperla" created="Tue, 13 Dec 2011 15:29:14 -0800"/>
                    <attachment id="10974" name="clj-896-browse-url-uses-xdg-open-patch2.txt" size="3184" author="jafingerhut" created="Wed, 29 Feb 2012 11:18:04 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-870] clojure.string/replace behaves unexpectedly when \ or $ are part of the result string</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-870</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.string/replace uses javas replace function to do it's work, the replace function has the tricky habit of 'double evaluating' the replacement string (third argument). This means that every \ in the string (so i.e. "&lt;br clear="all" /&gt;") is evaluated by the java code behind replace.&lt;/p&gt;

&lt;p&gt;Since this behavior isn't documented it can lead to confusing errors, for example (made up semi real world example to explain the issue):&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(clojure.string/replace "c:/windows/" #"/" "\\")&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should replace all unix folder separators with windows separators, this crashes with a index out of bound exemption since java tries to evaluate "&lt;br clear="all" /&gt;" as a semi regexp.&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(println (str "\"" (clojure.string/replace "my string with \\ and \" in it" #"[\"\\]" (fn [x] (str "\\" x))) "\""))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;The expected result would be:&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;"my string with \\ and \" in it"&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;the actual result is:&lt;/p&gt;
&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;"my string with \ and " in it"&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should return an 'escaped' string, it does not since the 'double evaluation' of the return string results in \\\\ being reduced to &lt;br clear="all" /&gt; again.&lt;/p&gt;

</description>
                <environment>HW/OS/SW indipendant - issue is part of java interface</environment>
            <key id="14913">CLJ-870</key>
            <summary>clojure.string/replace behaves unexpectedly when \ or $ are part of the result string</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="stuart.sierra">Stuart Sierra</assignee>
                                <reporter username="licenser">Heinz N. Gies</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Nov 2011 03:28:31 -0700</created>
                <updated>Tue, 28 Feb 2012 10:41:22 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27192" author="licenser" created="Fri, 4 Nov 2011 03:31:57 -0700">&lt;p&gt;A working code for the replace example is: &lt;/p&gt;

&lt;div class="preformatted panel" style="border-width: 1px;"&gt;&lt;div class="preformattedContent panelContent"&gt;
&lt;pre&gt;(println (str "\"" (clojure.string/replace "my string with \\ and \" in it" #"[\"\\]" (fn [x] (str  "\\\\"  (if (= x "\\") "\\") x))) "\""))&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is horribly ugly since you need to hand escape the backslash or it crashes.&lt;/p&gt;</comment>
                    <comment id="27448" author="stuart.sierra" created="Fri, 9 Dec 2011 13:31:41 -0800">&lt;p&gt;Vetted on 1.4.0 master. Needs patch.&lt;/p&gt;</comment>
                    <comment id="27511" author="amalloy" created="Thu, 5 Jan 2012 18:30:04 -0800">&lt;p&gt;No hand-escaping is necessary, just use #(java.util.regex.Matcher/quoteReplacement %).&lt;/p&gt;

&lt;p&gt;Edit: I see, we're talking about when you use a function as a replacement, not a replacement &lt;b&gt;string&lt;/b&gt; like "&lt;br clear="all" /&gt;x" - the function's output should not be interpreted as regex replacement, I agree. Looks like it just needs a small patch in clojure.string/replace-by.&lt;/p&gt;</comment>
                    <comment id="27512" author="amalloy" created="Thu, 5 Jan 2012 18:53:14 -0800">&lt;p&gt;Patch and test for this issue.&lt;/p&gt;</comment>
                    <comment id="27513" author="jafingerhut" created="Thu, 5 Jan 2012 22:25:52 -0800">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-870" title="clojure.string/replace behaves unexpectedly when \ or $ are part of the result string"&gt;CLJ-870&lt;/a&gt;-also-fix-replace-first.patch combines Alan Malloy's two patches, and adds the same change for replace-first.  I like this change, too, and think replace and replace-first should be consistent with each other in this behavior.&lt;/p&gt;</comment>
                    <comment id="27514" author="jafingerhut" created="Thu, 5 Jan 2012 22:32:50 -0800">&lt;p&gt;If there is any interest in a combined patch for this issue, &lt;a href="http://dev.clojure.org/jira/browse/CLJ-753" title="clojure.string/replace-first returns nil with replacement fn when regex doesn&amp;#39;t match"&gt;CLJ-753&lt;/a&gt; and &lt;a href="http://dev.clojure.org/jira/browse/CLJ-905" title="clojure.string/replace-first treats \ and $ specially when match is a string, unlike clojure.string/replace"&gt;CLJ-905&lt;/a&gt; all in one, I'd be happy to merge them.&lt;/p&gt;</comment>
                    <comment id="27543" author="jafingerhut" created="Wed, 11 Jan 2012 22:05:43 -0800">&lt;p&gt;Proposed combined patch for &lt;a href="http://dev.clojure.org/jira/browse/CLJ-753" title="clojure.string/replace-first returns nil with replacement fn when regex doesn&amp;#39;t match"&gt;CLJ-753&lt;/a&gt;, &lt;a href="http://dev.clojure.org/jira/browse/CLJ-870" title="clojure.string/replace behaves unexpectedly when \ or $ are part of the result string"&gt;CLJ-870&lt;/a&gt;, and &lt;a href="http://dev.clojure.org/jira/browse/CLJ-905" title="clojure.string/replace-first treats \ and $ specially when match is a string, unlike clojure.string/replace"&gt;CLJ-905&lt;/a&gt;, since they all affect the behavior of clojure.string/replace and replace-first.&lt;/p&gt;</comment>
                    <comment id="27643" author="stuart.sierra" created="Fri, 3 Feb 2012 07:15:43 -0800">&lt;p&gt;The 1/12/2012 combined patch is not in correct format. Please recreate, see &lt;a href="http://clojure.org/patches"&gt;http://clojure.org/patches&lt;/a&gt; for correct format.&lt;/p&gt;</comment>
                    <comment id="27652" author="jafingerhut" created="Sat, 4 Feb 2012 08:51:50 -0800">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-753" title="clojure.string/replace-first returns nil with replacement fn when regex doesn&amp;#39;t match"&gt;CLJ-753&lt;/a&gt;-870-905-combined-fix2.patch should have proper patch format.&lt;/p&gt;</comment>
                    <comment id="27884" author="jafingerhut" created="Tue, 28 Feb 2012 10:38:29 -0800">&lt;p&gt;Attaching slightly improved patch &lt;a href="http://dev.clojure.org/jira/browse/CLJ-753" title="clojure.string/replace-first returns nil with replacement fn when regex doesn&amp;#39;t match"&gt;CLJ-753&lt;/a&gt;-870-905-combined-fix3.patch, along with a README to explain in gory detail the behavior and performance changes to clojure.string/replace and clojure.string/replace-first, in case it would help anyone review the changes.  Deleting my older patches.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10760" name="0001-Add-tests-for-870.patch" size="964" author="amalloy" created="Thu, 5 Jan 2012 18:53:14 -0800"/>
                    <attachment id="10761" name="0002-Fix-870-by-using-quoteReplacement.patch" size="1205" author="amalloy" created="Thu, 5 Jan 2012 18:53:14 -0800"/>
                    <attachment id="10971" name="CLJ-753-870-905-combined-fix3.patch" size="8936" author="jafingerhut" created="Tue, 28 Feb 2012 10:38:29 -0800"/>
                    <attachment id="10972" name="CLJ-753-870-905-combined-fix3.readme.txt" size="3571" author="jafingerhut" created="Tue, 28 Feb 2012 10:38:29 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-905] clojure.string/replace-first treats \ and $ specially when match is a string, unlike clojure.string/replace</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-905</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.string/replace only gives special treatment to replacement string when match is a regex pattern.  clojure.string/replace-first does so in those cases, but also when match is a string to be matched literally.  For example, these cases are not consistent with each other:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (require '&lt;span class="error"&gt;&amp;#91;clojure.string :as str&amp;#93;&lt;/span&gt;)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (str/replace "food" "o" "$")&lt;br/&gt;
"f$$d"&lt;br/&gt;
user=&amp;gt; (str/replace-first "food" "o" "$")&lt;br/&gt;
java.lang.StringIndexOutOfBoundsException: String index out of range: 1 (NO_SOURCE_FILE:0)&lt;/p&gt;</description>
                <environment/>
            <key id="15092">CLJ-905</key>
            <summary>clojure.string/replace-first treats \ and $ specially when match is a string, unlike clojure.string/replace</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Sat, 31 Dec 2011 15:02:38 -0800</created>
                <updated>Tue, 28 Feb 2012 10:35:52 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27501" author="jafingerhut" created="Sat, 31 Dec 2011 15:04:54 -0800">&lt;p&gt;Suggested fix for &lt;a href="http://dev.clojure.org/jira/browse/CLJ-905" title="clojure.string/replace-first treats \ and $ specially when match is a string, unlike clojure.string/replace"&gt;CLJ-905&lt;/a&gt;, plus addition of function clojure.string/re-qr for quoting replacement strings that caller wishes to be treated literally when match is a pattern.&lt;/p&gt;</comment>
                    <comment id="27653" author="jafingerhut" created="Sat, 4 Feb 2012 11:59:52 -0800">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-870" title="clojure.string/replace behaves unexpectedly when \ or $ are part of the result string"&gt;CLJ-870&lt;/a&gt; has a proposed combined patch for this issue and that one.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-828] clojure.core/bases returns a cons when passed a class and a Java array when passed an interface</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-828</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.core/bases returns a clojure.lang.Cons when called with a class as parameter, but a Java array ( [Ljava.lang.Class; &amp;#41; when called with an interface. Both should return values of the same type, which I guess should be a seq.&lt;/p&gt;

&lt;p&gt;Showing the problem at the REPL:&lt;br/&gt;
user=&amp;gt; (bases java.util.List)&lt;br/&gt;
#&amp;lt;Class[] [Ljava.lang.Class;@315b0333&amp;gt;&lt;br/&gt;
user=&amp;gt; (bases java.util.ArrayList)&lt;br/&gt;
(java.util.AbstractList java.util.List java.util.RandomAccess&lt;br/&gt;
java.lang.Cloneable java.io.Serializable) &lt;/p&gt;

&lt;p&gt;I have attached a patch which calls the seq function on the else part of clojure.core/bases. Also updated the clojure.test-clojure.java-interop/test-bases test. However these test do not currently seem to run as part of the maven build. I have however run the test manually and verified that it works.&lt;/p&gt;</description>
                <environment/>
            <key id="14575">CLJ-828</key>
            <summary>clojure.core/bases returns a cons when passed a class and a Java array when passed an interface</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stoyle">Alf Kristian Støyle</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Aug 2011 09:20:02 -0700</created>
                <updated>Sat, 25 Feb 2012 09:58:53 -0800</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27862" author="jafingerhut" created="Fri, 24 Feb 2012 17:29:50 -0800">&lt;p&gt;Behavior where bases returns Java array in some cases still exists on latest master, and this patch still applies cleanly and changes that behavior as described.&lt;/p&gt;

&lt;p&gt;The patch writer Alf is not on the list of people who have signed a CA.  If he isn't in the process of doing so, what should be done with the patch?  If I described the behavior to a committer without showing them the patch, they would likely come up with a similar one-line fix. &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;</comment>
                    <comment id="27867" author="stoyle" created="Fri, 24 Feb 2012 23:09:33 -0800">&lt;p&gt;I was not aware that contributors had to sign the CA to get a patch in when I wrote this, so my apologies for adding the patch. I just wanted to make the contribution an "easy add". I guess you guys would have figured out a similar fix really easy.&lt;/p&gt;

&lt;p&gt;I am not in the process of signing the CA. I would not have any problems signing it, but then I guess for such a small contribution it would be too much of a hassle. And besides, I don't think this small contribution makes me a worthy contributor.&lt;/p&gt;

&lt;p&gt;I would certainly not mind you guys fixing this in anyway you can, with or without my patch.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Alf&lt;/p&gt;</comment>
                    <comment id="27873" author="jafingerhut" created="Sat, 25 Feb 2012 09:58:53 -0800">&lt;p&gt;No apologies necessary for trying to improve the code, Alf.  We appreciate it.&lt;/p&gt;

&lt;p&gt;I agree it might be a bit of a hassle to sign a CA just for this fix.  Legally, a Clojure contributor is one whether anyone considers them "worthy" or not.&lt;/p&gt;

&lt;p&gt;We'll figure something out.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10313" name="0001-Make-sure-the-clojure.core-bases-function-always-ret.patch" size="1601" author="stoyle" created="Mon, 15 Aug 2011 09:20:03 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-667] Allow loops fully nested in catch/finally</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-667</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;~/clj-git/clojure $ java -cp clojure.jar clojure.main&lt;br/&gt;
Clojure 1.3.0-alpha2-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (try (catch Exception e (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (recur x))))&lt;br/&gt;
CompilerException java.lang.UnsupportedOperationException: Cannot recur from catch/finally, compiling:(NO_SOURCE_PATH:1) &lt;br/&gt;
user=&amp;gt; (try (finally (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (if false (recur x)))))&lt;br/&gt;
CompilerException java.lang.UnsupportedOperationException: Cannot recur from catch/finally, compiling:(NO_SOURCE_PATH:2) &lt;/p&gt;

&lt;p&gt;With attached patch (should also fix &lt;a href="http://dev.clojure.org/jira/browse/CLJ-31" title="GC Issue 27: Disallow recur across try"&gt;&lt;del&gt;CLJ-31&lt;/del&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;~/clj-head/clojure $ java -cp clojure.jar clojure.main&lt;br/&gt;
Clojure 1.3.0-alpha2-SNAPSHOT&lt;br/&gt;
user=&amp;gt; (try (catch Exception e (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (recur x))))&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (try (finally (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (if false (recur x)))))&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (try (if false (recur x))))&lt;br/&gt;
CompilerException java.lang.UnsupportedOperationException: Can only recur from tail position, compiling:(NO_SOURCE_PATH:3) &lt;br/&gt;
user=&amp;gt; (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (try (catch Exception e (recur x))))&lt;br/&gt;
CompilerException java.lang.UnsupportedOperationException: Can only recur from tail position, compiling:(NO_SOURCE_PATH:4) &lt;br/&gt;
user=&amp;gt; (loop &lt;span class="error"&gt;&amp;#91;x 0&amp;#93;&lt;/span&gt; (try (finally (recur x))))&lt;br/&gt;
CompilerException java.lang.UnsupportedOperationException: Can only recur from tail position, compiling:(NO_SOURCE_PATH:5)&lt;/p&gt;</description>
                <environment/>
            <key id="14269">CLJ-667</key>
            <summary>Allow loops fully nested in catch/finally</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jarpiain">Juha Arpiainen</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 Oct 2010 10:51:15 -0700</created>
                <updated>Fri, 24 Feb 2012 16:47:31 -0800</updated>
                                                    <fixVersion>Release 1.4</fixVersion>
                                        <due/>
                    <votes>4</votes>
                        <watches>3</watches>
                        <comments>
                    <comment id="27861" author="jafingerhut" created="Fri, 24 Feb 2012 16:47:18 -0800">&lt;p&gt;clj-667-allow-loop-recur-nested-in-catch-and-finally-patch2.txt applies cleanly to latest master as of Feb 24, 2012.&lt;/p&gt;

&lt;p&gt;I cannot vouch for the changes in Compiler.java &amp;#8211; I simply modified what was in Juha Arpiainen's patch so that they applied cleanly.  Some of the context changed noticeably due to a patch for &lt;a href="http://dev.clojure.org/jira/browse/CLJ-31" title="GC Issue 27: Disallow recur across try"&gt;&lt;del&gt;CLJ-31&lt;/del&gt;&lt;/a&gt; by Kevin Downey that was applied.&lt;/p&gt;

&lt;p&gt;The test parts of the patch I can vouch for.  Some of the previously existing tests seem not to test what they should.  I can make a separate patch with just the updated passing tests if that is desired.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10010" name="0001-Allow-loop-recur-nested-in-catch-and-finally.patch" size="2440" author="jarpiain" created="Sun, 31 Oct 2010 10:51:15 -0700"/>
                    <attachment id="10963" name="clj-667-allow-loop-recur-nested-in-catch-and-finally-patch2.txt" size="8177" author="jafingerhut" created="Fri, 24 Feb 2012 16:47:18 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-788] Add source and line members and getters to CompilerException</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-788</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;To improve the reliability and ease of using CompilerException in tooling, add source path and line getters to CompilerException.&lt;/p&gt;

&lt;p&gt;When handling compiler exceptions programmatically, the source path and line currently have to be parsed out of the compiler exception. &lt;/p&gt;</description>
                <environment/>
            <key id="14414">CLJ-788</key>
            <summary>Add source and line members and getters to CompilerException</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hugoduncan">Hugo Duncan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 May 2011 09:28:19 -0700</created>
                <updated>Fri, 24 Feb 2012 09:03:21 -0800</updated>
                                                                            <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26446" author="hugoduncan" created="Wed, 18 May 2011 15:13:52 -0700">&lt;p&gt;OK, I'm blind - the source is already there - the line number would be nice though.&lt;/p&gt;</comment>
                    <comment id="27834" author="hugoduncan" created="Fri, 24 Feb 2012 08:28:16 -0800">&lt;p&gt;On clojure-1.3.0&lt;/p&gt;</comment>
                    <comment id="27836" author="jafingerhut" created="Fri, 24 Feb 2012 09:03:10 -0800">&lt;p&gt;clj-788-add-line-member-and-getter-to-CompilerException-patch.txt is identical to Hugo's, but for some reason that isn't obvious to me his did not apply cleanly to latest master when I tried it out, but this one does.&lt;/p&gt;

&lt;p&gt;Compiles without warnings and passes all tests.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10954" name="0001-add-line-member-and-getter-to-CompilerException.diff" size="965" author="hugoduncan" created="Fri, 24 Feb 2012 08:34:11 -0800"/>
                    <attachment id="10955" name="clj-788-add-line-member-and-getter-to-CompilerException-patch.txt" size="952" author="jafingerhut" created="Fri, 24 Feb 2012 09:03:10 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-103] GC Issue 99: Incorrect error with if-let</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-103</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;Reported by rosejn, Mar 19, 2009

Example:
user=&amp;gt; (&lt;span class="code-keyword"&gt;if&lt;/span&gt;-let [foo (+ 1 2)] foo + 1 foo)
java.lang.IllegalArgumentException: &lt;span class="code-keyword"&gt;if&lt;/span&gt;-let requires a vector &lt;span class="code-keyword"&gt;for&lt;/span&gt; its
binding (NO_SOURCE_FILE:2)

The error reports that &lt;span class="code-keyword"&gt;if&lt;/span&gt;-let requires a vector &lt;span class="code-keyword"&gt;for&lt;/span&gt; its binding, but the
problem here has nothing to &lt;span class="code-keyword"&gt;do&lt;/span&gt; with the binding being a vector.  A paren
was forgotten before the '+', so the number of arguments is incorrect &lt;span class="code-keyword"&gt;for&lt;/span&gt;
the &lt;span class="code-keyword"&gt;if&lt;/span&gt; form.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="13500">CLJ-103</key>
            <summary>GC Issue 99: Incorrect error with if-let</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="-1">None</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Jun 2009 14:56:00 -0700</created>
                <updated>Thu, 23 Feb 2012 22:10:07 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="22766" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/103"&gt;http://www.assembla.com/spaces/clojure/tickets/103&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="22767" author="importer" created="Tue, 24 Aug 2010 04:45:00 -0700">&lt;p&gt;richhickey said: Updating tickets (#8, #19, #30, #31, #126, #17, #42, #47, #50, #61, #64, #69, #71, #77, #79, #84, #87, #89, #96, #99, #103, #107, #112, #113, #114, #115, #118, #119, #121, #122, #124)&lt;/p&gt;</comment>
                    <comment id="24322" author="jszakmeister" created="Wed, 27 Oct 2010 19:15:07 -0700">&lt;p&gt;I have a patch that gives a better error message.  It will now say: "IllegalArgumentException if-let requires 1 or 2 forms to be passed".  I'm not sure if that's a better error message or not, but I'm happy to tweak it.&lt;/p&gt;</comment>
                    <comment id="24323" author="jszakmeister" created="Wed, 27 Oct 2010 19:16:09 -0700">&lt;p&gt;First iteration of the patch.&lt;/p&gt;</comment>
                    <comment id="27830" author="jafingerhut" created="Thu, 23 Feb 2012 21:43:34 -0800">&lt;p&gt;clj-103-incorrect-if-let-error-patch2.txt is same as John's except updated to apply cleanly to latest master as of Feb 23, 2012.  No compiler errors or warnings, no test failures.  No new tests for this one &amp;#8211; I could write one, but the only way to do so is to check the contents of the error message in the exception thrown, which seems a bit too specific.  The author John Szakmeister is on the contributor list.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10001" name="0001-Fix-CLJ-103-Incorrect-error-with-if-let.patch" size="904" author="jszakmeister" created="Wed, 27 Oct 2010 19:16:09 -0700"/>
                    <attachment id="10952" name="clj-103-incorrect-if-let-error-patch2.txt" size="897" author="jafingerhut" created="Thu, 23 Feb 2012 21:43:34 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-783] clojure.inspector/inspect-tree doesn't work on sets --patch in the description by Jason Wolfe</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-783</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;As reported by Jason Wolfe on March 19, 2009 in the clojure group:&lt;/p&gt;

&lt;p&gt;clojure.inspector/inspect-tree doesn't work on sets; patch attached&lt;br/&gt;
&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/97bcad115fcfaf5a/95e61c423c61cfa8?lnk=gst&amp;amp;q=inspector+set#95e61c423c61cfa8"&gt;http://groups.google.com/group/clojure/browse_thread/thread/97bcad115fcfaf5a/95e61c423c61cfa8?lnk=gst&amp;amp;q=inspector+set#95e61c423c61cfa8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was debugging with inspect-tree and noticed that it errors when it &lt;br/&gt;
encounters a set (it thinks it's not atomic, but then nth produces an &lt;br/&gt;
UnsupportedOperationException). &lt;/p&gt;

&lt;p&gt;I made a small patch (below) that makes inspect-tree work on &lt;br/&gt;
java.util.Sets, and also anything else that implements &lt;br/&gt;
clojure.lang.Seqable.  If this is of interest, please let me know and &lt;br/&gt;
I can create an issue. &lt;/p&gt;


&lt;p&gt;Cheers, &lt;br/&gt;
Jason &lt;/p&gt;


&lt;p&gt;Index: src/clj/clojure/inspector.clj &lt;br/&gt;
=================================================================== &lt;br/&gt;
&amp;#8212; src/clj/clojure/inspector.clj       (revision 1335) &lt;br/&gt;
+++ src/clj/clojure/inspector.clj       (working copy) &lt;br/&gt;
@@ -20,8 +20,10 @@ &lt;br/&gt;
 (defn collection-tag &lt;span class="error"&gt;&amp;#91;x&amp;#93;&lt;/span&gt; &lt;br/&gt;
   (cond &lt;br/&gt;
    (instance? java.util.Map$Entry x) :entry &lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;(instance? java.util.Map x) :map&lt;br/&gt;
+   (instance? java.util.Map x) :seqable &lt;br/&gt;
+   (instance? java.util.Set x) :seqable &lt;br/&gt;
    (sequential? x) :seq &lt;br/&gt;
+   (instance? clojure.lang.Seqable x) :seqable &lt;br/&gt;
    :else :atom)) &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt; (defmulti is-leaf collection-tag) &lt;br/&gt;
@@ -42,11 +44,15 @@ &lt;br/&gt;
 (defmethod get-child-count :entry &lt;span class="error"&gt;&amp;#91;e&amp;#93;&lt;/span&gt; &lt;br/&gt;
   (count (val e))) &lt;/p&gt;


&lt;p&gt;-(defmethod is-leaf :map &lt;span class="error"&gt;&amp;#91;m&amp;#93;&lt;/span&gt; &lt;br/&gt;
+(defmethod is-leaf :seqable &lt;span class="error"&gt;&amp;#91;parent&amp;#93;&lt;/span&gt; &lt;br/&gt;
   false) &lt;br/&gt;
-(defmethod get-child :map &lt;span class="error"&gt;&amp;#91;m index&amp;#93;&lt;/span&gt; &lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;(nth (seq m) index))&lt;br/&gt;
+(defmethod get-child :seqable &lt;span class="error"&gt;&amp;#91;parent index&amp;#93;&lt;/span&gt; &lt;br/&gt;
+  (nth (seq parent) index)) &lt;br/&gt;
+(defmethod get-child-count :seqable &lt;span class="error"&gt;&amp;#91;parent&amp;#93;&lt;/span&gt; &lt;br/&gt;
+  (count (seq parent))) &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt; (defn tree-model &lt;span class="error"&gt;&amp;#91;data&amp;#93;&lt;/span&gt; &lt;br/&gt;
   (proxy &lt;span class="error"&gt;&amp;#91;TreeModel&amp;#93;&lt;/span&gt; [] &lt;br/&gt;
     (getRoot [] data) &lt;/p&gt;</description>
                <environment>Any</environment>
            <key id="14409">CLJ-783</key>
            <summary>clojure.inspector/inspect-tree doesn't work on sets --patch in the description by Jason Wolfe</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ablancas">Armando Blancas</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Apr 2011 09:29:27 -0700</created>
                <updated>Thu, 23 Feb 2012 21:58:31 -0800</updated>
                                                                            <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27718" author="jafingerhut" created="Tue, 14 Feb 2012 10:54:05 -0800">&lt;p&gt;Created a properly formatted patch, attached, for Jason's enhancement.  I tested it with&lt;/p&gt;

&lt;p&gt;(inspect-tree (:members (clojure.reflect/reflect java.lang.Math)))&lt;/p&gt;

&lt;p&gt;and it worked, whereas it had many errors without Jason's changes.&lt;/p&gt;</comment>
                    <comment id="27831" author="jafingerhut" created="Thu, 23 Feb 2012 21:58:31 -0800">&lt;p&gt;Jason Wolfe has signed a CA.  Patch applies cleanly with latest master as of Feb 14, 2012.  No errors, warnings, or test failures with the patch applied.  No doc strings need updating.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10909" name="clj-783-patch.txt" size="1294" author="jafingerhut" created="Tue, 14 Feb 2012 10:54:05 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-894] Better reduce performance</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-894</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently reduce is implemented in Clojure by calling seq on a collection. Construction of an entire new seq is an unnecessary and expensive operation, particularly for the key persistent collections (map, set and vector suffer - list is not a problem because it implements ISeq directly for free). &lt;/p&gt;

&lt;p&gt;This patch proposes to improve this by doing the following:&lt;br/&gt;
1. Make use of a Java interface for reducible collections (IReduce)&lt;br/&gt;
2. Make persistent collections support implementations of reduce &lt;br/&gt;
directly by implementing IReduce &lt;br/&gt;
3. Modify the internal-reduce protocol to operate on concrete &lt;br/&gt;
collections (not just seqs) and make use of IReduce implementations &lt;br/&gt;
where available &lt;br/&gt;
4. Change reduce itself to call internal-reduce directly rather than &lt;br/&gt;
calling seq first &lt;/p&gt;</description>
                <environment/>
            <key id="15060">CLJ-894</key>
            <summary>Better reduce performance</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mikera">Mike Anderson</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Dec 2011 01:57:26 -0800</created>
                <updated>Thu, 23 Feb 2012 05:32:07 -0800</updated>
                                    <version>Backlog</version>
                                                        <due/>
                    <votes>2</votes>
                        <watches>6</watches>
                        <comments>
                    <comment id="27429" author="mikera" created="Fri, 9 Dec 2011 01:58:45 -0800">&lt;p&gt;Link to initial discussion on Clojure Dev Google Group&lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/clojure-dev/browse_frm/thread/bdab332c4e47721f?hl=en"&gt;http://groups.google.com/group/clojure-dev/browse_frm/thread/bdab332c4e47721f?hl=en&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27430" author="mikera" created="Fri, 9 Dec 2011 01:59:47 -0800">&lt;p&gt;Link to experimental implementation on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mikera/clojure/tree/better-reduce"&gt;https://github.com/mikera/clojure/tree/better-reduce&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27431" author="mikera" created="Fri, 9 Dec 2011 02:00:54 -0800">&lt;p&gt;Performance testing shows approx 2x speedup for relevant operations:&lt;/p&gt;

&lt;p&gt;Clojure 1.3.0 &lt;br/&gt;
(def ms (zipmap (range 100) (range 100))) &lt;br/&gt;
#'user/ms &lt;br/&gt;
user=&amp;gt; (dotimes &lt;span class="error"&gt;&amp;#91;i 10&amp;#93;&lt;/span&gt; (time (dotimes &lt;span class="error"&gt;&amp;#91;i 100000&amp;#93;&lt;/span&gt; (reduce (fn [acc [k &lt;br/&gt;
v]] (+ acc v)) 0 ms)))) &lt;br/&gt;
"Elapsed time: 646.512414 msecs" &lt;br/&gt;
"Elapsed time: 553.264593 msecs" &lt;br/&gt;
"Elapsed time: 544.999672 msecs" &lt;br/&gt;
"Elapsed time: 510.606868 msecs" &lt;br/&gt;
"Elapsed time: 513.192451 msecs" &lt;br/&gt;
"Elapsed time: 537.665664 msecs" &lt;br/&gt;
"Elapsed time: 524.166514 msecs" &lt;br/&gt;
"Elapsed time: 512.966964 msecs" &lt;br/&gt;
"Elapsed time: 501.677219 msecs" &lt;br/&gt;
"Elapsed time: 496.379194 msecs"&lt;/p&gt;

&lt;p&gt;Clojure 1.4.0-alpha2 &lt;br/&gt;
user=&amp;gt; (def ms (zipmap (range 100) (range 100))) &lt;br/&gt;
#'user/ms &lt;br/&gt;
user=&amp;gt; (dotimes &lt;span class="error"&gt;&amp;#91;i 10&amp;#93;&lt;/span&gt; (time (dotimes &lt;span class="error"&gt;&amp;#91;i 100000&amp;#93;&lt;/span&gt; (reduce (fn [acc [k &lt;br/&gt;
v]] (+ acc v)) 0 ms)))) &lt;br/&gt;
"Elapsed time: 548.822683 msecs" &lt;br/&gt;
"Elapsed time: 469.275299 msecs" &lt;br/&gt;
"Elapsed time: 464.742096 msecs" &lt;br/&gt;
"Elapsed time: 443.500129 msecs" &lt;br/&gt;
"Elapsed time: 431.272138 msecs" &lt;br/&gt;
"Elapsed time: 430.514649 msecs" &lt;br/&gt;
"Elapsed time: 432.753752 msecs" &lt;br/&gt;
"Elapsed time: 431.195876 msecs" &lt;br/&gt;
"Elapsed time: 435.254274 msecs" &lt;br/&gt;
"Elapsed time: 433.516375 msecs" &lt;/p&gt;

&lt;p&gt;Clojure 1.4.0 snapshot (with better reduce modifications) &lt;br/&gt;
(def ms (zipmap (range 100) (range 100))) &lt;br/&gt;
#'user/ms &lt;br/&gt;
user=&amp;gt; (dotimes &lt;span class="error"&gt;&amp;#91;i 10&amp;#93;&lt;/span&gt; (time (dotimes &lt;span class="error"&gt;&amp;#91;i 100000&amp;#93;&lt;/span&gt; (reduce (fn [acc [k &lt;br/&gt;
v]] (+ acc v)) 0 ms)))) &lt;br/&gt;
"Elapsed time: 202.29696 msecs" &lt;br/&gt;
"Elapsed time: 186.589505 msecs" &lt;br/&gt;
"Elapsed time: 179.691805 msecs" &lt;br/&gt;
"Elapsed time: 184.191644 msecs" &lt;br/&gt;
"Elapsed time: 183.265131 msecs" &lt;br/&gt;
"Elapsed time: 180.162578 msecs" &lt;br/&gt;
"Elapsed time: 182.323219 msecs" &lt;br/&gt;
"Elapsed time: 181.810649 msecs" &lt;br/&gt;
"Elapsed time: 182.896285 msecs" &lt;br/&gt;
"Elapsed time: 187.30153 msecs" &lt;/p&gt;</comment>
                    <comment id="27765" author="mikera" created="Sun, 19 Feb 2012 02:03:48 -0800">&lt;p&gt;better_reduce branch now updated to merge in the latest changes from the clojure/clojure master branch.&lt;/p&gt;</comment>
                    <comment id="27766" author="netguy204" created="Sun, 19 Feb 2012 11:29:45 -0800">&lt;p&gt;Reviewers:&lt;/p&gt;

&lt;p&gt;To make this change easier to review (and for a cleaner history), I mashed all of the commits that make up this change together and rebased that onto the latest from clojure/clojure master.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/netguy204/clojure/tree/better-reduce"&gt;https://github.com/netguy204/clojure/tree/better-reduce&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/netguy204/clojure/commit/b262a69c32d26bb6f3c5ba711310361d77609a22"&gt;https://github.com/netguy204/clojure/commit/b262a69c32d26bb6f3c5ba711310361d77609a22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps.&lt;/p&gt;
</comment>
                    <comment id="27768" author="mikera" created="Sun, 19 Feb 2012 16:24:12 -0800">&lt;p&gt;Awesome, thanks Brian! I must admit that my git-fu is not yet good enough to do things like this, so your help is much appreciated!&lt;/p&gt;</comment>
                    <comment id="27807" author="jafingerhut" created="Wed, 22 Feb 2012 23:52:28 -0800">&lt;p&gt;clj-894-better-reduce-performance-patch1.txt was created from pulling Brian Taylor's Clojure github repo, creating a diff of it, applying it to latest master as of Feb 22, 2012, and making a properly formatted patch from it.  It has only a single commit, and has Mike Anderson's name and email address in it, along with a date of 4 Dec 2011, when it appears he made his final commit of this work.  It compiles and tests cleanly, and I have run Mike's timing experiments and seen similar speed improvements.&lt;/p&gt;

&lt;p&gt;No docstrings need changing that I can think of.  Mike and I have both signed CAs.  I don't see Brian Taylor's name on the list of those who signed a CA, but as long as the patch contains only code that Mike wrote, it should be clean.  Patch status is "Code and Test".&lt;/p&gt;</comment>
                    <comment id="27808" author="jafingerhut" created="Thu, 23 Feb 2012 00:00:08 -0800">&lt;p&gt;Correcting Mike's name and email address in patch.&lt;/p&gt;</comment>
                    <comment id="27812" author="netguy204" created="Thu, 23 Feb 2012 03:08:32 -0800">&lt;p&gt;The patch contains only code that Mike wrote.&lt;/p&gt;</comment>
                    <comment id="27813" author="mikera" created="Thu, 23 Feb 2012 05:32:07 -0800">&lt;p&gt;Thanks guys I've reviewed the patch and can confirm that it looks like exactly the changes I intended to make. I am happy for them to be committed as per my signed CA.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10942" name="clj-894-better-reduce-performance-patch2.txt" size="17763" author="jafingerhut" created="Thu, 23 Feb 2012 00:00:08 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-768] cl-format bug in ~f formatting</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-768</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Carlos Ungil reports a bug in cl-format as follows (&lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/bb235ff4464aed78#):"&gt;http://groups.google.com/group/clojure/browse_thread/thread/bb235ff4464aed78#):&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I don't know if there is a better way to file bug reports (if there is one,&lt;br/&gt;
it's not easy to find).&lt;/p&gt;

&lt;p&gt;(use 'clojure.pprint)&lt;/p&gt;

&lt;p&gt;(let &lt;span class="error"&gt;&amp;#91;x 111.11111&amp;#93;&lt;/span&gt;&lt;br/&gt;
  (doseq [fmt &lt;span class="error"&gt;&amp;#91;&amp;quot;~3f~%&amp;quot; &amp;quot;~4f~%&amp;quot; &amp;quot;~5f~%&amp;quot; &amp;quot;~6f~%&amp;quot;&amp;#93;&lt;/span&gt;]&lt;br/&gt;
    (cl-format true fmt x)))&lt;/p&gt;

&lt;p&gt;;; 111.11111&lt;br/&gt;
;; 111.11111&lt;br/&gt;
;; 111.1&lt;br/&gt;
;; 111.11&lt;/p&gt;

&lt;p&gt;There is clearly a problem in the first two cases, too many digits are being&lt;br/&gt;
printed.&lt;/p&gt;

&lt;p&gt;For reference, this is what common lisp does:&lt;/p&gt;

&lt;p&gt;(let ((x 111.11111))&lt;br/&gt;
  (loop for fmt  in '("&lt;sub&gt;3f&lt;/sub&gt;%" "&lt;sub&gt;4f&lt;/sub&gt;%" "&lt;sub&gt;5f&lt;/sub&gt;%" "&lt;sub&gt;6f&lt;/sub&gt;%")&lt;br/&gt;
do (format t fmt x)))&lt;/p&gt;

&lt;p&gt;;; 111.&lt;br/&gt;
;; 111.&lt;br/&gt;
;; 111.1&lt;br/&gt;
;; 111.11&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Carlos &lt;/p&gt;</description>
                <environment/>
            <key id="14392">CLJ-768</key>
            <summary>cl-format bug in ~f formatting</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="jafingerhut">Andy Fingerhut</assignee>
                                <reporter username="tomfaulhaber">Tom Faulhaber</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Apr 2011 23:08:42 -0700</created>
                <updated>Thu, 23 Feb 2012 01:30:26 -0800</updated>
                                    <version>Release 1.2</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27711" author="jafingerhut" created="Mon, 13 Feb 2012 19:49:54 -0800">&lt;p&gt;Attached patch assumes that &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt; patch has been applied.  It might apply cleanly without &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt; patch being applied first &amp;#8211; I haven't checked.  Fixes the issue originally reported, and several other problems found with cl-format's ~f directive.&lt;/p&gt;</comment>
                    <comment id="27739" author="tomfaulhaber" created="Fri, 17 Feb 2012 07:26:21 -0800">&lt;p&gt;I've reviewed the patch and it looks good to me. Thanks, Andy!&lt;/p&gt;

&lt;p&gt;To clojure/core: please go ahead and accept this patch.&lt;/p&gt;</comment>
                    <comment id="27742" author="jafingerhut" created="Fri, 17 Feb 2012 11:33:52 -0800">&lt;p&gt;Thanks for the review, Tom.  If you have the time, &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt; is shorter, and fixes a different bug.  I do know that if you apply the &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt; recommended patch, and then this one, everything works fine.  If it is helpful, I can try out this one independently, but they are both bugs in the ~f format of cl-format, the other one causing Clojure to throw an exception for some combinations of ~f directives and numerical values.&lt;/p&gt;</comment>
                    <comment id="27810" author="jafingerhut" created="Thu, 23 Feb 2012 01:30:26 -0800">&lt;p&gt;clj-768-without-clj-881-patched-first.txt is the same as the one that Tom reviewed, except it applies cleanly to master as of Feb 23, 2012 without having to first apply the patch for &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt;.  This bug and the patch are really independent of &lt;a href="http://dev.clojure.org/jira/browse/CLJ-881" title="Problem with the &amp;quot;cl-format&amp;quot; function from the clojure.pprint"&gt;CLJ-881&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10907" name="CLJ-768-patch-for-after-CLJ-881-fixed.patch" size="7841" author="jafingerhut" created="Mon, 13 Feb 2012 19:49:54 -0800"/>
                    <attachment id="10944" name="clj-768-without-clj-881-patched-first.txt" size="7889" author="jafingerhut" created="Thu, 23 Feb 2012 01:30:26 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-935] clojure.string/trim uses different defn of whitespace as triml, trimr</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-935</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;clojure.string/triml and trimr use Character/isWhitespace to determine whether a character is whitespace, but trim uses some other definition of white space character.  For example:&lt;/p&gt;

&lt;p&gt;user=&amp;gt; (use 'clojure.string)&lt;br/&gt;
nil&lt;br/&gt;
user=&amp;gt; (def s "  \u2002  foo")&lt;br/&gt;
#'user/s&lt;br/&gt;
user=&amp;gt; (trim s)&lt;br/&gt;
"?  foo"&lt;br/&gt;
user=&amp;gt; (triml s)&lt;br/&gt;
"foo"&lt;/p&gt;

&lt;p&gt;The attached patch changes trim to use Character/isWhitespace.  I suppose other possibilities are to change triml and trimr to use trim's notion of whitespace, whatever that is, or to just leave these functions inconsistent with each other.  It does seem that it would be a nice property that (trim s) is equal to (triml (trimr s)) for all strings.&lt;/p&gt;

&lt;p&gt;The patch also changes triml to only call .length on s once.&lt;/p&gt;</description>
                <environment/>
            <key id="15237">CLJ-935</key>
            <summary>clojure.string/trim uses different defn of whitespace as triml, trimr</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jafingerhut">Andy Fingerhut</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Feb 2012 11:29:54 -0800</created>
                <updated>Tue, 21 Feb 2012 11:29:54 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="10937" name="fix-trim-fns-different-whitespace-patch.txt" size="2731" author="jafingerhut" created="Tue, 21 Feb 2012 11:29:54 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-932] contains? should throw exception on non-keyed collections</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-932</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;The &lt;tt&gt;contains?&lt;/tt&gt; function, given a collection which is not an associative (Map, Set, String, array), returns false instead of throwing an exception.&lt;/p&gt;

&lt;p&gt;This is a subject of confusion when people call &lt;tt&gt;contains?&lt;/tt&gt; on sequential collections like lists, and on associative collections which do not implement the &lt;tt&gt;Associative&lt;/tt&gt; interface.&lt;/p&gt;

&lt;p&gt;Other predicates, such as &lt;tt&gt;even?&lt;/tt&gt;, throw an exception when passed arguments of an invalid type.&lt;/p&gt;</description>
                <environment/>
            <key id="15229">CLJ-932</key>
            <summary>contains? should throw exception on non-keyed collections</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="stuart.sierra">Stuart Sierra</assignee>
                                <reporter username="stuart.sierra">Stuart Sierra</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Feb 2012 13:19:20 -0800</created>
                <updated>Fri, 17 Feb 2012 13:30:57 -0800</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27759" author="stuart.sierra" created="Fri, 17 Feb 2012 13:30:57 -0800">&lt;p&gt;Patch adds fix, adds some tests, and removes tests reflecting the old behavior.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10921" name="CLJ-932-0001.patch" size="1809" author="stuart.sierra" created="Fri, 17 Feb 2012 13:30:57 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-827] unsigned-bit-shift-right</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-827</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Add a clojure equivalent of &amp;gt;&amp;gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;A simple version of this is implemented here (&lt;a href="https://github.com/joegallo/clojure/tree/unsigned-bit-shift-right"&gt;https://github.com/joegallo/clojure/tree/unsigned-bit-shift-right&lt;/a&gt;), and just follows the example set by shift-right.&lt;/p&gt;

&lt;p&gt;The downside of this implementation is that it treats all integer types as longs, and shifts them accordingly, which yields different results than you would get in java.  A previous version of this did not have the same problem, when BitOps was its own thing.  I'm not sure if this limitation is acceptable and appropriate, or needs to be worked around (my inclination is the latter).&lt;/p&gt;</description>
                <environment/>
            <key id="14572">CLJ-827</key>
            <summary>unsigned-bit-shift-right</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="joegallo">Joe Gallo</reporter>
                        <labels>
                    </labels>
                <created>Tue, 9 Aug 2011 09:42:09 -0700</created>
                <updated>Fri, 17 Feb 2012 13:03:44 -0800</updated>
                                                                            <due/>
                    <votes>3</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27276" author="joegallo" created="Fri, 11 Nov 2011 10:58:31 -0800">&lt;p&gt;I just realized (with the asssistance of Paul Stadig) that just doing only longs is probably sufficient, as you can get the integer version if you really want it: &lt;/p&gt;

&lt;p&gt;&amp;gt; (int (bit-and Integer/MAX_VALUE (unsigned-bit-shift-right -5 1)))&lt;br/&gt;
2147483645 &lt;/p&gt;

&lt;p&gt;Of course, that's less efficient than just doing it directly with java, but it's enough that I think my concern from the previous comment is addressed.&lt;/p&gt;
</comment>
                    <comment id="27579" author="timmc" created="Mon, 16 Jan 2012 16:01:02 -0800">&lt;p&gt;I have attached "0001-&lt;a href="http://dev.clojure.org/jira/browse/CLJ-827" title="unsigned-bit-shift-right"&gt;CLJ-827&lt;/a&gt;-Add-bit-shift-right-logical.patch", which implements a logical bit-shift-right using the same JVM bytecode as &amp;gt;&amp;gt;&amp;gt;.&lt;/p&gt;

&lt;p&gt;The patch mimics the implementations of &amp;lt;&amp;lt; and &amp;gt;&amp;gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10694" name="0001-add-unsigned-bit-shift-right.patch" size="2301" author="joegallo" created="Fri, 11 Nov 2011 11:03:06 -0800"/>
                    <attachment id="10776" name="0001-CLJ-827-Add-bit-shift-right-logical.patch" size="3261" author="timmc" created="Mon, 16 Jan 2012 16:01:02 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-902] doc macro broken for namespaces</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-902</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Clojure 1.3.0&lt;br/&gt;
user=&amp;gt; (doc clojure.pprint)&lt;br/&gt;
ClassNotFoundException clojure.pprint  java.net.URLClassLoader$1.run (URLClassLoader.java:366)&lt;/p&gt;

&lt;p&gt;It appears it is not safe to call resolve on a symbol representing a namespace; you get the error above. FWIW, I seem to have resolved the problem (see attached diff) by moving the find-ns clause above the resolve clause (in the cond); also the reference to namespace-doc needs to be var-quoted since namespace-doc is private. &lt;/p&gt;</description>
                <environment/>
            <key id="15088">CLJ-902</key>
            <summary>doc macro broken for namespaces</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="glchapman">Greg Chapman</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Dec 2011 15:35:22 -0800</created>
                <updated>Thu, 16 Feb 2012 22:43:52 -0800</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>1</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27732" author="jafingerhut" created="Thu, 16 Feb 2012 22:43:30 -0800">&lt;p&gt;Verified there is a bug, and that this change fixes it.  New patch is in proper format, and includes a new unit test that would have caught the bug.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10916" name="clj-902-doc-on-namespaces-patch.txt" size="2028" author="jafingerhut" created="Thu, 16 Feb 2012 22:43:30 -0800"/>
                    <attachment id="10755" name="repl.diff" size="595" author="glchapman" created="Wed, 28 Dec 2011 15:35:22 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-909] Make LineNumberingPushbackReader's buffer size configurable</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-909</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;In some situations, it's necessary to configure the buffer size of LineNumberingPushbackReader's wrapped java.io.LineNumberReader, that gets created in the constructor. A concrete problem case is where you want to avoid doing reads from the underlying Reader whenever possible, so using a buffer size of 1 makes it a bit lazier. I can also imagine cases where you'd want to &lt;b&gt;increase&lt;/b&gt; the buffer from java.io.BufferedReader's 8192-char default, but I haven't dealt with that one directly.&lt;/p&gt;

&lt;p&gt;There's no good way to do this by subclassing LineNumberingPushbackReader, since all the action happens in the constructors: those of java.io.LineNumberReader and the superclass of LineNumberingPushbackReader, which is java.io.PushbackReader. So my current workaround is to copy the entirety of LineNumberingPushbackReader, change the name, and add a constructor. Having LineNumberingPushbackReader support this directly would be great.&lt;/p&gt;

&lt;p&gt;Both java.io.LineNumberReader and java.io.PushbackReader have constructors that accept the buffer size as the second argument, so it seems very reasonable to me to add a similar constructor for LineNumberingPushbackReader.&lt;/p&gt;</description>
                <environment/>
            <key id="15111">CLJ-909</key>
            <summary>Make LineNumberingPushbackReader's buffer size configurable</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="trptcolin">Colin Jones</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Jan 2012 17:16:40 -0800</created>
                <updated>Thu, 9 Feb 2012 11:57:22 -0800</updated>
                                    <version>Release 1.2</version>
                <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="27607" author="trptcolin" created="Sun, 22 Jan 2012 16:56:50 -0800">&lt;p&gt;This patch still works great.&lt;/p&gt;

&lt;p&gt;Turns out my current workaround to get around the lack of this ability has a problem: LispReader depends on the concrete LineNumberingPushbackReader class to be able to call .getLineNumber (via instanceof / casting). So the similar (read: nearly-copied) class I'm trying to use can't store line numbers, which makes the stack trace less nice (fwiw, this is in REPL-y: &lt;a href="https://github.com/trptcolin/reply"&gt;https://github.com/trptcolin/reply&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It would be nice to have an interface (ILineNumberingPushbackReader?) that declares getLineNumber, readLine, and atLineStart,  and have things check instanceof on that instead of the concrete class. That way, anyone else adhering to the LineNumberingPushbackReader contract (in order to bind that to &amp;#42;in&amp;#42; as the docstring for `clojure.main/repl` prescribes) can do it and have line numbering play nicely with the Clojure reader.&lt;/p&gt;

&lt;p&gt;If that sounds desirable, I can replace this patch. The existing patch will also work fine if we want to keep things concrete, or if that feels enough like solving a different problem to require another ticket.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10767" name="0001-Allow-custom-buffer-size-in-LineNumberingPushbackRea.patch" size="929" author="trptcolin" created="Wed, 11 Jan 2012 17:16:40 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-753] clojure.string/replace-first returns nil with replacement fn when regex doesn't match</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-753</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;&lt;a href="https://groups.google.com/d/topic/clojure/wDO1u7wRmDQ/discussion"&gt;Originally reported by Takahiro Hozumi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a function as the "replacement" argument, clojure.string/replace-first returns nil if there is no match, instead of returning the original string unchanged.&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;user=&amp;gt; (use 'clojure.string)
nil
user=&amp;gt; (replace-first &lt;span class="code-quote"&gt;"abcdef"&lt;/span&gt; &lt;span class="code-quote"&gt;"ghi"&lt;/span&gt; &lt;span class="code-quote"&gt;"jkl"&lt;/span&gt;)
&lt;span class="code-quote"&gt;"abcdef"&lt;/span&gt;
user=&amp;gt; (replace-first &lt;span class="code-quote"&gt;"abcdef"&lt;/span&gt; #&lt;span class="code-quote"&gt;"ghi"&lt;/span&gt; &lt;span class="code-quote"&gt;"jkl"&lt;/span&gt;)
&lt;span class="code-quote"&gt;"abcdef"&lt;/span&gt;
user=&amp;gt; (replace-first &lt;span class="code-quote"&gt;"abcdef"&lt;/span&gt; #&lt;span class="code-quote"&gt;"ghi"&lt;/span&gt; (fn [a] &lt;span class="code-quote"&gt;"jkl"&lt;/span&gt;))
nil&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment/>
            <key id="14369">CLJ-753</key>
            <summary>clojure.string/replace-first returns nil with replacement fn when regex doesn't match</summary>
                <type id="1" iconUrl="http://dev.clojure.org/jira/images/icons/bug.gif">Defect</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="stuart.sierra">Stuart Sierra</assignee>
                                <reporter username="stuart.sierra">Stuart Sierra</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Mar 2011 05:54:15 -0800</created>
                <updated>Wed, 11 Jan 2012 22:06:50 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26322" author="fbrubacher" created="Mon, 21 Mar 2011 05:36:49 -0700">&lt;p&gt;This is my patch for this issue. I have a CA signed. Any suggestions and i can try again. Federico&lt;/p&gt;</comment>
                    <comment id="27353" author="cperkins" created="Mon, 28 Nov 2011 07:31:31 -0800">&lt;p&gt;Same fix as Frederico's patch, but also removes unnecessary allocation of a StringBuffer when there is no match, for both replace and replace first.&lt;/p&gt;</comment>
                    <comment id="27354" author="cperkins" created="Mon, 28 Nov 2011 07:46:03 -0800">&lt;p&gt;Same again, but with docstring typo fixes too.&lt;/p&gt;</comment>
                    <comment id="27355" author="steveminer@gmail.com" created="Mon, 28 Nov 2011 08:12:17 -0800">&lt;p&gt;You should use StringBuilder instead of StringBuffer.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer-in-java"&gt;http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer-in-java&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27356" author="cperkins" created="Mon, 28 Nov 2011 08:37:56 -0800">&lt;p&gt;Yup, that's what I thought, but it turns out it doesn't work because java's Matcher/appendReplacement requires a StringBuffer, unfortunately.&lt;/p&gt;</comment>
                    <comment id="27360" author="jafingerhut" created="Mon, 28 Nov 2011 15:09:40 -0800">&lt;p&gt;I've tested Chris's clojure-string-with-no-match-returns-original-2.patch against latest github Clojure as of this morning, and the tests pass.  Cool that he found a straightforward performance improvement for the no match case.  The code appears correct.  I also verified that for the reason Chris mentions, StringBuilder will not work as a replacement for StringBuffer.  At least there will never be any contention on the locks implementing the StringBuffer synchronization the way they are used here.&lt;/p&gt;</comment>
                    <comment id="27363" author="stuart.sierra" created="Tue, 29 Nov 2011 06:45:01 -0800">&lt;p&gt;Vetted &amp;amp; moved to Approved Backlog.&lt;/p&gt;</comment>
                    <comment id="27544" author="jafingerhut" created="Wed, 11 Jan 2012 22:06:50 -0800">&lt;p&gt;&lt;a href="http://dev.clojure.org/jira/browse/CLJ-870" title="clojure.string/replace behaves unexpectedly when \ or $ are part of the result string"&gt;CLJ-870&lt;/a&gt; has an attached proposed combined patch for this issue and that one.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10157" name="0001-clojure.string-replace-first-now-returns-the-origina.patch" size="1598" author="fbrubacher" created="Mon, 21 Mar 2011 05:36:49 -0700"/>
                    <attachment id="10721" name="clojure-string-with-no-match-returns-original-2.patch" size="4460" author="cperkins" created="Mon, 28 Nov 2011 07:46:03 -0800"/>
                    <attachment id="10720" name="clojure-string-with-no-match-returns-original.patch" size="3262" author="cperkins" created="Mon, 28 Nov 2011 07:31:31 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-908] Functions with metadata print poorly</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-908</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;1.3 removed the metadata slot on most functions, and made &lt;tt&gt;.withMeta&lt;/tt&gt; return a new wrapping function that provides metadata. This changes the way functions with metadata print: instead of &lt;tt&gt;#&amp;lt;user$eval595$fn_&lt;em&gt;596 user$eval595$fn&lt;/em&gt;_596@3d48ff04&amp;gt;&lt;/tt&gt; we now see &lt;tt&gt;#&amp;lt; clojure.lang.AFunction$1@581de498&amp;gt;&lt;/tt&gt;. I might argue that we should "lie" and print the class of the original wrapped function since it's more useful than AFunction$1, but that's debatable. The two things I propose changing are: &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;When &lt;tt&gt;&amp;#42;print-meta&amp;#42;&lt;/tt&gt; is true, we should print the metadata map for functions. That nothing prints implies there is no metadata, which can make it difficult to track down bugs related to metadata on functions.&lt;/li&gt;
	&lt;li&gt;Remove the errant space at the front of the printed representation of functions with meta, changing &lt;tt&gt;#&amp;lt; clojure.lang.AFunction$1@581de498&amp;gt;&lt;/tt&gt; to &lt;tt&gt;#&amp;lt;clojure.lang.AFunction$1@581de498&amp;gt;&lt;/tt&gt;. The cause of this issue is that &lt;tt&gt;.getSimpleName&lt;/tt&gt; on an object with an anonymous class returns &lt;tt&gt;""&lt;/tt&gt;, and we print that followed by a space and its &lt;tt&gt;.toString&lt;/tt&gt;. My fix is to omit the extra space if the class has no simple name; this would cause instances of other anonymous (non-function) classes to print more nicely as well.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If it would be desirable to print the class of the original "wrapped" function, then I can easily add another patch for that.&lt;/p&gt;</description>
                <environment/>
            <key id="15108">CLJ-908</key>
            <summary>Functions with metadata print poorly</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="amalloy">Alan Malloy</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Jan 2012 15:15:47 -0800</created>
                <updated>Tue, 10 Jan 2012 15:15:47 -0800</updated>
                                    <version>Release 1.3</version>
                <version>Release 1.4</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="10765" name="0001-Print-metadata-and-anonymous-classes-better.patch" size="935" author="amalloy" created="Tue, 10 Jan 2012 15:15:47 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-735] Improve error message when a protocol method is not found</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-735</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;If you call a protocol function but pass the wrong arity (forget an argument for example), you currently a message that says "No single method ... of interface ... found for function ... of protocol ...".  The code in question is getting matching methods from the Reflector and creates this message if the number of matches != 1.  &lt;/p&gt;

&lt;p&gt;There are really two cases there:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;matches == 0 - this happens frequently due to typos&lt;/li&gt;
	&lt;li&gt;matches &amp;gt; 1 - this presumably happens infrequently&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I propose that the == 0 case instead should have slightly different text at the beginning and a hint as to the intended arity within it: &lt;/p&gt;

&lt;p&gt;"No method: ... of interface ... with arity ... found for function ... of protocol ...".  &lt;/p&gt;

&lt;p&gt;The &amp;gt;1 case should have similar changes:  "Multiple methods: ... of interface ... with arity ... found for function ... of protocol ...".&lt;/p&gt;

&lt;p&gt;Patch is attached.  I used case which presumably should have better performance than a nested if/else.  I was not sure whether the reported arity should match the actual Java method arity or Clojure protocol function arity (including the target).  I did the former.&lt;/p&gt;

&lt;p&gt;I did not add a test as I wasn't sure whether checking error messages in tests was appropriate or not.  Happy to add that if requested.&lt;/p&gt;</description>
                <environment/>
            <key id="14348">CLJ-735</key>
            <summary>Improve error message when a protocol method is not found</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="alexmiller">Alex Miller</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Feb 2011 12:52:40 -0800</created>
                <updated>Fri, 9 Dec 2011 08:05:55 -0800</updated>
                                    <version>Release 1.2</version>
                                <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26570" author="cemerick" created="Thu, 14 Jul 2011 04:39:26 -0700">&lt;blockquote&gt;&lt;p&gt;I was not sure whether the reported arity should match the actual Java method arity or Clojure protocol function arity (including the target). I did the former.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it should be the latter.  The message is emitted when the protocol methods are being invoked through the corresponding function, so it should be consistent with the errors emitted by regular functions.&lt;/p&gt;

&lt;p&gt;+1 for some tests, too.  There certainly are tests for reflection warnings and such.&lt;/p&gt;

&lt;p&gt;FWIW, I'm happy to take this on if Alex is otherwise occupied.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10107" name="protocolerr.diff" size="1965" author="alexmiller" created="Fri, 4 Feb 2011 12:52:40 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-863] interleave should accept 1 or 0 arguments</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-863</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;interleave should handle 0 and 1 arguments in the same way that concat does (i.e., 0 args --&amp;gt; empty seq, 1 args --&amp;gt; identity).&lt;/p&gt;</description>
                <environment/>
            <key id="14807">CLJ-863</key>
            <summary>interleave should accept 1 or 0 arguments</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="5" iconUrl="http://dev.clojure.org/jira/images/icons/priority_trivial.gif">Trivial</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="joegallo">Joe Gallo</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Oct 2011 12:50:34 -0700</created>
                <updated>Fri, 9 Dec 2011 07:46:13 -0800</updated>
                                    <version>Release 1.3</version>
                                <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>4</votes>
                        <watches>1</watches>
                                <attachments>
                    <attachment id="10496" name="0001-make-interleave-handle-odd-arugments-in-the-same-man.patch" size="1247" author="joegallo" created="Mon, 24 Oct 2011 12:50:36 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-745] gen-class should allow exposes-methods to expose protected final methods</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-745</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Currently, there is no way in Clojure to call a protected final method of a superclass.  While this may be an acceptable limitation for proxy, gen-class should provide that ability.  Otherwise, one is now forced to create a dummy subclass in Java for the sole purpose of widening the visibility of such methods.&lt;/p&gt;

&lt;p&gt;My patch makes it so that protected final methods may be exposed via the :exposes-methods mechanism.  It is still impossible to override them.&lt;/p&gt;</description>
                <environment/>
            <key id="14359">CLJ-745</key>
            <summary>gen-class should allow exposes-methods to expose protected final methods</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="dsg">Daniel Solano Gómez</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Feb 2011 11:48:38 -0800</created>
                <updated>Fri, 9 Dec 2011 07:46:13 -0800</updated>
                                    <version>Release 1.2</version>
                                <fixVersion>Reviewed Backlog</fixVersion>
                                        <due/>
                    <votes>2</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="27311" author="chouser@n01se.net" created="Sat, 19 Nov 2011 14:13:22 -0800">&lt;p&gt;Updated patch to apply cleanly to Clojure 1.4 SNAPSHOT.  Included tests look good and pass.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10708" name="expose-protected-final-gen-class-clojure1.4.diff" size="5576" author="chouser@n01se.net" created="Sat, 19 Nov 2011 14:13:22 -0800"/>
                    <attachment id="10120" name="expose-protected-final-gen-class.diff" size="5705" author="dsg" created="Fri, 25 Feb 2011 11:48:39 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-322] Enhance AOT compilation process to emit classfiles only for explicitly-specified namespaces</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-322</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;This was &lt;a href="https://www.assembla.com/spaces/clojure-contrib/tickets/23"&gt;originally/erroneously reported&lt;/a&gt; by Howard Lewis Ship in the clojure-contrib assembla:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;My build file specifies the namespaces to AOT compile but &lt;span class="code-keyword"&gt;if&lt;/span&gt; I include another namespace
(even from a JAR dependency) that is not AOT compiled, the other namespace will be compiled as well.

In my &lt;span class="code-keyword"&gt;case&lt;/span&gt;, I was using clojure-contrib's clojure.contrib.str-utils2 namespace, and I got a bunch of
clojure/contrib/str_utils2 classes in my output directory.

I think that the AOT compiler should NOT precompile any namespaces that are transitively reached,
only namespaces in the set specified by the command line are appropriate.

As currently coded, you will frequently find unwanted third-party dependencies in your output JARs;
further, &lt;span class="code-keyword"&gt;if&lt;/span&gt; multiple parties depend on the same JARs, &lt;span class="code-keyword"&gt;this&lt;/span&gt; could cause bloating and duplication in the
eventual runtime classpath.&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having the option of shipping either all AOT-compiled classfiles or mixed source/AOT depending upon one's distribution requirements would make that phase of work with a clojure codebase significantly easier and less error-prone.  The only question in my mind is what the default should be.  We're all used to the current behaviour, but I'd guess that any nontrivial project where the form of the distributable matters (i.e. the source/AOT mix), providing as much control as possible by default makes the most sense.  Given the tooling that most people are using, it's trivial (and common practice, IIUC) to provide a comprehensive list of namespaces one wishes to compile, so making that the default shouldn't be a hurdle to anyone.  If an escape hatch is desired, a --transitive switch to clojure.lang.Compile could be added.&lt;/p&gt;</description>
                <environment/>
            <key id="13719">CLJ-322</key>
            <summary>Enhance AOT compilation process to emit classfiles only for explicitly-specified namespaces</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="3" iconUrl="http://dev.clojure.org/jira/images/icons/status_inprogress.gif">In Progress</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="cemerick">Chas Emerick</assignee>
                                <reporter username="cemerick">Chas Emerick</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Apr 2010 22:20:00 -0700</created>
                <updated>Fri, 2 Dec 2011 06:12:21 -0800</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>5</votes>
                        <watches>7</watches>
                        <comments>
                    <comment id="23775" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;Converted from &lt;a href="http://www.assembla.com/spaces/clojure/tickets/322"&gt;http://www.assembla.com/spaces/clojure/tickets/322&lt;/a&gt;&lt;br/&gt;
Attachments:&lt;br/&gt;
aot-transitivity-option-compat-322.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aI7Eu-HeGr35ImeJe5cbLA/download/aI7Eu-HeGr35ImeJe5cbLA"&gt;https://www.assembla.com/spaces/clojure/documents/aI7Eu-HeGr35ImeJe5cbLA/download/aI7Eu-HeGr35ImeJe5cbLA&lt;/a&gt;&lt;br/&gt;
aot-transitivity-option-322.diff - &lt;a href="https://www.assembla.com/spaces/clojure/documents/aIWFiWHeGr35ImeJe5cbLA/download/aIWFiWHeGr35ImeJe5cbLA"&gt;https://www.assembla.com/spaces/clojure/documents/aIWFiWHeGr35ImeJe5cbLA/download/aIWFiWHeGr35ImeJe5cbLA&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="23776" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;hlship said: I'd like to reinforce this.  I've been doing research on Clojure build tools for an upcoming talk and all of them (Maven, Leiningen, Gradle) have the same problem: the AOT compile extends from the desired namespaces (such as one containing a :gen-class)  to every reached namespace.  This is going to cause a real ugliness when application A uses libraries B and C that both depend on library D (such as clojure-contrib) and B and C are thus both bloated with duplicate, unwanted AOT compiled  classes from the library D.&lt;/p&gt;</comment>
                    <comment id="23777" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: This behaviour is an implementation detail of Clojure's AOT compilation process, and is orthogonal to any particular build tooling.&lt;/p&gt;

&lt;p&gt;I am working on a patch that would provide a mechanism for such tooling to disable this default behaviour.&lt;/p&gt;</comment>
                    <comment id="23778" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: A first cut of a change to address this issue is here (&lt;b&gt;caution, work in progress!&lt;/b&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/cemerick/clojure/commit/6f14e0790c0d283a7e44056adf1bb3f36bb16e0e"&gt;http://github.com/cemerick/clojure/commit/6f14e0790c0d283a7e44056adf1bb3f36bb16e0e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This makes available a new recognized system property, &lt;tt&gt;clojure.compiler.transitive&lt;/tt&gt;, which defaults to &lt;tt&gt;true&lt;/tt&gt;.  When set/bound to false (i.e. &lt;tt&gt;-Dclojure.compiler.transitive=false&lt;/tt&gt; when using &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt;), only the first loaded file (either the ns named in the call to &lt;tt&gt;compile&lt;/tt&gt; or each of the namespaces named as arguments to &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt;) will have classfiles written to disk.&lt;/p&gt;

&lt;p&gt;This means that this compilation invocation:&lt;/p&gt;
&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;java -cp &amp;lt;your classpath&amp;gt; -Dclojure.compiler.transitive=&lt;span class="code-keyword"&gt;false&lt;/span&gt; clojure.lang.Compile com.bar com.baz&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will generate classfiles only for &lt;tt&gt;com.bar&lt;/tt&gt; and &lt;tt&gt;com.baz&lt;/tt&gt;, but not for any of the namespaces or other files they load, require, or use.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The only shortcoming of this WIP patch is that classfiles &lt;b&gt;are&lt;/b&gt; still generated for proxy and gen-class classes defined outside of the explicitly-named namespaces.  What I thought was a solution for this ended up breaking the loading of generated interfaces (as produced by defprotocol, etc).&lt;/p&gt;

&lt;p&gt;I'll take a second look at this before the end of the week, but wanted to get this out there so as to get any comments people might have.&lt;/p&gt;</comment>
                    <comment id="23779" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;technomancy said: Looks good, but I'm having trouble getting it to work. I tried compiling from master of Chas's fork on github, but I still got the all the .class files generated with -Dclojure.compiler.transitive=false. It could be a quirk of the way I'm using ant to fork off processes though. Is it possible to set it using System/setProperty, or must it be given as a property on the command-line?&lt;/p&gt;</comment>
                    <comment id="23780" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: Bah, that's just bad documentation. :-/&lt;/p&gt;

&lt;p&gt;The system property is only provided by &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt;; the value of it drives the binding of &lt;tt&gt;clojure.core/&lt;b&gt;transitive-compile&lt;/b&gt;&lt;/tt&gt;, which has a root binding of true.&lt;/p&gt;

&lt;p&gt;You should be able to configure the transitivity the same way you configure &lt;tt&gt;&lt;b&gt;compile-path&lt;/b&gt;&lt;/tt&gt; (system prop to &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt; or a direct binding when at the REPL, etc).&lt;/p&gt;

&lt;p&gt;If not, ping me in irc or elsewhere.&lt;/p&gt;</comment>
                    <comment id="23781" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;meikelbrandmeyer said: I think, excluding parts 'load'ed is a little strong. I have some namespaces which load several parts from different files, but which belong to the same namespace. The most prominent example of such a case is clojure.core itself. I'm find with stopping require and use, but load is a bit too much, I'd say.&lt;/p&gt;</comment>
                    <comment id="23782" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;technomancy said: Chas: Thanks; will give that a go.&lt;/p&gt;

&lt;p&gt;Meikel: Do people actually use load outside of clojure.core? I thought it was only used there because clojure.core is a "special" namespace where you want more vars to be available than can reasonably fit in a single file. Splitting up a namespace into several files is quite unadvisable otherwise.&lt;/p&gt;</comment>
                    <comment id="23783" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;technomancy said: I can confirm that this works for me modulo the proxy/gen-class issue that Chas mentioned. I would love to see this in Clojure 1.2; it would really clean up a lot of build-related issues.&lt;/p&gt;</comment>
                    <comment id="23784" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;meikelbrandmeyer said: I used it several times and this is the first time, I hear that it is unadvisable to do so. Even with a lower number of Vars in the namespace (c.c is here certainly exceptional) and might be of use to split several "sections" of code which belong to the same namespace but have different functionality. Whether to use a big comment in the source to indicate the section or split things into subfiles is a matter of taste. But it's a perfectly reasonable thing todo.&lt;/p&gt;

&lt;p&gt;Another use case, where I use this (and c.c.lazy-xml, IIRC) is to conditionally load code depending on whether a dependency is available or not. Eg. vimclojure uses c.c.pprint and c.c.stacktrace/clj-stacktrace transparently depending on their availability.&lt;/p&gt;

&lt;p&gt;There are perfectly legal uses of load. I don't see any "unadvisable" here.&lt;/p&gt;</comment>
                    <comment id="23785" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: Thanks, Meikel; I had forgotten about that use case, as I don't use load directly myself at all.  I probably wouldn't say it's inadvisable, just mostly unnecessary.  In any case, that's a good catch.  It complicates things a bit, but we'll see what happens.  I'm going to take another whack at resolving the proxy/gen-class case and narrowing the impact of nontransitivity to use and require later tonight.&lt;/p&gt;

&lt;p&gt;I agree wholeheartedly that this should be in 1.2, assuming the technical bits work out.  This has been an irritant for quite a long time.  I actually believe that nontransitivity should be the &lt;b&gt;default&lt;/b&gt; &amp;#8211; no one wants or expects to have classfiles show up for dependencies show up when a project is AOT-compiled.  I think the only negative impact would be whoever still fiddles with compilation at the REPL, and doesn't use maven or lein &amp;#8211; and even then, it's just a matter of binding another var.&lt;/p&gt;</comment>
                    <comment id="23786" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;meikelbrandmeyer said: Then the var should be added to the default bindings in the clojure.main repl. Then it's set!-able like the other vars ��� &lt;b&gt;warn-on-reflection&lt;/b&gt; and friends.&lt;/p&gt;</comment>
                    <comment id="23787" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: This is looking pretty good (&lt;b&gt;still WIP&lt;/b&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/cemerick/clojure/commit/fedfb022ecef420a932b3d69c182ec7a8e5960a6"&gt;http://github.com/cemerick/clojure/commit/fedfb022ecef420a932b3d69c182ec7a8e5960a6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you again for mentioning load, Meikel: it was very helpful in resolving the proxy/gen-class issue as well.&lt;/p&gt;

&lt;p&gt;Just a single data point: the jar produced by the medium-sized project I've been using for testing the changes has shrunk from 1.8MB to less than 1MB.  That's not the only reason this is a good change, but it's certainly a nice side-effect.&lt;/p&gt;</comment>
                    <comment id="23788" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: [&lt;a href="file:aIWFiWHeGr35ImeJe5cbLA"&gt;file:aIWFiWHeGr35ImeJe5cbLA&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23789" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: [&lt;a href="file:aI7Eu-HeGr35ImeJe5cbLA"&gt;file:aI7Eu-HeGr35ImeJe5cbLA&lt;/a&gt;]&lt;/p&gt;</comment>
                    <comment id="23790" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: Patched attached.  The &lt;del&gt;compat&lt;/del&gt; one retains the current default behaviour &lt;span class="error"&gt;&amp;#91;*transitive-compile* true&amp;#93;&lt;/span&gt;, the other changes the default so that transitivity is a non-default option.  At least of those I've spoken to about this, the latter is preferred.&lt;/p&gt;

&lt;p&gt;The user impact of changing the default would be:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;The result of compiling from the REPL will change. Getting back current behaviour would require adding a &lt;span class="error"&gt;&amp;#91;*transitive-compile* true&amp;#93;&lt;/span&gt; binding to the existing bindings one must set when compiling from the REPL.&lt;/li&gt;
	&lt;li&gt;The same as #1 goes for those scripting AOT compilation via &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt; as well (whether by shell scripts, ant, etc).&lt;/li&gt;
	&lt;li&gt;Those using lein, clojure-maven-plugin, gradle, and others will likely have a new option provided by those tools, and perhaps a different default than the language's.  I suspect those using such tools would much prefer a change from the default behaviour in any case.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="23791" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;hlship said: Just had a brain-storm:&lt;/p&gt;

&lt;p&gt;How about an option to support  transitive compilation, but only if the Clojure source file being compiled as a file: URL (i.e., its a local file on the file system, not a file stored in a JAR). That would make it easier to use compilation on the local project without transitively compiling imported libraries, such as clojure-contrib.&lt;/p&gt;

&lt;p&gt;So &lt;b&gt;transitive-compile&lt;/b&gt; should be a keyword, not a boolean, with values :all (for 1.1 behavior), :none (to compile only the exact specified namespaces) or :local (to compile transitively, but only for local files, not source files from JARs).&lt;/p&gt;</comment>
                    <comment id="23792" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;cemerick said: (Crossposted to the clojure-dev list)&lt;/p&gt;

&lt;p&gt;I thought about this some, and I don't think that's a good idea, at least for now.  I'm uncomfortable with semantics changing depending upon where code is being loaded from &amp;#8211; which, depending upon a tool's implementation, might be undefined.  E.g. if the com.foo.bar ns is available in source form in one directory, but as classes from a jar, and classpaths aren't being constructed in a stable fashion, then the results of compilation will change.&lt;/p&gt;

&lt;p&gt;If we decide that special treatment depending upon the source of code is warranted in the future, that's a fairly straightforward thing to do w.r.t. the API &amp;#8211; we could have :all and :local as you suggest, with nil representing :none.&lt;/p&gt;</comment>
                    <comment id="23793" author="importer" created="Mon, 27 Sep 2010 22:18:00 -0700">&lt;p&gt;stu said: Rich is not comfortable enough with the implementation complexity of this patch (e.g. the guard clause for proxies and gen-class) to slide this in as a minor fix under the wire for 1.2. &lt;/p&gt;

&lt;p&gt;Better to live with the pain we know a little longer than ship something we don't have enough experience with to be confident.&lt;/p&gt;</comment>
                    <comment id="25949" author="cemerick" created="Fri, 19 Nov 2010 19:28:37 -0800">&lt;p&gt;Updated patch to cleanly apply to HEAD and address issues raised by screening done by &lt;a href="http://groups.google.com/group/clojure-dev/msg/0771729b72e04c9e"&gt;Cosmin Stejerean&lt;/a&gt;.  Also includes proper tests.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note: this patch's tests require the fix for&lt;/b&gt; &lt;a href="http://dev.clojure.org/jira/browse/CLJ-432" title="deftype does not work if containing ns contains dashes"&gt;&lt;del&gt;CLJ-432&lt;/del&gt;&lt;/a&gt;!&lt;/p&gt;</comment>
                    <comment id="25971" author="stu" created="Mon, 29 Nov 2010 05:18:41 -0800">&lt;p&gt;the "-resolved" patch resolves a conflict in main.clj&lt;/p&gt;</comment>
                    <comment id="25972" author="stu" created="Mon, 29 Nov 2010 05:25:20 -0800">&lt;p&gt;Several questions:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I am getting an ant build error: "/Users/stuart/repos/clojure/build.xml:137: java.io.FileNotFoundException: Could not locate clojure/test_clojure/aot/nontransitive__init.class or clojure/test_clojure/aot/nontransitive.clj on classpath:"&lt;/li&gt;
	&lt;li&gt;It feels icky to have a method named writeClassFile that, under some circumstances, does &lt;b&gt;not&lt;/b&gt; write a class file, but instead loads it via a dynamic loader. Maybe this is just a naming issue.&lt;/li&gt;
	&lt;li&gt;Are there any other ways to accomplish the goals of &lt;tt&gt;&lt;b&gt;load-level&lt;/b&gt;&lt;/tt&gt;? Or, taking the other side, if we are going to have a &lt;b&gt;load-level&lt;/b&gt;, are there other possible consumers who might have different needs?&lt;/li&gt;
	&lt;li&gt;(Minor) Why the &lt;tt&gt;use :only&lt;/tt&gt; idiom instead of just &lt;tt&gt;require&lt;/tt&gt;?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="26023" author="stuart.sierra" created="Fri, 10 Dec 2010 13:34:32 -0800">&lt;p&gt;An alternative approach: patch write-classes-1.diff.gz&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://github.com/stuartsierra/clojure/tree/write-classes"&gt;my forked branch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What this patch does:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Keeps 'compile' and '&lt;b&gt;compile-files&lt;/b&gt;' exactly the same&lt;/li&gt;
	&lt;li&gt;Adds 'compile-write-classes' to write .class files for specifically named classes&lt;/li&gt;
	&lt;li&gt;Minor compiler changes to support this&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This approach was prompted by the following observations:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Java interop is the dominant reason for needing .class files&lt;/li&gt;
	&lt;li&gt;Things other than namespaces can generate classes for Java interop:
	&lt;ul&gt;
		&lt;li&gt;deftype/defrecord&lt;/li&gt;
		&lt;li&gt;defprotocol&lt;/li&gt;
		&lt;li&gt;gen-class/gen-interface&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;For library releases, we want to control which .class files are emitted on a per-class basis, not per-namespace&lt;/li&gt;
	&lt;li&gt;Some legitimate uses of AOT compilation will want transitive compilation
	&lt;ul&gt;
		&lt;li&gt;Pre-compiling an entire application before release&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="26024" author="cemerick" created="Fri, 10 Dec 2010 14:04:25 -0800">&lt;p&gt;S. Halloway: My apologies, I didn't know you had commented.  I thought that, having assigned this issue to myself, I'd be notified of updates. &lt;img class="emoticon" src="http://dev.clojure.org/jira/images/icons/emoticons/sad.gif" height="20" width="20" align="absmiddle" alt="" border="0"/&gt;&lt;/p&gt;

&lt;p&gt;FWIW, I aim to review your comments and SS' approach over the weekend.&lt;/p&gt;</comment>
                    <comment id="26035" author="cemerick" created="Thu, 16 Dec 2010 05:36:22 -0800">&lt;p&gt;S. Halloway:&lt;/p&gt;

&lt;p&gt;1. Certainly shouldn't happen.  AFAIK, others have screened the patch, presumably with a successful build.&lt;br/&gt;
2. Agreed; given the approach, I think it's just a bad name.&lt;br/&gt;
3. Yes, I think S. Sierra's is one.  See my next comment.&lt;br/&gt;
4. Because the &lt;tt&gt;:use&lt;/tt&gt; form was already there. I've actually been using that form of &lt;tt&gt;:use&lt;/tt&gt; more and more; I've found that easier than occasionally having to shuffle around specs between &lt;tt&gt;:use&lt;/tt&gt; and &lt;tt&gt;:require&lt;/tt&gt;. I think I'm aping Chris Houser in that regard.&lt;/p&gt;</comment>
                    <comment id="26036" author="cemerick" created="Thu, 16 Dec 2010 07:00:03 -0800">&lt;p&gt;I think S. Sierra's approach is fundamentally superior what I offered.  I have two suggestions: one slight perspective change (which implies no change in the actual implementation), and an idea for an even simpler approach (at least from a user perspective), in that order.&lt;/p&gt;

&lt;p&gt;While interop is the driving requirement behind AOT, I absolutely do not want to have to keep an updated enumeration of all of the classes resulting from each and every &lt;tt&gt;defrecord&lt;/tt&gt; et al. usages in my &lt;tt&gt;pom.xml&lt;/tt&gt;/&lt;tt&gt;project.clj&lt;/tt&gt; (and I wouldn't wish the task of ferreting those usages and their resulting classnames on any build tool author).&lt;/p&gt;

&lt;p&gt;Right now, &lt;tt&gt;&amp;#42;compile-write-classes&amp;#42;&lt;/tt&gt; is documented to be a set of classname strings, but could just as easily be any other function.  &lt;tt&gt;&amp;#42;compile-write-classes&amp;#42;&lt;/tt&gt; should be documented to accept any predicate function (renamed to e.g. &lt;tt&gt;&amp;#42;compile-write-class?&amp;#42;&lt;/tt&gt;?).  There's no reason why it shouldn't be bound to, e.g. &lt;tt&gt;#(re-matches #"foo\.bar\.[\w&amp;#95;]+$" %)&lt;/tt&gt; if I know that all my records are defined in the &lt;tt&gt;foo.bar&lt;/tt&gt; namespace.&lt;/p&gt;

&lt;p&gt;To go along with that, I think some package/classname-globbing utilities along with corresponding options to &lt;tt&gt;clojure.lang.Compile&lt;/tt&gt; would be most welcome.  Classname munging rules are not exactly obvious, and it'd be good to make things a little easier for users in this regard.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5&gt;&lt;a name="Anotheralternative"&gt;&lt;/a&gt;Another alternative&lt;/h5&gt;
&lt;p&gt;If there's a closed set of forms that generate classes that one might reasonably be interested in having in a build result (outside of use cases for pervasive AOT), then why not have a simple option that only those forms utilize?  &lt;tt&gt;gen-class&lt;/tt&gt; and &lt;tt&gt;gen-interface&lt;/tt&gt; already do this, but reusing the all-or-nothing &lt;tt&gt;&amp;#42;compile-files&amp;#42;&lt;/tt&gt; binding; if they keyed off of a binding that implied a diminished scope (e.g. &lt;tt&gt;&amp;#42;compile-interop-forms&amp;#42;&lt;/tt&gt; – which would be &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;&amp;#42;compile-files&amp;#42;&lt;/tt&gt; were &lt;tt&gt;true&lt;/tt&gt;), then they'd do exactly what we wanted.  Extending this approach to &lt;tt&gt;deftype&lt;/tt&gt; (and therefore &lt;tt&gt;defrecord&lt;/tt&gt;) &lt;em&gt;should&lt;/em&gt; be straightforward.&lt;/p&gt;

&lt;p&gt;An implementation of this would probably be somewhat more complicated than S. Sierra's patch, though not as complex as my original stab at the problem (i.e. no &lt;tt&gt;&amp;#42;load-level&amp;#42;&lt;/tt&gt;).  On the plus side:&lt;/p&gt;

&lt;p&gt;1. No additional configuration for users or implementation work for build tool authors, aside from the addition of the boolean diminished-scope AOT option&lt;br/&gt;
2. Class file generation would remain opaque from a build process standpoint&lt;br/&gt;
3. Future/other class-generating forms (there are a few people futzing with ASM independently, etc) can make local decisions about whether or not to participate in interop-centric classfile generation.  This might be particularly helpful if a given form emits multiple classes, making the determination of a classname-based filter fn less straightforward.&lt;/p&gt;

&lt;p&gt;I can see wanting to further restrict AOT to specific classnames in certain circumstances, in which case the above and S. Sierra's patch might be complimentary.&lt;/p&gt;</comment>
                    <comment id="26037" author="stuart.sierra" created="Thu, 16 Dec 2010 09:49:12 -0800">&lt;p&gt;I like the idea of &lt;tt&gt;&amp;#42;compile-interop-forms&amp;#42;&lt;/tt&gt;.  But is it always possible to determine what an "interop form" is?  I &lt;em&gt;think&lt;/em&gt; it is, I'm just not sure.&lt;/p&gt;</comment>
                    <comment id="26915" author="arohner" created="Sun, 9 Oct 2011 10:50:17 -0700">&lt;p&gt;I'm also in favor of compile-interop-forms. As far as determining, how about sticking metadata on the var?&lt;/p&gt;

&lt;p&gt;(defmacro ^{:interop-form true} deftype ...)&lt;/p&gt;</comment>
                    <comment id="27077" author="stuart.sierra" created="Fri, 21 Oct 2011 06:38:31 -0700">&lt;p&gt;Summary and design discussion on wiki at &lt;a href="http://dev.clojure.org/display/design/Transitive+AOT+Compilation"&gt;http://dev.clojure.org/display/design/Transitive+AOT+Compilation&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="27367" author="stuart.sierra" created="Tue, 29 Nov 2011 16:54:01 -0800">&lt;p&gt;New attachment &lt;tt&gt;compile-interop-1.patch&lt;/tt&gt; has new approach: Add a third possible value for &lt;tt&gt;&amp;#42;compile-files&amp;#42;&lt;/tt&gt;. True and false keep their original meanings, but &lt;tt&gt;:interop&lt;/tt&gt; causes &lt;b&gt;only&lt;/b&gt; interop-related forms to be written out as .class files. "Interop forms" are gen-class, gen-interface, deftype, defrecord, defprotocol, and definterface.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;doesn't change existing behavior&lt;/li&gt;
	&lt;li&gt;handles common case for non-transitive AOT (interop)&lt;/li&gt;
	&lt;li&gt;minimal changes to the compiler&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;not flexible&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="27385" author="stuart.sierra" created="Fri, 2 Dec 2011 06:12:21 -0800">&lt;p&gt;Just realized my patch doesn't solve the transitive compilation problem. If library A loads library B, then compiling interop forms in A will also emit interop .class files in B.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10035" name="0322-limit-aot-resolved.patch" size="11559" author="stu" created="Mon, 29 Nov 2010 05:18:41 -0800"/>
                    <attachment id="10024" name="CLJ-322.diff" size="11478" author="cemerick" created="Fri, 19 Nov 2010 19:28:37 -0800"/>
                    <attachment id="10723" name="compile-interop-1.patch" size="1443" author="stuart.sierra" created="Tue, 29 Nov 2011 16:54:01 -0800"/>
                    <attachment id="10050" name="write-classes-1.diff.gz" size="1620" author="stuart.sierra" created="Fri, 10 Dec 2010 13:34:31 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Approval</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10003">Vetted</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:userpicker">
                <customfieldname>Waiting On</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>cemerick</customfieldvalue>
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>

<item>
            <title>[CLJ-865] Macroexpansion discards &amp;form metadata</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-865</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;As discussed in &lt;a href="http://groups.google.com/group/clojure/browse_thread/thread/2690cb6ca0e8beb8"&gt;http://groups.google.com/group/clojure/browse_thread/thread/2690cb6ca0e8beb8&lt;/a&gt; there is a "surprise factor" when type-hinting an expression that represents a macro, such as with (.length ^String (doto (identity "x") prn)). Here the doto macro discards the metadata on &amp;amp;form, causing a reflective lookup. This has the effect that while expressions representing function calls can be type-hinted, expressions representing macros in general cannot. The doto macro could be rewritten to respect its &amp;amp;form metadata, but doing this for every macro in existence would be tedious and error-prone. Instead, I propose a change to the compiler, to cause macroexpansion to hang onto the metadata automatically.&lt;/p&gt;

&lt;p&gt;The first patch attached adds a test for the behavior I propose: this test fails. After applying the second patch, the test passes.&lt;/p&gt;

&lt;p&gt;There are a couple points that merit further consideration before accepting my patch:&lt;/p&gt;
&lt;ul class="alternate" type="square"&gt;
	&lt;li&gt;I'm not sure I actually got the Java code formatted correctly. My editor is not well-configured to get the clojure/core style right automatically.&lt;/li&gt;
	&lt;li&gt;My solution is to take the &amp;amp;form metadata, drop :line/:file keys, and then merge with the returned metadata, with &amp;amp;form taking precedence. I'm not sure whether this is the right approach in all cases, even though it works for :tag metadata.&lt;/li&gt;
	&lt;li&gt;I achieved this with a change to the compiler, which makes it fairly heavy-weight. It should be possible to instead adjust defmacro if changes to the compiler are not desirable. However, I believe this would involve substantially more work and be harder to test (for example, multiple arities complicate things). It seems nicer to treat the macroexpansion as a black box and then make metadata tweaks to the result, rather than modifying their actual defmacro code.&lt;/li&gt;
	&lt;li&gt;If a macro expands to something that is not an IObj, such as an Integer, then my patch silently discards the caller's metadata. Would it be better to throw an exception?&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment/>
            <key id="14901">CLJ-865</key>
            <summary>Macroexpansion discards &amp;form metadata</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="3" iconUrl="http://dev.clojure.org/jira/images/icons/priority_major.gif">Major</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="amalloy">Alan Malloy</reporter>
                        <labels>
                        <label>Compiler</label>
                    </labels>
                <created>Wed, 26 Oct 2011 13:19:11 -0700</created>
                <updated>Sun, 20 Nov 2011 20:43:45 -0800</updated>
                                                                            <due/>
                    <votes>3</votes>
                        <watches>4</watches>
                        <comments>
                    <comment id="27176" author="amalloy" created="Thu, 27 Oct 2011 23:12:50 -0700">&lt;p&gt;So I went ahead and did the work of making this change in clojure.core/defmacro instead of clojure.lang.Compiler/macroexpand1. It was even worse than I expected: I didn't realize we don't yet have syntax-quote or apply at this stage in bootstrapping, so writing a non-trivial macroexpansion requires a huge amount of (list `foo (list `bar 'local-name)) and so forth.&lt;/p&gt;

&lt;p&gt;I'm sure the version I wrote is not optimal, but it seemed simpler to piggyback on defn, and then use alter-var-root to shim the metadata management in, than it would have been to expand to the correct thing in the first place.&lt;/p&gt;

&lt;p&gt;Anyway, attached patch #3 could be applied instead of #2 to resolve the issue in clojure.core instead of clojure.lang. The tests added in patch #1 pass either way.&lt;/p&gt;</comment>
                    <comment id="27286" author="amalloy" created="Sun, 13 Nov 2011 18:29:06 -0800">&lt;p&gt;I realized I can do this with a named private function instead of an anonymous function, reducing the amount of mess defmacro itself has to generate. Patch 4 is, I think, strictly better than Patch 3, if a Clojure implementation is preferred to one in Java.&lt;/p&gt;</comment>
                    <comment id="27331" author="chouser@n01se.net" created="Sun, 20 Nov 2011 20:43:45 -0800">&lt;p&gt;I prefer patch 0002 in Java over either 0003 or 0004. Patch 0002 keeps the knowledge of how to invoke macro fns (specifically the extra &amp;amp;form and &amp;amp;env args) in one place, macroexpand1 rather than duplicating that knowledge in core.clj as well. Note patch 0001 is just tests.&lt;/p&gt;

&lt;p&gt;The proposed default macroexpansion behavior is more useful than what we currently have, but there are two details I'd like to think about a bit more:&lt;/p&gt;

&lt;p&gt;1) In exchange for a more useful default, macro writers lose the ability to consume their &amp;amp;form metadata and have control over the resulting form metadata without the &amp;amp;form metadata overridding it. That is, macros are no longer in complete control of their output form.&lt;/p&gt;

&lt;p&gt;2) Rule (1) above has hardcoded exceptions for :line and :file, where &amp;amp;form metadata is unable to override the results returned by the macro.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10590" name="0001-Add-test-for-macroexpansion-metadata-preservation.patch" size="1258" author="amalloy" created="Wed, 26 Oct 2011 13:19:11 -0700"/>
                    <attachment id="10591" name="0002-Preserve-form-metadata-on-macroexpanded-forms.patch" size="1571" author="amalloy" created="Wed, 26 Oct 2011 13:19:11 -0700"/>
                    <attachment id="10592" name="0003-Make-defmacro-preserve-form-metadata.patch" size="3898" author="amalloy" created="Thu, 27 Oct 2011 23:12:50 -0700"/>
                    <attachment id="10703" name="0004-Another-stab-at-implementing-this.patch" size="3397" author="amalloy" created="Sun, 13 Nov 2011 18:29:06 -0800"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-858] Improve speed of STM by removing System.currentTimeMillis</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-858</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Original post: &lt;a href="https://groups.google.com/d/topic/clojure/kc99LcUK8Tk/discussion"&gt;https://groups.google.com/d/topic/clojure/kc99LcUK8Tk/discussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This patch removes the milliseconds from inner class TVal in LockingTransaction.java and Ref.java.  Using a little test suite&lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt; a increase of performance by up to 25% could be measured.&lt;/p&gt;

&lt;p&gt;If necessary I can recreate the patch against current MASTER.&lt;/p&gt;

&lt;p&gt;References:&lt;br/&gt;
&lt;span class="error"&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href="https://github.com/ska2342/clj-stm-perf-test/"&gt;https://github.com/ska2342/clj-stm-perf-test/&lt;/a&gt;&lt;/p&gt;</description>
                <environment>Tested on Ubuntu and OSX</environment>
            <key id="14709">CLJ-858</key>
            <summary>Improve speed of STM by removing System.currentTimeMillis</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ska2342">Stefan Kamphausen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 17 Oct 2011 13:09:14 -0700</created>
                <updated>Mon, 17 Oct 2011 13:09:14 -0700</updated>
                                    <version>Release 1.3</version>
                                                        <due/>
                    <votes>0</votes>
                        <watches>2</watches>
                                <attachments>
                    <attachment id="10406" name="stm-rm-msecs-patch.diff" size="2873" author="ska2342" created="Mon, 17 Oct 2011 13:09:14 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-821] should reify merge rather than replace on repeated specs? </title>
                <link>http://dev.clojure.org/jira/browse/CLJ-821</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;reify, deftype, and the like fail silently if you specify a class twice:&lt;/p&gt;

&lt;p&gt;(macroexpand '(reify Map (size &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; 0), &lt;br/&gt;
                     Counted (count &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; 0), &lt;br/&gt;
                     Map (keySet &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; nil)))&lt;br/&gt;
;=&amp;gt; (reify* &lt;span class="error"&gt;&amp;#91;Counted Map&amp;#93;&lt;/span&gt; (count &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; 0) (keySet &lt;span class="error"&gt;&amp;#91;this&amp;#93;&lt;/span&gt; nil))&lt;/p&gt;

&lt;p&gt;The later Map section entirely supersedes the former, which I discovered when I wrote a macro that injects some automated method bodies into a reify for you.&lt;/p&gt;

&lt;p&gt;I've attached a fix to make the above expand to the expected &lt;span class="error"&gt;&amp;#91;for me, anyway&amp;#93;&lt;/span&gt; output.&lt;/p&gt;</description>
                <environment/>
            <key id="14493">CLJ-821</key>
            <summary>should reify merge rather than replace on repeated specs? </summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="amalloy">Alan Malloy</reporter>
                        <labels>
                    </labels>
                <created>Tue, 19 Jul 2011 23:53:45 -0700</created>
                <updated>Tue, 9 Aug 2011 12:18:40 -0700</updated>
                                                    <fixVersion>Backlog</fixVersion>
                                        <due/>
                    <votes>0</votes>
                        <watches>1</watches>
                        <comments>
                    <comment id="26650" author="stu" created="Mon, 25 Jul 2011 15:01:35 -0700">&lt;p&gt;In Clojure, it is generally the case that redefining something &lt;b&gt;replaces&lt;/b&gt; the original, as opposed to augmenting it by merging the old and the new. This makes it easy to reason locally about how code works. One could argue that the following snippet has the same kind of issue you describe:&lt;/p&gt;

&lt;div class="code panel" style="border-width: 1px;"&gt;&lt;div class="codeContent panelContent"&gt;
&lt;pre class="code-java"&gt;(defn foo [a] 1)
(defn foo [a b] 1)
(foo 1) ; is it a bug that the first arity is gone?&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also wonder whether the current behavior might be a convenience for some macros. (Clearly it wasn't for yours!) I am changing the type and title of the ticket to better reflect the nature of the request and see what the BDFL says. &lt;/p&gt;</comment>
                    <comment id="26666" author="richhickey" created="Fri, 29 Jul 2011 05:32:37 -0700">&lt;p&gt;Everything in this ticket needs to be said with more precision. I don't know what exactly the problem is nor what the proposed solution is. &lt;/p&gt;

&lt;p&gt;One thing to note is that it is necessary to accept definitions under base interfaces, so the class areas are not strict, nor expected to be complete.&lt;/p&gt;</comment>
                    <comment id="26714" author="amalloy" created="Tue, 9 Aug 2011 12:16:53 -0700">&lt;p&gt;Stuart: The two foo forms you give are entirely separate, and to unify the two behaviors you would have to group them together. It's not at all unreasonable to suppose the user wants to define foo once, fiddle with it, and then redefine it - clojure.core does similar stuff with let, reduce, etc.&lt;/p&gt;

&lt;p&gt;As written, deftype/reify have a somewhat similar "look" - because there is nothing physically grouping the declaration of Map with its functions, it's not clear what should happen when a heading like Map is given twice, and it's not specified in the docs.&lt;/p&gt;

&lt;p&gt;I think the difference is that in the reify case, the two are in the &lt;em&gt;same top-level form&lt;/em&gt;, so the compiler can detect that you're trying to do something "weird", so a silent redefinition (reasonable for your defn example) is surprising. There are a number of solutions that would reduce this surprise:&lt;/p&gt;

&lt;p&gt;1) Permit or require reify to group things, as in (reify (Comparable (compare &lt;span class="error"&gt;&amp;#91;this other&amp;#93;&lt;/span&gt; 1))). Then the explicit grouping of Comparable with its methods serves two purposes: it implies that other definitions for Comparable should be included in that grouping; and it makes it easier to &lt;b&gt;do&lt;/b&gt; that, because you can just iterate over forms until you find Comparable, and then insert another definition.&lt;/p&gt;

&lt;p&gt;2) Throw an exception if an interface is specified twice. This is not ideal because it can be a lot of work for the user to group things together themselves, while it's easy for deftype to do given the grouping it's already doing. However, it would avoid the confusion and surprise, by saying "that's not allowed" rather than leaving the user guessing what's gone wrong.&lt;/p&gt;

&lt;p&gt;3) Interpret my original example code as an attempt to open the Map interface, add implementations, and then later add some more implementations.&lt;/p&gt;

&lt;p&gt;I would have liked reify to implement (1) to begin with, but at this point I don't think the syntax is backwards-compatible, so it doesn't seem like a good idea. I suppose either (2) or (3) is fine, and they both seem like an improvement over the current confusing behavior. Of course, I prefer (3), but I can understand a desire to make reify reject syntax that is not immediately obvious in intent rather than interpreting it as what I think is the most useful intent.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10281" name="0001-Make-deftype-reify-extend-tolerant-of-interfaces-spe.patch" size="1540" author="amalloy" created="Tue, 19 Jul 2011 23:54:06 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10002">Code and Test</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>

<item>
            <title>[CLJ-803] IAtom interface</title>
                <link>http://dev.clojure.org/jira/browse/CLJ-803</link>
                <project id="10010" key="CLJ">Clojure</project>
                        <description>&lt;p&gt;Atom and the other reference types do not have interfaces and are marked final.&lt;/p&gt;

&lt;p&gt;Use cases for interfaces for the reference types include database wrappers. CouchDB behaves exactly like compare-and-set! and is shared, synchronous, independent state, so it makes sense to use the Atom interface to update a CouchDB document.&lt;/p&gt;

&lt;p&gt;I talked to Rich about this, and he said "patch welcome for IAtom", complete conversation: &lt;a href="http://clojure-log.n01se.net/date/2010-12-29.html#10:04c"&gt;http://clojure-log.n01se.net/date/2010-12-29.html#10:04c&lt;/a&gt;&lt;/p&gt;</description>
                <environment/>
            <key id="14445">CLJ-803</key>
            <summary>IAtom interface</summary>
                <type id="4" iconUrl="http://dev.clojure.org/jira/images/icons/improvement.gif">Enhancement</type>
                                <priority id="4" iconUrl="http://dev.clojure.org/jira/images/icons/priority_minor.gif">Minor</priority>
                    <status id="1" iconUrl="http://dev.clojure.org/jira/images/icons/status_open.gif">Open</status>
                    <resolution id="-1">Unresolved</resolution>
                                <assignee username="aaron">Aaron Bedra</assignee>
                                <reporter username="pepijndevos">Pepijn de Vos</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 May 2011 06:57:12 -0700</created>
                <updated>Mon, 4 Jul 2011 19:18:48 -0700</updated>
                                                    <fixVersion>Approved Backlog</fixVersion>
                                        <due/>
                    <votes>1</votes>
                        <watches>2</watches>
                        <comments>
                    <comment id="26467" author="stu" created="Fri, 27 May 2011 12:33:06 -0700">&lt;p&gt;Please add a patch formatted by "git format-patch" so that attribution is included.&lt;/p&gt;</comment>
                    <comment id="26492" author="pepijndevos" created="Sat, 4 Jun 2011 03:56:35 -0700">&lt;p&gt;I added the formatted patch a few days ago. Does 'no news is good news' apply here?&lt;/p&gt;

&lt;p&gt;And, silly question, will it make it into 1.3? I can't figure out how to tell Jira to show me that.&lt;/p&gt;</comment>
                    <comment id="26551" author="hiredman" created="Mon, 4 Jul 2011 19:06:41 -0700">&lt;p&gt;I fail to see the need for an IAtom, if you want something atom like for couchdb the interfaces are already there. Maybe I ICompareAndSwap. Atoms and couchdb are different so making them appear the same is a bad idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing"&gt;http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://clojure.org/state"&gt;http://clojure.org/state&lt;/a&gt; one of the distinctions between agents and actors raised in the section titled "Message Passing and Actors" is local vs. distributed and the same distinction can be made between couchdb (regardless of compare and swap) and atoms&lt;/p&gt;</comment>
                    <comment id="26552" author="aaron" created="Mon, 4 Jul 2011 19:18:48 -0700">&lt;p&gt;This ticket has already been moved into approved backlog.  It will be revisited again after the 1.3 release where we will take a closer look at things.  For now, this will remain as is. &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="10244" name="0001-atom-interface.patch" size="3324" author="pepijndevos" created="Sat, 28 May 2011 01:39:32 -0700"/>
                    <attachment id="10239" name="iatom.patch" size="2853" author="pepijndevos" created="Fri, 27 May 2011 06:57:12 -0700"/>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                                                                            <customfield id="customfield_10010" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                <customfieldname>Patch</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10001">Code</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                        </customfields>
    </item>
</channel>
</rss>