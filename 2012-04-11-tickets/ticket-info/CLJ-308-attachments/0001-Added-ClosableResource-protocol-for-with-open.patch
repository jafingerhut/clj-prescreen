From f762e5e518d210e36bf9f331febce3336c0abeb7 Mon Sep 17 00:00:00 2001
From: Tassilo Horn <tassilo@member.fsf.org>
Date: Thu, 8 Mar 2012 10:59:01 +0100
Subject: [PATCH] Added ClosableResource protocol for with-open.

---
 src/clj/clojure/core.clj           |   12 ++++++++----
 src/clj/clojure/core/protocols.clj |   14 ++++++++++++++
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/src/clj/clojure/core.clj b/src/clj/clojure/core.clj
index e1aa2df..ca21864 100644
--- a/src/clj/clojure/core.clj
+++ b/src/clj/clojure/core.clj
@@ -3376,9 +3376,13 @@
 (defmacro with-open
   "bindings => [name init ...]
 
-  Evaluates body in a try expression with names bound to the values
-  of the inits, and a finally clause that calls (.close name) on each
-  name in reverse order."
+  Evaluates body in a try expression with names bound to the values of the
+  inits, and a finally clause that closes each resource in reverse order.
+
+  You can extend this functionality by extending the CloseableResource
+  protocol.  The default implementation works for all java.io.Closeables,
+  including Readers, Writers, InputStreams, OutputStreams, Sockets, and
+  Channels."
   {:added "1.0"}
   [bindings & body]
   (assert-args
@@ -3390,7 +3394,7 @@
                               (try
                                 (with-open ~(subvec bindings 2) ~@body)
                                 (finally
-                                  (. ~(bindings 0) close))))
+                                 (clojure.core.protocols/close ~(bindings 0)))))
     :else (throw (IllegalArgumentException.
                    "with-open only allows Symbols in bindings"))))
 
diff --git a/src/clj/clojure/core/protocols.clj b/src/clj/clojure/core/protocols.clj
index bcf4f7b..487de25 100644
--- a/src/clj/clojure/core/protocols.clj
+++ b/src/clj/clojure/core/protocols.clj
@@ -8,6 +8,8 @@
 
 (ns clojure.core.protocols)
 
+;;;;;;;;;;;;;;;;;;; InternalReduce ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
 (defprotocol InternalReduce
   "Protocol for concrete seq types that can reduce themselves
    faster than first/next recursion. Called by clojure.core/reduce."
@@ -92,3 +94,15 @@
 
 (emit-array-impls int long float double byte char boolean)
 
+;;;;;;;;;;;;;;;;;;; CloseableResource ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+(defprotocol CloseableResource
+  "Protocol for resources that can be closed (for use in with-open)."
+  (close [this]))
+
+(extend-protocol CloseableResource
+  ;; Note: in Java 1.7, there's a new Closeable super-interface
+  ;; java.lang.AutoCloseable, so at some point in time, we might want to switch
+  ;; to that.
+  java.io.Closeable
+  (close [this] (.close this)))
-- 
1.7.8.5

