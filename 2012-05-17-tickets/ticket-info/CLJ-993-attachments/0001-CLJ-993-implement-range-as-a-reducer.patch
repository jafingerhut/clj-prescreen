From e63b466ccd740f2b9a2dc4a62822966ce9a0a72d Mon Sep 17 00:00:00 2001
From: Alan Malloy <alan@malloys.org>
Date: Thu, 10 May 2012 20:42:10 -0700
Subject: [PATCH 1/2] CLJ-993 - implement range as a reducer.

---
 src/clj/clojure/core/reducers.clj      |   29 ++++++++++++++++++++++++++++-
 test/clojure/test_clojure/reducers.clj |   19 +++++++++++++++++++
 2 files changed, 47 insertions(+), 1 deletions(-)

diff --git a/src/clj/clojure/core/reducers.clj b/src/clj/clojure/core/reducers.clj
index 19c86db..620ebe6 100644
--- a/src/clj/clojure/core/reducers.clj
+++ b/src/clj/clojure/core/reducers.clj
@@ -13,7 +13,7 @@
       dependency info."
       :author "Rich Hickey"}
   clojure.core.reducers
-  (:refer-clojure :exclude [reduce map mapcat filter remove take take-while drop flatten iterate])
+  (:refer-clojure :exclude [reduce map mapcat filter remove take take-while drop flatten iterate range])
   (:require [clojure.walk :as walk]))
 
 (alias 'core 'clojure.core)
@@ -314,6 +314,33 @@
           (let [next (f seed)]
             (recur (f1 ret next) next)))))))
 
+;;do not construct this directly, use range
+(deftype Range [start end step]
+  clojure.lang.Counted
+  (count [this]
+    (int (Math/ceil (/ (- end start) step))))
+
+  clojure.core.protocols/CollReduce
+  (coll-reduce [this f1] (clojure.core.protocols/coll-reduce this f1 (f1)))
+  (coll-reduce [this f1 init]
+    (let [cmp (if (pos? step) < >)]
+      (loop [ret init, i start]
+        (if (reduced? ret)
+          @ret
+          (if (cmp i end)
+            (recur (f1 ret i) (+ i step))
+            ret))))))
+
+(defn range
+  "Returns a reducible collection of nums from start (inclusive) to end
+  (exclusive), by step, where start defaults to 0, step to 1, and end
+  to infinity."
+  {:added "1.5"}
+  ([] (iterate inc 0))
+  ([end] (Range. 0 end 1))
+  ([start end] (Range. start end 1))
+  ([start end step] (Range. start end step)))
+
 (defn append!
   ".adds x to acc and returns acc"
   {:added "1.5"}
diff --git a/test/clojure/test_clojure/reducers.clj b/test/clojure/test_clojure/reducers.clj
index 8d4e789..ed440a8 100644
--- a/test/clojure/test_clojure/reducers.clj
+++ b/test/clojure/test_clojure/reducers.clj
@@ -46,3 +46,22 @@
               (r/drop 1e5)
               (r/take 1)
               (into [])))))
+
+(deftest test-range
+  (is (= (take 10000 (range))
+         (->> (r/range)
+              (r/take 10000)
+              (into []))))
+  (is (not (counted? (r/range))))
+  (doseq [argvec [[10]
+                  [4 31]
+                  [10 2 -2]
+                  [0 23 5]
+                  [1 -8 -2]]]
+    (let [seq-version (apply range argvec)
+          reduce-version (apply r/range argvec)
+          reduced-vector (into [] reduce-version)]
+      (is (counted? reduce-version))
+      (is (= seq-version reduced-vector))
+      (is (= (count reduce-version)
+             (count reduced-vector))))))
-- 
1.7.4.1

